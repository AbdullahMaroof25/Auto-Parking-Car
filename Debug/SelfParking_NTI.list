
SelfParking_NTI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004908  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004aa8  08004aa8  00014aa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ae0  08004ae0  00020048  2**0
                  CONTENTS
  4 .ARM          00000000  08004ae0  08004ae0  00020048  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004ae0  08004ae0  00020048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ae0  08004ae0  00014ae0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ae4  08004ae4  00014ae4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000048  20000000  08004ae8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005190  20000048  08004b30  00020048  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200051d8  08004b30  000251d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000951a  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a2d  00000000  00000000  00029592  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000007e0  00000000  00000000  0002afc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006a8  00000000  00000000  0002b7a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003d30  00000000  00000000  0002be48  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000073f2  00000000  00000000  0002fb78  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000144de  00000000  00000000  00036f6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0004b448  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001bbc  00000000  00000000  0004b4c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000048 	.word	0x20000048
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004a90 	.word	0x08004a90

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000004c 	.word	0x2000004c
 80001dc:	08004a90 	.word	0x08004a90

080001e0 <App_init_Fun>:
 * Sync\Async      : Synchronous
 * Parameters (in) : void
 * Return value:   : void
 *******************************************************************************/
static void		App_init_Fun		(void)
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	af00      	add	r7, sp, #0
	LED_Init();
 80001e4:	f000 fd5a 	bl	8000c9c <LED_Init>
	Motion_State = Init_State;
 80001e8:	4b08      	ldr	r3, [pc, #32]	; (800020c <App_init_Fun+0x2c>)
 80001ea:	2200      	movs	r2, #0
 80001ec:	701a      	strb	r2, [r3, #0]
	PWM_SPEED = 40;
 80001ee:	4b08      	ldr	r3, [pc, #32]	; (8000210 <App_init_Fun+0x30>)
 80001f0:	2228      	movs	r2, #40	; 0x28
 80001f2:	701a      	strb	r2, [r3, #0]
	Motor_mode = Motor_GoForward_mode;
 80001f4:	4b07      	ldr	r3, [pc, #28]	; (8000214 <App_init_Fun+0x34>)
 80001f6:	2201      	movs	r2, #1
 80001f8:	701a      	strb	r2, [r3, #0]
	App_mode = App_Search_mode;
 80001fa:	4b07      	ldr	r3, [pc, #28]	; (8000218 <App_init_Fun+0x38>)
 80001fc:	2201      	movs	r2, #1
 80001fe:	701a      	strb	r2, [r3, #0]
	UltraSonic_state = UltraSonic_Channel_4_Read;
 8000200:	4b06      	ldr	r3, [pc, #24]	; (800021c <App_init_Fun+0x3c>)
 8000202:	2203      	movs	r2, #3
 8000204:	701a      	strb	r2, [r3, #0]

}
 8000206:	bf00      	nop
 8000208:	bd80      	pop	{r7, pc}
 800020a:	bf00      	nop
 800020c:	20000065 	.word	0x20000065
 8000210:	20000024 	.word	0x20000024
 8000214:	20000084 	.word	0x20000084
 8000218:	20000064 	.word	0x20000064
 800021c:	20000000 	.word	0x20000000

08000220 <App_Search_Fun>:
 * Sync\Async      : Synchronous
 * Parameters (in) : void
 * Return value:   : void
 *******************************************************************************/
static void		App_Search_Fun  	(void)
{
 8000220:	b480      	push	{r7}
 8000222:	af00      	add	r7, sp, #0

	PWM_SPEED = 50;
 8000224:	4b1f      	ldr	r3, [pc, #124]	; (80002a4 <App_Search_Fun+0x84>)
 8000226:	2232      	movs	r2, #50	; 0x32
 8000228:	701a      	strb	r2, [r3, #0]
	if(Motion_State == Init_State)
 800022a:	4b1f      	ldr	r3, [pc, #124]	; (80002a8 <App_Search_Fun+0x88>)
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	2b00      	cmp	r3, #0
 8000230:	d115      	bne.n	800025e <App_Search_Fun+0x3e>
	{
		UltraSonic_state = UltraSonic_Channel_4_Read;
 8000232:	4b1e      	ldr	r3, [pc, #120]	; (80002ac <App_Search_Fun+0x8c>)
 8000234:	2203      	movs	r2, #3
 8000236:	701a      	strb	r2, [r3, #0]
		if(  FrontRight_Channel <= 25 && BackRight_Channel > 25  )
 8000238:	4b1d      	ldr	r3, [pc, #116]	; (80002b0 <App_Search_Fun+0x90>)
 800023a:	88db      	ldrh	r3, [r3, #6]
 800023c:	2b19      	cmp	r3, #25
 800023e:	d807      	bhi.n	8000250 <App_Search_Fun+0x30>
 8000240:	4b1b      	ldr	r3, [pc, #108]	; (80002b0 <App_Search_Fun+0x90>)
 8000242:	891b      	ldrh	r3, [r3, #8]
 8000244:	2b19      	cmp	r3, #25
 8000246:	d903      	bls.n	8000250 <App_Search_Fun+0x30>
		{
			Motor_mode = Motor_GoForward_mode;
 8000248:	4b1a      	ldr	r3, [pc, #104]	; (80002b4 <App_Search_Fun+0x94>)
 800024a:	2201      	movs	r2, #1
 800024c:	701a      	strb	r2, [r3, #0]
 800024e:	e006      	b.n	800025e <App_Search_Fun+0x3e>
		}
		else if( FrontRight_Channel > 25 )
 8000250:	4b17      	ldr	r3, [pc, #92]	; (80002b0 <App_Search_Fun+0x90>)
 8000252:	88db      	ldrh	r3, [r3, #6]
 8000254:	2b19      	cmp	r3, #25
 8000256:	d902      	bls.n	800025e <App_Search_Fun+0x3e>
		{
			Motion_State = Search_State;
 8000258:	4b13      	ldr	r3, [pc, #76]	; (80002a8 <App_Search_Fun+0x88>)
 800025a:	2201      	movs	r2, #1
 800025c:	701a      	strb	r2, [r3, #0]
		}
	}
	if ( Motion_State == Search_State)
 800025e:	4b12      	ldr	r3, [pc, #72]	; (80002a8 <App_Search_Fun+0x88>)
 8000260:	781b      	ldrb	r3, [r3, #0]
 8000262:	2b01      	cmp	r3, #1
 8000264:	d119      	bne.n	800029a <App_Search_Fun+0x7a>
	{
		UltraSonic_state = UltraSonic_Channel_4_Read;
 8000266:	4b11      	ldr	r3, [pc, #68]	; (80002ac <App_Search_Fun+0x8c>)
 8000268:	2203      	movs	r2, #3
 800026a:	701a      	strb	r2, [r3, #0]

		if(  FrontRight_Channel <= 25 && BackRight_Channel > 25 )
 800026c:	4b10      	ldr	r3, [pc, #64]	; (80002b0 <App_Search_Fun+0x90>)
 800026e:	88db      	ldrh	r3, [r3, #6]
 8000270:	2b19      	cmp	r3, #25
 8000272:	d812      	bhi.n	800029a <App_Search_Fun+0x7a>
 8000274:	4b0e      	ldr	r3, [pc, #56]	; (80002b0 <App_Search_Fun+0x90>)
 8000276:	891b      	ldrh	r3, [r3, #8]
 8000278:	2b19      	cmp	r3, #25
 800027a:	d90e      	bls.n	800029a <App_Search_Fun+0x7a>
		{
			App_mode = App_Parking_mode;
 800027c:	4b0e      	ldr	r3, [pc, #56]	; (80002b8 <App_Search_Fun+0x98>)
 800027e:	2202      	movs	r2, #2
 8000280:	701a      	strb	r2, [r3, #0]
			Motor_mode = Motor_stop_mode;
 8000282:	4b0c      	ldr	r3, [pc, #48]	; (80002b4 <App_Search_Fun+0x94>)
 8000284:	2207      	movs	r2, #7
 8000286:	701a      	strb	r2, [r3, #0]
			PWM_SPEED = 60; //70
 8000288:	4b06      	ldr	r3, [pc, #24]	; (80002a4 <App_Search_Fun+0x84>)
 800028a:	223c      	movs	r2, #60	; 0x3c
 800028c:	701a      	strb	r2, [r3, #0]
			UltraSonic_state = UltraSonic_Channel_5_Read;
 800028e:	4b07      	ldr	r3, [pc, #28]	; (80002ac <App_Search_Fun+0x8c>)
 8000290:	2204      	movs	r2, #4
 8000292:	701a      	strb	r2, [r3, #0]
			Motion_State = Parking_Steer_State;
 8000294:	4b04      	ldr	r3, [pc, #16]	; (80002a8 <App_Search_Fun+0x88>)
 8000296:	2202      	movs	r2, #2
 8000298:	701a      	strb	r2, [r3, #0]
		}
	}


}
 800029a:	bf00      	nop
 800029c:	46bd      	mov	sp, r7
 800029e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a2:	4770      	bx	lr
 80002a4:	20000024 	.word	0x20000024
 80002a8:	20000065 	.word	0x20000065
 80002ac:	20000000 	.word	0x20000000
 80002b0:	200051cc 	.word	0x200051cc
 80002b4:	20000084 	.word	0x20000084
 80002b8:	20000064 	.word	0x20000064

080002bc <App_Parking_Fun>:
 * Sync\Async      : Synchronous
 * Parameters (in) : void
 * Return value:   : void
 *******************************************************************************/
static void		App_Parking_Fun 	(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	af00      	add	r7, sp, #0
	if(Motion_State == Parking_Steer_State)
 80002c0:	4b26      	ldr	r3, [pc, #152]	; (800035c <App_Parking_Fun+0xa0>)
 80002c2:	781b      	ldrb	r3, [r3, #0]
 80002c4:	2b02      	cmp	r3, #2
 80002c6:	d10c      	bne.n	80002e2 <App_Parking_Fun+0x26>
	{
		vTaskDelay(500);
 80002c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002cc:	f002 ff68 	bl	80031a0 <vTaskDelay>
		Motor_mode = Motor_GoBackRight_mode;
 80002d0:	4b23      	ldr	r3, [pc, #140]	; (8000360 <App_Parking_Fun+0xa4>)
 80002d2:	2205      	movs	r2, #5
 80002d4:	701a      	strb	r2, [r3, #0]
		UltraSonic_state = UltraSonic_Channel_5_Read;
 80002d6:	4b23      	ldr	r3, [pc, #140]	; (8000364 <App_Parking_Fun+0xa8>)
 80002d8:	2204      	movs	r2, #4
 80002da:	701a      	strb	r2, [r3, #0]

		Motion_State = Parking_Stop_State;
 80002dc:	4b1f      	ldr	r3, [pc, #124]	; (800035c <App_Parking_Fun+0xa0>)
 80002de:	2203      	movs	r2, #3
 80002e0:	701a      	strb	r2, [r3, #0]
	}
	if(Motion_State == Parking_Stop_State)
 80002e2:	4b1e      	ldr	r3, [pc, #120]	; (800035c <App_Parking_Fun+0xa0>)
 80002e4:	781b      	ldrb	r3, [r3, #0]
 80002e6:	2b03      	cmp	r3, #3
 80002e8:	d110      	bne.n	800030c <App_Parking_Fun+0x50>
	{
		UltraSonic_state = UltraSonic_Channel_5_Read;
 80002ea:	4b1e      	ldr	r3, [pc, #120]	; (8000364 <App_Parking_Fun+0xa8>)
 80002ec:	2204      	movs	r2, #4
 80002ee:	701a      	strb	r2, [r3, #0]
		if(BackRight_Channel <= 20 )
 80002f0:	4b1d      	ldr	r3, [pc, #116]	; (8000368 <App_Parking_Fun+0xac>)
 80002f2:	891b      	ldrh	r3, [r3, #8]
 80002f4:	2b14      	cmp	r3, #20
 80002f6:	d809      	bhi.n	800030c <App_Parking_Fun+0x50>
		{
			Motor_mode = Motor_stop_mode;
 80002f8:	4b19      	ldr	r3, [pc, #100]	; (8000360 <App_Parking_Fun+0xa4>)
 80002fa:	2207      	movs	r2, #7
 80002fc:	701a      	strb	r2, [r3, #0]
			vTaskDelay(500);
 80002fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000302:	f002 ff4d 	bl	80031a0 <vTaskDelay>
			Motion_State = Parking_Backward_State;
 8000306:	4b15      	ldr	r3, [pc, #84]	; (800035c <App_Parking_Fun+0xa0>)
 8000308:	2204      	movs	r2, #4
 800030a:	701a      	strb	r2, [r3, #0]
		}
	}
	if( Motion_State == Parking_Backward_State )
 800030c:	4b13      	ldr	r3, [pc, #76]	; (800035c <App_Parking_Fun+0xa0>)
 800030e:	781b      	ldrb	r3, [r3, #0]
 8000310:	2b04      	cmp	r3, #4
 8000312:	d10f      	bne.n	8000334 <App_Parking_Fun+0x78>
	{
		  UltraSonic_state = UltraSonic_Channel_6_Read;
 8000314:	4b13      	ldr	r3, [pc, #76]	; (8000364 <App_Parking_Fun+0xa8>)
 8000316:	2205      	movs	r2, #5
 8000318:	701a      	strb	r2, [r3, #0]
		if (  BackMiddle_Channel > 25  )
 800031a:	4b13      	ldr	r3, [pc, #76]	; (8000368 <App_Parking_Fun+0xac>)
 800031c:	895b      	ldrh	r3, [r3, #10]
 800031e:	2b19      	cmp	r3, #25
 8000320:	d908      	bls.n	8000334 <App_Parking_Fun+0x78>
		{
			PWM_SPEED = 70; //70;
 8000322:	4b12      	ldr	r3, [pc, #72]	; (800036c <App_Parking_Fun+0xb0>)
 8000324:	2246      	movs	r2, #70	; 0x46
 8000326:	701a      	strb	r2, [r3, #0]
			Motor_mode  = Motor_GoBackward_mode;
 8000328:	4b0d      	ldr	r3, [pc, #52]	; (8000360 <App_Parking_Fun+0xa4>)
 800032a:	2202      	movs	r2, #2
 800032c:	701a      	strb	r2, [r3, #0]
			Motion_State = Idle_State;
 800032e:	4b0b      	ldr	r3, [pc, #44]	; (800035c <App_Parking_Fun+0xa0>)
 8000330:	2205      	movs	r2, #5
 8000332:	701a      	strb	r2, [r3, #0]
		}
	}

	if( Motion_State == Idle_State )
 8000334:	4b09      	ldr	r3, [pc, #36]	; (800035c <App_Parking_Fun+0xa0>)
 8000336:	781b      	ldrb	r3, [r3, #0]
 8000338:	2b05      	cmp	r3, #5
 800033a:	d10c      	bne.n	8000356 <App_Parking_Fun+0x9a>
	{
		UltraSonic_state = UltraSonic_Channel_6_Read;
 800033c:	4b09      	ldr	r3, [pc, #36]	; (8000364 <App_Parking_Fun+0xa8>)
 800033e:	2205      	movs	r2, #5
 8000340:	701a      	strb	r2, [r3, #0]
		if (  BackMiddle_Channel <= 20  )
 8000342:	4b09      	ldr	r3, [pc, #36]	; (8000368 <App_Parking_Fun+0xac>)
 8000344:	895b      	ldrh	r3, [r3, #10]
 8000346:	2b14      	cmp	r3, #20
 8000348:	d805      	bhi.n	8000356 <App_Parking_Fun+0x9a>
		{
			Motor_mode = Motor_stop_mode;
 800034a:	4b05      	ldr	r3, [pc, #20]	; (8000360 <App_Parking_Fun+0xa4>)
 800034c:	2207      	movs	r2, #7
 800034e:	701a      	strb	r2, [r3, #0]
			App_mode = App_IDLE_mode;
 8000350:	4b07      	ldr	r3, [pc, #28]	; (8000370 <App_Parking_Fun+0xb4>)
 8000352:	2203      	movs	r2, #3
 8000354:	701a      	strb	r2, [r3, #0]
		}
	}

}
 8000356:	bf00      	nop
 8000358:	bd80      	pop	{r7, pc}
 800035a:	bf00      	nop
 800035c:	20000065 	.word	0x20000065
 8000360:	20000084 	.word	0x20000084
 8000364:	20000000 	.word	0x20000000
 8000368:	200051cc 	.word	0x200051cc
 800036c:	20000024 	.word	0x20000024
 8000370:	20000064 	.word	0x20000064

08000374 <App_IDLE_Fun>:
 * Sync\Async      : Synchronous
 * Parameters (in) : void
 * Return value:   : void
 *******************************************************************************/
static void		App_IDLE_Fun     	(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	af00      	add	r7, sp, #0
	LED_ON();
 8000378:	f000 fc9e 	bl	8000cb8 <LED_ON>
}
 800037c:	bf00      	nop
 800037e:	bd80      	pop	{r7, pc}

08000380 <App_Task>:
/*******************************************************************************
 *                      Global Functions Definitions                           *
 *******************************************************************************/
void App_Task(void * pvparam)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b084      	sub	sp, #16
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
	portTickType Freq = 10;
 8000388:	230a      	movs	r3, #10
 800038a:	60fb      	str	r3, [r7, #12]
	portTickType Start = xTaskGetTickCount();
 800038c:	f003 f886 	bl	800349c <xTaskGetTickCount>
 8000390:	4603      	mov	r3, r0
 8000392:	60bb      	str	r3, [r7, #8]
	while(1)
	{
		switch(App_mode)
 8000394:	4b11      	ldr	r3, [pc, #68]	; (80003dc <App_Task+0x5c>)
 8000396:	781b      	ldrb	r3, [r3, #0]
 8000398:	2b03      	cmp	r3, #3
 800039a:	d817      	bhi.n	80003cc <App_Task+0x4c>
 800039c:	a201      	add	r2, pc, #4	; (adr r2, 80003a4 <App_Task+0x24>)
 800039e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003a2:	bf00      	nop
 80003a4:	080003b5 	.word	0x080003b5
 80003a8:	080003bb 	.word	0x080003bb
 80003ac:	080003c1 	.word	0x080003c1
 80003b0:	080003c7 	.word	0x080003c7
		{
		case App_init_mode:
		{
			App_init_Fun();
 80003b4:	f7ff ff14 	bl	80001e0 <App_init_Fun>
		}
		break;
 80003b8:	e008      	b.n	80003cc <App_Task+0x4c>
		case App_Search_mode:
		{
			App_Search_Fun();
 80003ba:	f7ff ff31 	bl	8000220 <App_Search_Fun>
		}
		break;
 80003be:	e005      	b.n	80003cc <App_Task+0x4c>
		case App_Parking_mode:
		{
			App_Parking_Fun();
 80003c0:	f7ff ff7c 	bl	80002bc <App_Parking_Fun>
		}
		break;
 80003c4:	e002      	b.n	80003cc <App_Task+0x4c>
		case App_IDLE_mode:
		{
			App_IDLE_Fun();
 80003c6:	f7ff ffd5 	bl	8000374 <App_IDLE_Fun>
		}
		break;
 80003ca:	bf00      	nop
		}
		vTaskDelayUntil(&Start,Freq);
 80003cc:	f107 0308 	add.w	r3, r7, #8
 80003d0:	68f9      	ldr	r1, [r7, #12]
 80003d2:	4618      	mov	r0, r3
 80003d4:	f002 fe68 	bl	80030a8 <xTaskDelayUntil>
		switch(App_mode)
 80003d8:	e7dc      	b.n	8000394 <App_Task+0x14>
 80003da:	bf00      	nop
 80003dc:	20000064 	.word	0x20000064

080003e0 <channel_1_Trigger>:

/*******************************************************************************
 *                      Private Functions Definitions                          *
 *******************************************************************************/
static void channel_1_Trigger(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	af00      	add	r7, sp, #0
	Ultrasonic_Trigger( TRIGGER1_PORT , TRIGGER1_PIN , UltraSonic_Channel1 );
 80003e4:	2200      	movs	r2, #0
 80003e6:	2104      	movs	r1, #4
 80003e8:	2000      	movs	r0, #0
 80003ea:	f000 fe0d 	bl	8001008 <Ultrasonic_Trigger>
}
 80003ee:	bf00      	nop
 80003f0:	bd80      	pop	{r7, pc}
	...

080003f4 <channel_1_Read>:

static void channel_1_Read(void)
{
 80003f4:	b590      	push	{r4, r7, lr}
 80003f6:	b083      	sub	sp, #12
 80003f8:	af00      	add	r7, sp, #0
	u8 i ;
	CH1_arr[CH1_index] = Ultrasonic_readDistance();
 80003fa:	4b1b      	ldr	r3, [pc, #108]	; (8000468 <channel_1_Read+0x74>)
 80003fc:	781b      	ldrb	r3, [r3, #0]
 80003fe:	461c      	mov	r4, r3
 8000400:	f000 fe2a 	bl	8001058 <Ultrasonic_readDistance>
 8000404:	4603      	mov	r3, r0
 8000406:	461a      	mov	r2, r3
 8000408:	4b18      	ldr	r3, [pc, #96]	; (800046c <channel_1_Read+0x78>)
 800040a:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
	CH1_index++;
 800040e:	4b16      	ldr	r3, [pc, #88]	; (8000468 <channel_1_Read+0x74>)
 8000410:	781b      	ldrb	r3, [r3, #0]
 8000412:	3301      	adds	r3, #1
 8000414:	b2da      	uxtb	r2, r3
 8000416:	4b14      	ldr	r3, [pc, #80]	; (8000468 <channel_1_Read+0x74>)
 8000418:	701a      	strb	r2, [r3, #0]
	if(CH1_index == Max_Num_Read)
 800041a:	4b13      	ldr	r3, [pc, #76]	; (8000468 <channel_1_Read+0x74>)
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	2b02      	cmp	r3, #2
 8000420:	d11e      	bne.n	8000460 <channel_1_Read+0x6c>
	{
		Ultra_Sonic_Read[0] = 0;
 8000422:	4b13      	ldr	r3, [pc, #76]	; (8000470 <channel_1_Read+0x7c>)
 8000424:	2200      	movs	r2, #0
 8000426:	801a      	strh	r2, [r3, #0]
		for( i = 0 ; i < Max_Num_Read ; i++)
 8000428:	2300      	movs	r3, #0
 800042a:	71fb      	strb	r3, [r7, #7]
 800042c:	e00c      	b.n	8000448 <channel_1_Read+0x54>
		{
			Ultra_Sonic_Read[0] += CH1_arr[i];
 800042e:	4b10      	ldr	r3, [pc, #64]	; (8000470 <channel_1_Read+0x7c>)
 8000430:	881a      	ldrh	r2, [r3, #0]
 8000432:	79fb      	ldrb	r3, [r7, #7]
 8000434:	490d      	ldr	r1, [pc, #52]	; (800046c <channel_1_Read+0x78>)
 8000436:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800043a:	4413      	add	r3, r2
 800043c:	b29a      	uxth	r2, r3
 800043e:	4b0c      	ldr	r3, [pc, #48]	; (8000470 <channel_1_Read+0x7c>)
 8000440:	801a      	strh	r2, [r3, #0]
		for( i = 0 ; i < Max_Num_Read ; i++)
 8000442:	79fb      	ldrb	r3, [r7, #7]
 8000444:	3301      	adds	r3, #1
 8000446:	71fb      	strb	r3, [r7, #7]
 8000448:	79fb      	ldrb	r3, [r7, #7]
 800044a:	2b01      	cmp	r3, #1
 800044c:	d9ef      	bls.n	800042e <channel_1_Read+0x3a>
		}

		Ultra_Sonic_Read[0] /= Max_Num_Read;
 800044e:	4b08      	ldr	r3, [pc, #32]	; (8000470 <channel_1_Read+0x7c>)
 8000450:	881b      	ldrh	r3, [r3, #0]
 8000452:	085b      	lsrs	r3, r3, #1
 8000454:	b29a      	uxth	r2, r3
 8000456:	4b06      	ldr	r3, [pc, #24]	; (8000470 <channel_1_Read+0x7c>)
 8000458:	801a      	strh	r2, [r3, #0]
		CH1_index = 0;
 800045a:	4b03      	ldr	r3, [pc, #12]	; (8000468 <channel_1_Read+0x74>)
 800045c:	2200      	movs	r2, #0
 800045e:	701a      	strb	r2, [r3, #0]
	}
}
 8000460:	bf00      	nop
 8000462:	370c      	adds	r7, #12
 8000464:	46bd      	mov	sp, r7
 8000466:	bd90      	pop	{r4, r7, pc}
 8000468:	20000066 	.word	0x20000066
 800046c:	2000006c 	.word	0x2000006c
 8000470:	200051cc 	.word	0x200051cc

08000474 <channel_2_Trigger>:

static void channel_2_Trigger(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	af00      	add	r7, sp, #0
	Ultrasonic_Trigger( TRIGGER2_PORT , TRIGGER2_PIN , UltraSonic_Channel2 );
 8000478:	2201      	movs	r2, #1
 800047a:	2104      	movs	r1, #4
 800047c:	2000      	movs	r0, #0
 800047e:	f000 fdc3 	bl	8001008 <Ultrasonic_Trigger>
}
 8000482:	bf00      	nop
 8000484:	bd80      	pop	{r7, pc}
	...

08000488 <channel_2_Read>:

static void channel_2_Read(void)
{
 8000488:	b590      	push	{r4, r7, lr}
 800048a:	b083      	sub	sp, #12
 800048c:	af00      	add	r7, sp, #0
	u8 i ;
	CH2_arr[CH2_index] = Ultrasonic_readDistance();
 800048e:	4b1b      	ldr	r3, [pc, #108]	; (80004fc <channel_2_Read+0x74>)
 8000490:	781b      	ldrb	r3, [r3, #0]
 8000492:	461c      	mov	r4, r3
 8000494:	f000 fde0 	bl	8001058 <Ultrasonic_readDistance>
 8000498:	4603      	mov	r3, r0
 800049a:	461a      	mov	r2, r3
 800049c:	4b18      	ldr	r3, [pc, #96]	; (8000500 <channel_2_Read+0x78>)
 800049e:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
	CH2_index++;
 80004a2:	4b16      	ldr	r3, [pc, #88]	; (80004fc <channel_2_Read+0x74>)
 80004a4:	781b      	ldrb	r3, [r3, #0]
 80004a6:	3301      	adds	r3, #1
 80004a8:	b2da      	uxtb	r2, r3
 80004aa:	4b14      	ldr	r3, [pc, #80]	; (80004fc <channel_2_Read+0x74>)
 80004ac:	701a      	strb	r2, [r3, #0]

	if(CH2_index == Max_Num_Read)
 80004ae:	4b13      	ldr	r3, [pc, #76]	; (80004fc <channel_2_Read+0x74>)
 80004b0:	781b      	ldrb	r3, [r3, #0]
 80004b2:	2b02      	cmp	r3, #2
 80004b4:	d11e      	bne.n	80004f4 <channel_2_Read+0x6c>
	{
		Ultra_Sonic_Read[1] = 0;
 80004b6:	4b13      	ldr	r3, [pc, #76]	; (8000504 <channel_2_Read+0x7c>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	805a      	strh	r2, [r3, #2]
		for( i = 0 ; i < Max_Num_Read ; i++)
 80004bc:	2300      	movs	r3, #0
 80004be:	71fb      	strb	r3, [r7, #7]
 80004c0:	e00c      	b.n	80004dc <channel_2_Read+0x54>
		{
			Ultra_Sonic_Read[1] += CH2_arr[i];
 80004c2:	4b10      	ldr	r3, [pc, #64]	; (8000504 <channel_2_Read+0x7c>)
 80004c4:	885a      	ldrh	r2, [r3, #2]
 80004c6:	79fb      	ldrb	r3, [r7, #7]
 80004c8:	490d      	ldr	r1, [pc, #52]	; (8000500 <channel_2_Read+0x78>)
 80004ca:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80004ce:	4413      	add	r3, r2
 80004d0:	b29a      	uxth	r2, r3
 80004d2:	4b0c      	ldr	r3, [pc, #48]	; (8000504 <channel_2_Read+0x7c>)
 80004d4:	805a      	strh	r2, [r3, #2]
		for( i = 0 ; i < Max_Num_Read ; i++)
 80004d6:	79fb      	ldrb	r3, [r7, #7]
 80004d8:	3301      	adds	r3, #1
 80004da:	71fb      	strb	r3, [r7, #7]
 80004dc:	79fb      	ldrb	r3, [r7, #7]
 80004de:	2b01      	cmp	r3, #1
 80004e0:	d9ef      	bls.n	80004c2 <channel_2_Read+0x3a>
		}

		Ultra_Sonic_Read[1] /= Max_Num_Read;
 80004e2:	4b08      	ldr	r3, [pc, #32]	; (8000504 <channel_2_Read+0x7c>)
 80004e4:	885b      	ldrh	r3, [r3, #2]
 80004e6:	085b      	lsrs	r3, r3, #1
 80004e8:	b29a      	uxth	r2, r3
 80004ea:	4b06      	ldr	r3, [pc, #24]	; (8000504 <channel_2_Read+0x7c>)
 80004ec:	805a      	strh	r2, [r3, #2]
		CH2_index = 0;
 80004ee:	4b03      	ldr	r3, [pc, #12]	; (80004fc <channel_2_Read+0x74>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	701a      	strb	r2, [r3, #0]
	}
}
 80004f4:	bf00      	nop
 80004f6:	370c      	adds	r7, #12
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd90      	pop	{r4, r7, pc}
 80004fc:	20000067 	.word	0x20000067
 8000500:	20000070 	.word	0x20000070
 8000504:	200051cc 	.word	0x200051cc

08000508 <channel_3_Trigger>:

static void channel_3_Trigger(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
	Ultrasonic_Trigger( TRIGGER3_PORT , TRIGGER3_PIN , UltraSonic_Channel3 );
 800050c:	2202      	movs	r2, #2
 800050e:	2104      	movs	r1, #4
 8000510:	2000      	movs	r0, #0
 8000512:	f000 fd79 	bl	8001008 <Ultrasonic_Trigger>
}
 8000516:	bf00      	nop
 8000518:	bd80      	pop	{r7, pc}
	...

0800051c <channel_3_Read>:

static void channel_3_Read(void)
{
 800051c:	b590      	push	{r4, r7, lr}
 800051e:	b083      	sub	sp, #12
 8000520:	af00      	add	r7, sp, #0
	u8 i ;
	CH3_arr[CH3_index] = Ultrasonic_readDistance();
 8000522:	4b1b      	ldr	r3, [pc, #108]	; (8000590 <channel_3_Read+0x74>)
 8000524:	781b      	ldrb	r3, [r3, #0]
 8000526:	461c      	mov	r4, r3
 8000528:	f000 fd96 	bl	8001058 <Ultrasonic_readDistance>
 800052c:	4603      	mov	r3, r0
 800052e:	461a      	mov	r2, r3
 8000530:	4b18      	ldr	r3, [pc, #96]	; (8000594 <channel_3_Read+0x78>)
 8000532:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
	CH3_index++;
 8000536:	4b16      	ldr	r3, [pc, #88]	; (8000590 <channel_3_Read+0x74>)
 8000538:	781b      	ldrb	r3, [r3, #0]
 800053a:	3301      	adds	r3, #1
 800053c:	b2da      	uxtb	r2, r3
 800053e:	4b14      	ldr	r3, [pc, #80]	; (8000590 <channel_3_Read+0x74>)
 8000540:	701a      	strb	r2, [r3, #0]

	if(CH3_index == Max_Num_Read)
 8000542:	4b13      	ldr	r3, [pc, #76]	; (8000590 <channel_3_Read+0x74>)
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	2b02      	cmp	r3, #2
 8000548:	d11e      	bne.n	8000588 <channel_3_Read+0x6c>
	{
		Ultra_Sonic_Read[2] = 0;
 800054a:	4b13      	ldr	r3, [pc, #76]	; (8000598 <channel_3_Read+0x7c>)
 800054c:	2200      	movs	r2, #0
 800054e:	809a      	strh	r2, [r3, #4]
		for( i = 0 ; i < Max_Num_Read ; i++)
 8000550:	2300      	movs	r3, #0
 8000552:	71fb      	strb	r3, [r7, #7]
 8000554:	e00c      	b.n	8000570 <channel_3_Read+0x54>
		{
			Ultra_Sonic_Read[2] += CH3_arr[i];
 8000556:	4b10      	ldr	r3, [pc, #64]	; (8000598 <channel_3_Read+0x7c>)
 8000558:	889a      	ldrh	r2, [r3, #4]
 800055a:	79fb      	ldrb	r3, [r7, #7]
 800055c:	490d      	ldr	r1, [pc, #52]	; (8000594 <channel_3_Read+0x78>)
 800055e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000562:	4413      	add	r3, r2
 8000564:	b29a      	uxth	r2, r3
 8000566:	4b0c      	ldr	r3, [pc, #48]	; (8000598 <channel_3_Read+0x7c>)
 8000568:	809a      	strh	r2, [r3, #4]
		for( i = 0 ; i < Max_Num_Read ; i++)
 800056a:	79fb      	ldrb	r3, [r7, #7]
 800056c:	3301      	adds	r3, #1
 800056e:	71fb      	strb	r3, [r7, #7]
 8000570:	79fb      	ldrb	r3, [r7, #7]
 8000572:	2b01      	cmp	r3, #1
 8000574:	d9ef      	bls.n	8000556 <channel_3_Read+0x3a>
		}

		Ultra_Sonic_Read[2] /= Max_Num_Read;
 8000576:	4b08      	ldr	r3, [pc, #32]	; (8000598 <channel_3_Read+0x7c>)
 8000578:	889b      	ldrh	r3, [r3, #4]
 800057a:	085b      	lsrs	r3, r3, #1
 800057c:	b29a      	uxth	r2, r3
 800057e:	4b06      	ldr	r3, [pc, #24]	; (8000598 <channel_3_Read+0x7c>)
 8000580:	809a      	strh	r2, [r3, #4]
		CH3_index = 0;
 8000582:	4b03      	ldr	r3, [pc, #12]	; (8000590 <channel_3_Read+0x74>)
 8000584:	2200      	movs	r2, #0
 8000586:	701a      	strb	r2, [r3, #0]
	}
}
 8000588:	bf00      	nop
 800058a:	370c      	adds	r7, #12
 800058c:	46bd      	mov	sp, r7
 800058e:	bd90      	pop	{r4, r7, pc}
 8000590:	20000068 	.word	0x20000068
 8000594:	20000074 	.word	0x20000074
 8000598:	200051cc 	.word	0x200051cc

0800059c <channel_4_Trigger>:

static void channel_4_Trigger(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
	Ultrasonic_Trigger( TRIGGER4_PORT , TRIGGER4_PIN , UltraSonic_Channel4 );
 80005a0:	2203      	movs	r2, #3
 80005a2:	2104      	movs	r1, #4
 80005a4:	2000      	movs	r0, #0
 80005a6:	f000 fd2f 	bl	8001008 <Ultrasonic_Trigger>
}
 80005aa:	bf00      	nop
 80005ac:	bd80      	pop	{r7, pc}
	...

080005b0 <channel_4_Read>:

static void channel_4_Read(void)
{
 80005b0:	b590      	push	{r4, r7, lr}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
	u8 i ;
	CH4_arr[CH4_index] = Ultrasonic_readDistance();
 80005b6:	4b1b      	ldr	r3, [pc, #108]	; (8000624 <channel_4_Read+0x74>)
 80005b8:	781b      	ldrb	r3, [r3, #0]
 80005ba:	461c      	mov	r4, r3
 80005bc:	f000 fd4c 	bl	8001058 <Ultrasonic_readDistance>
 80005c0:	4603      	mov	r3, r0
 80005c2:	461a      	mov	r2, r3
 80005c4:	4b18      	ldr	r3, [pc, #96]	; (8000628 <channel_4_Read+0x78>)
 80005c6:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
	CH4_index++;
 80005ca:	4b16      	ldr	r3, [pc, #88]	; (8000624 <channel_4_Read+0x74>)
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	3301      	adds	r3, #1
 80005d0:	b2da      	uxtb	r2, r3
 80005d2:	4b14      	ldr	r3, [pc, #80]	; (8000624 <channel_4_Read+0x74>)
 80005d4:	701a      	strb	r2, [r3, #0]
	if(CH4_index == Max_Num_Read)
 80005d6:	4b13      	ldr	r3, [pc, #76]	; (8000624 <channel_4_Read+0x74>)
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	2b02      	cmp	r3, #2
 80005dc:	d11e      	bne.n	800061c <channel_4_Read+0x6c>
	{
		Ultra_Sonic_Read[3] = 0;
 80005de:	4b13      	ldr	r3, [pc, #76]	; (800062c <channel_4_Read+0x7c>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	80da      	strh	r2, [r3, #6]
		for( i = 0 ; i < Max_Num_Read ; i++)
 80005e4:	2300      	movs	r3, #0
 80005e6:	71fb      	strb	r3, [r7, #7]
 80005e8:	e00c      	b.n	8000604 <channel_4_Read+0x54>
		{
			Ultra_Sonic_Read[3] += CH4_arr[i];
 80005ea:	4b10      	ldr	r3, [pc, #64]	; (800062c <channel_4_Read+0x7c>)
 80005ec:	88da      	ldrh	r2, [r3, #6]
 80005ee:	79fb      	ldrb	r3, [r7, #7]
 80005f0:	490d      	ldr	r1, [pc, #52]	; (8000628 <channel_4_Read+0x78>)
 80005f2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80005f6:	4413      	add	r3, r2
 80005f8:	b29a      	uxth	r2, r3
 80005fa:	4b0c      	ldr	r3, [pc, #48]	; (800062c <channel_4_Read+0x7c>)
 80005fc:	80da      	strh	r2, [r3, #6]
		for( i = 0 ; i < Max_Num_Read ; i++)
 80005fe:	79fb      	ldrb	r3, [r7, #7]
 8000600:	3301      	adds	r3, #1
 8000602:	71fb      	strb	r3, [r7, #7]
 8000604:	79fb      	ldrb	r3, [r7, #7]
 8000606:	2b01      	cmp	r3, #1
 8000608:	d9ef      	bls.n	80005ea <channel_4_Read+0x3a>
		}

		Ultra_Sonic_Read[3] /= Max_Num_Read;
 800060a:	4b08      	ldr	r3, [pc, #32]	; (800062c <channel_4_Read+0x7c>)
 800060c:	88db      	ldrh	r3, [r3, #6]
 800060e:	085b      	lsrs	r3, r3, #1
 8000610:	b29a      	uxth	r2, r3
 8000612:	4b06      	ldr	r3, [pc, #24]	; (800062c <channel_4_Read+0x7c>)
 8000614:	80da      	strh	r2, [r3, #6]
		CH4_index = 0;
 8000616:	4b03      	ldr	r3, [pc, #12]	; (8000624 <channel_4_Read+0x74>)
 8000618:	2200      	movs	r2, #0
 800061a:	701a      	strb	r2, [r3, #0]
	}
}
 800061c:	bf00      	nop
 800061e:	370c      	adds	r7, #12
 8000620:	46bd      	mov	sp, r7
 8000622:	bd90      	pop	{r4, r7, pc}
 8000624:	20000069 	.word	0x20000069
 8000628:	20000078 	.word	0x20000078
 800062c:	200051cc 	.word	0x200051cc

08000630 <channel_5_Trigger>:

static void channel_5_Trigger(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
	Ultrasonic_Trigger( TRIGGER5_PORT , TRIGGER5_PIN , UltraSonic_Channel5 );
 8000634:	2204      	movs	r2, #4
 8000636:	2104      	movs	r1, #4
 8000638:	2000      	movs	r0, #0
 800063a:	f000 fce5 	bl	8001008 <Ultrasonic_Trigger>
}
 800063e:	bf00      	nop
 8000640:	bd80      	pop	{r7, pc}
	...

08000644 <channel_5_Read>:

static void channel_5_Read(void)
{
 8000644:	b590      	push	{r4, r7, lr}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
	u8 i ;
	CH5_arr[CH5_index] = Ultrasonic_readDistance();
 800064a:	4b1b      	ldr	r3, [pc, #108]	; (80006b8 <channel_5_Read+0x74>)
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	461c      	mov	r4, r3
 8000650:	f000 fd02 	bl	8001058 <Ultrasonic_readDistance>
 8000654:	4603      	mov	r3, r0
 8000656:	461a      	mov	r2, r3
 8000658:	4b18      	ldr	r3, [pc, #96]	; (80006bc <channel_5_Read+0x78>)
 800065a:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
	CH5_index++;
 800065e:	4b16      	ldr	r3, [pc, #88]	; (80006b8 <channel_5_Read+0x74>)
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	3301      	adds	r3, #1
 8000664:	b2da      	uxtb	r2, r3
 8000666:	4b14      	ldr	r3, [pc, #80]	; (80006b8 <channel_5_Read+0x74>)
 8000668:	701a      	strb	r2, [r3, #0]
	if(CH5_index == Max_Num_Read)
 800066a:	4b13      	ldr	r3, [pc, #76]	; (80006b8 <channel_5_Read+0x74>)
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	2b02      	cmp	r3, #2
 8000670:	d11e      	bne.n	80006b0 <channel_5_Read+0x6c>
	{
		Ultra_Sonic_Read[4] = 0;
 8000672:	4b13      	ldr	r3, [pc, #76]	; (80006c0 <channel_5_Read+0x7c>)
 8000674:	2200      	movs	r2, #0
 8000676:	811a      	strh	r2, [r3, #8]
		for( i = 0 ; i < Max_Num_Read ; i++)
 8000678:	2300      	movs	r3, #0
 800067a:	71fb      	strb	r3, [r7, #7]
 800067c:	e00c      	b.n	8000698 <channel_5_Read+0x54>
		{
			Ultra_Sonic_Read[4] += CH5_arr[i];
 800067e:	4b10      	ldr	r3, [pc, #64]	; (80006c0 <channel_5_Read+0x7c>)
 8000680:	891a      	ldrh	r2, [r3, #8]
 8000682:	79fb      	ldrb	r3, [r7, #7]
 8000684:	490d      	ldr	r1, [pc, #52]	; (80006bc <channel_5_Read+0x78>)
 8000686:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800068a:	4413      	add	r3, r2
 800068c:	b29a      	uxth	r2, r3
 800068e:	4b0c      	ldr	r3, [pc, #48]	; (80006c0 <channel_5_Read+0x7c>)
 8000690:	811a      	strh	r2, [r3, #8]
		for( i = 0 ; i < Max_Num_Read ; i++)
 8000692:	79fb      	ldrb	r3, [r7, #7]
 8000694:	3301      	adds	r3, #1
 8000696:	71fb      	strb	r3, [r7, #7]
 8000698:	79fb      	ldrb	r3, [r7, #7]
 800069a:	2b01      	cmp	r3, #1
 800069c:	d9ef      	bls.n	800067e <channel_5_Read+0x3a>
		}

		Ultra_Sonic_Read[4] /= Max_Num_Read;
 800069e:	4b08      	ldr	r3, [pc, #32]	; (80006c0 <channel_5_Read+0x7c>)
 80006a0:	891b      	ldrh	r3, [r3, #8]
 80006a2:	085b      	lsrs	r3, r3, #1
 80006a4:	b29a      	uxth	r2, r3
 80006a6:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <channel_5_Read+0x7c>)
 80006a8:	811a      	strh	r2, [r3, #8]
		CH5_index = 0;
 80006aa:	4b03      	ldr	r3, [pc, #12]	; (80006b8 <channel_5_Read+0x74>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	701a      	strb	r2, [r3, #0]
	}
}
 80006b0:	bf00      	nop
 80006b2:	370c      	adds	r7, #12
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd90      	pop	{r4, r7, pc}
 80006b8:	2000006a 	.word	0x2000006a
 80006bc:	2000007c 	.word	0x2000007c
 80006c0:	200051cc 	.word	0x200051cc

080006c4 <channel_6_Trigger>:

static void channel_6_Trigger(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
	Ultrasonic_Trigger( TRIGGER6_PORT , TRIGGER6_PIN , UltraSonic_Channel6 );
 80006c8:	2205      	movs	r2, #5
 80006ca:	2104      	movs	r1, #4
 80006cc:	2000      	movs	r0, #0
 80006ce:	f000 fc9b 	bl	8001008 <Ultrasonic_Trigger>
}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}
	...

080006d8 <channel_6_Read>:

static void channel_6_Read(void)
{
 80006d8:	b590      	push	{r4, r7, lr}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
	u8 i ;
	CH6_arr[CH6_index] = Ultrasonic_readDistance();
 80006de:	4b1b      	ldr	r3, [pc, #108]	; (800074c <channel_6_Read+0x74>)
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	461c      	mov	r4, r3
 80006e4:	f000 fcb8 	bl	8001058 <Ultrasonic_readDistance>
 80006e8:	4603      	mov	r3, r0
 80006ea:	461a      	mov	r2, r3
 80006ec:	4b18      	ldr	r3, [pc, #96]	; (8000750 <channel_6_Read+0x78>)
 80006ee:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
	CH6_index++;
 80006f2:	4b16      	ldr	r3, [pc, #88]	; (800074c <channel_6_Read+0x74>)
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	3301      	adds	r3, #1
 80006f8:	b2da      	uxtb	r2, r3
 80006fa:	4b14      	ldr	r3, [pc, #80]	; (800074c <channel_6_Read+0x74>)
 80006fc:	701a      	strb	r2, [r3, #0]
	if(CH6_index == Max_Num_Read)
 80006fe:	4b13      	ldr	r3, [pc, #76]	; (800074c <channel_6_Read+0x74>)
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	2b02      	cmp	r3, #2
 8000704:	d11e      	bne.n	8000744 <channel_6_Read+0x6c>
	{
		Ultra_Sonic_Read[5] = 0;
 8000706:	4b13      	ldr	r3, [pc, #76]	; (8000754 <channel_6_Read+0x7c>)
 8000708:	2200      	movs	r2, #0
 800070a:	815a      	strh	r2, [r3, #10]
		for( i = 0 ; i < Max_Num_Read ; i++)
 800070c:	2300      	movs	r3, #0
 800070e:	71fb      	strb	r3, [r7, #7]
 8000710:	e00c      	b.n	800072c <channel_6_Read+0x54>
		{
			Ultra_Sonic_Read[5] += CH6_arr[i];
 8000712:	4b10      	ldr	r3, [pc, #64]	; (8000754 <channel_6_Read+0x7c>)
 8000714:	895a      	ldrh	r2, [r3, #10]
 8000716:	79fb      	ldrb	r3, [r7, #7]
 8000718:	490d      	ldr	r1, [pc, #52]	; (8000750 <channel_6_Read+0x78>)
 800071a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800071e:	4413      	add	r3, r2
 8000720:	b29a      	uxth	r2, r3
 8000722:	4b0c      	ldr	r3, [pc, #48]	; (8000754 <channel_6_Read+0x7c>)
 8000724:	815a      	strh	r2, [r3, #10]
		for( i = 0 ; i < Max_Num_Read ; i++)
 8000726:	79fb      	ldrb	r3, [r7, #7]
 8000728:	3301      	adds	r3, #1
 800072a:	71fb      	strb	r3, [r7, #7]
 800072c:	79fb      	ldrb	r3, [r7, #7]
 800072e:	2b01      	cmp	r3, #1
 8000730:	d9ef      	bls.n	8000712 <channel_6_Read+0x3a>
		}

		Ultra_Sonic_Read[5] /= Max_Num_Read;
 8000732:	4b08      	ldr	r3, [pc, #32]	; (8000754 <channel_6_Read+0x7c>)
 8000734:	895b      	ldrh	r3, [r3, #10]
 8000736:	085b      	lsrs	r3, r3, #1
 8000738:	b29a      	uxth	r2, r3
 800073a:	4b06      	ldr	r3, [pc, #24]	; (8000754 <channel_6_Read+0x7c>)
 800073c:	815a      	strh	r2, [r3, #10]
		CH6_index = 0;
 800073e:	4b03      	ldr	r3, [pc, #12]	; (800074c <channel_6_Read+0x74>)
 8000740:	2200      	movs	r2, #0
 8000742:	701a      	strb	r2, [r3, #0]
	}
}
 8000744:	bf00      	nop
 8000746:	370c      	adds	r7, #12
 8000748:	46bd      	mov	sp, r7
 800074a:	bd90      	pop	{r4, r7, pc}
 800074c:	2000006b 	.word	0x2000006b
 8000750:	20000080 	.word	0x20000080
 8000754:	200051cc 	.word	0x200051cc

08000758 <Channel_1_MainFunction>:

// delay = 4 =====> 57 cm  , delay = 5 =========>  85 cm
static void Channel_1_MainFunction(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
	channel_1_Trigger();
 800075c:	f7ff fe40 	bl	80003e0 <channel_1_Trigger>
	vTaskDelay(Read_Periodicity);
 8000760:	2004      	movs	r0, #4
 8000762:	f002 fd1d 	bl	80031a0 <vTaskDelay>
	channel_1_Read();
 8000766:	f7ff fe45 	bl	80003f4 <channel_1_Read>
	vTaskDelay(Trigger_Periodicity);	// Check This if it's Self Trigger or No , Delete this line if it's controlled from Application
 800076a:	2005      	movs	r0, #5
 800076c:	f002 fd18 	bl	80031a0 <vTaskDelay>

}
 8000770:	bf00      	nop
 8000772:	bd80      	pop	{r7, pc}

08000774 <Channel_2_MainFunction>:
static void Channel_2_MainFunction(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
	channel_2_Trigger();
 8000778:	f7ff fe7c 	bl	8000474 <channel_2_Trigger>
	vTaskDelay(Read_Periodicity);
 800077c:	2004      	movs	r0, #4
 800077e:	f002 fd0f 	bl	80031a0 <vTaskDelay>
	channel_2_Read();
 8000782:	f7ff fe81 	bl	8000488 <channel_2_Read>
	vTaskDelay(Trigger_Periodicity);	// Check This if it's Self Trigger or No , Delete this line if it's controlled from Application
 8000786:	2005      	movs	r0, #5
 8000788:	f002 fd0a 	bl	80031a0 <vTaskDelay>
}
 800078c:	bf00      	nop
 800078e:	bd80      	pop	{r7, pc}

08000790 <Channel_3_MainFunction>:
static void Channel_3_MainFunction(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
	channel_3_Trigger();
 8000794:	f7ff feb8 	bl	8000508 <channel_3_Trigger>
	vTaskDelay(Read_Periodicity);
 8000798:	2004      	movs	r0, #4
 800079a:	f002 fd01 	bl	80031a0 <vTaskDelay>
	channel_3_Read();
 800079e:	f7ff febd 	bl	800051c <channel_3_Read>
	vTaskDelay(Trigger_Periodicity);	// Check This if it's Self Trigger or No , Delete this line if it's controlled from Application
 80007a2:	2005      	movs	r0, #5
 80007a4:	f002 fcfc 	bl	80031a0 <vTaskDelay>
}
 80007a8:	bf00      	nop
 80007aa:	bd80      	pop	{r7, pc}

080007ac <Channel_4_MainFunction>:
static void Channel_4_MainFunction(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
	channel_4_Trigger();
 80007b0:	f7ff fef4 	bl	800059c <channel_4_Trigger>
	vTaskDelay(Read_Periodicity);
 80007b4:	2004      	movs	r0, #4
 80007b6:	f002 fcf3 	bl	80031a0 <vTaskDelay>
	channel_4_Read();
 80007ba:	f7ff fef9 	bl	80005b0 <channel_4_Read>
	vTaskDelay(Trigger_Periodicity);	// Check This if it's Self Trigger or No , Delete this line if it's controlled from Application
 80007be:	2005      	movs	r0, #5
 80007c0:	f002 fcee 	bl	80031a0 <vTaskDelay>
}
 80007c4:	bf00      	nop
 80007c6:	bd80      	pop	{r7, pc}

080007c8 <Channel_5_MainFunction>:
static void Channel_5_MainFunction(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
	channel_5_Trigger();
 80007cc:	f7ff ff30 	bl	8000630 <channel_5_Trigger>
	vTaskDelay(Read_Periodicity);
 80007d0:	2004      	movs	r0, #4
 80007d2:	f002 fce5 	bl	80031a0 <vTaskDelay>
	channel_5_Read();
 80007d6:	f7ff ff35 	bl	8000644 <channel_5_Read>
	vTaskDelay(Trigger_Periodicity);	// Check This if it's Self Trigger or No , Delete this line if it's controlled from Application
 80007da:	2005      	movs	r0, #5
 80007dc:	f002 fce0 	bl	80031a0 <vTaskDelay>
}
 80007e0:	bf00      	nop
 80007e2:	bd80      	pop	{r7, pc}

080007e4 <Channel_6_MainFunction>:
static void Channel_6_MainFunction(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
	channel_6_Trigger();
 80007e8:	f7ff ff6c 	bl	80006c4 <channel_6_Trigger>
	vTaskDelay(Read_Periodicity);
 80007ec:	2004      	movs	r0, #4
 80007ee:	f002 fcd7 	bl	80031a0 <vTaskDelay>
	channel_6_Read();
 80007f2:	f7ff ff71 	bl	80006d8 <channel_6_Read>
	vTaskDelay(Trigger_Periodicity);	// Check This if it's Self Trigger or No , Delete this line if it's controlled from Application
 80007f6:	2005      	movs	r0, #5
 80007f8:	f002 fcd2 	bl	80031a0 <vTaskDelay>
}
 80007fc:	bf00      	nop
 80007fe:	bd80      	pop	{r7, pc}

08000800 <UltraSonic_Read_Task>:

/*******************************************************************************
 *                      Global Functions Definitions                           *
 *******************************************************************************/
void UltraSonic_Read_Task( void * pvParameters )
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
	//  Delay = 3 ===> equal to 42 cm , Delay = 4 ===> equal to 60 cm , Delay = 5 ===> equal to 77 cm
	for( ;; )
	{
		switch( UltraSonic_state )
 8000808:	4b1c      	ldr	r3, [pc, #112]	; (800087c <UltraSonic_Read_Task+0x7c>)
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	2b05      	cmp	r3, #5
 800080e:	d8fb      	bhi.n	8000808 <UltraSonic_Read_Task+0x8>
 8000810:	a201      	add	r2, pc, #4	; (adr r2, 8000818 <UltraSonic_Read_Task+0x18>)
 8000812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000816:	bf00      	nop
 8000818:	08000831 	.word	0x08000831
 800081c:	0800083d 	.word	0x0800083d
 8000820:	08000849 	.word	0x08000849
 8000824:	08000855 	.word	0x08000855
 8000828:	08000861 	.word	0x08000861
 800082c:	0800086d 	.word	0x0800086d
		{
		case UltraSonic_Channel_1_Read:
			Channel_1_MainFunction();
 8000830:	f7ff ff92 	bl	8000758 <Channel_1_MainFunction>
			UltraSonic_state = UltraSonic_Channel_2_Read;  // Check This if it's Self Trigger or No , Delete this line if it's controlled from Application
 8000834:	4b11      	ldr	r3, [pc, #68]	; (800087c <UltraSonic_Read_Task+0x7c>)
 8000836:	2201      	movs	r2, #1
 8000838:	701a      	strb	r2, [r3, #0]
		break;
 800083a:	e01d      	b.n	8000878 <UltraSonic_Read_Task+0x78>

		case UltraSonic_Channel_2_Read:
			Channel_2_MainFunction();
 800083c:	f7ff ff9a 	bl	8000774 <Channel_2_MainFunction>
			UltraSonic_state = UltraSonic_Channel_3_Read;  // Check This if it's Self Trigger or No , Delete this line if it's controlled from Application
 8000840:	4b0e      	ldr	r3, [pc, #56]	; (800087c <UltraSonic_Read_Task+0x7c>)
 8000842:	2202      	movs	r2, #2
 8000844:	701a      	strb	r2, [r3, #0]
		break;
 8000846:	e017      	b.n	8000878 <UltraSonic_Read_Task+0x78>

		case UltraSonic_Channel_3_Read:
			Channel_3_MainFunction();
 8000848:	f7ff ffa2 	bl	8000790 <Channel_3_MainFunction>
			UltraSonic_state = UltraSonic_Channel_4_Read;  // Check This if it's Self Trigger or No , Delete this line if it's controlled from Application
 800084c:	4b0b      	ldr	r3, [pc, #44]	; (800087c <UltraSonic_Read_Task+0x7c>)
 800084e:	2203      	movs	r2, #3
 8000850:	701a      	strb	r2, [r3, #0]
		break;
 8000852:	e011      	b.n	8000878 <UltraSonic_Read_Task+0x78>

		case UltraSonic_Channel_4_Read:
			Channel_4_MainFunction();
 8000854:	f7ff ffaa 	bl	80007ac <Channel_4_MainFunction>
			UltraSonic_state = UltraSonic_Channel_5_Read;  // Check This if it's Self Trigger or No , Delete this line if it's controlled from Application
 8000858:	4b08      	ldr	r3, [pc, #32]	; (800087c <UltraSonic_Read_Task+0x7c>)
 800085a:	2204      	movs	r2, #4
 800085c:	701a      	strb	r2, [r3, #0]
		break;
 800085e:	e00b      	b.n	8000878 <UltraSonic_Read_Task+0x78>

		case UltraSonic_Channel_5_Read:
			Channel_5_MainFunction();
 8000860:	f7ff ffb2 	bl	80007c8 <Channel_5_MainFunction>
			UltraSonic_state = UltraSonic_Channel_6_Read;  // Check This if it's Self Trigger or No , Delete this line if it's controlled from Application
 8000864:	4b05      	ldr	r3, [pc, #20]	; (800087c <UltraSonic_Read_Task+0x7c>)
 8000866:	2205      	movs	r2, #5
 8000868:	701a      	strb	r2, [r3, #0]
		break;
 800086a:	e005      	b.n	8000878 <UltraSonic_Read_Task+0x78>

		case UltraSonic_Channel_6_Read:
			Channel_6_MainFunction();
 800086c:	f7ff ffba 	bl	80007e4 <Channel_6_MainFunction>
			UltraSonic_state = UltraSonic_Channel_4_Read;  // Check This if it's Self Trigger or No , Delete this line if it's controlled from Application
 8000870:	4b02      	ldr	r3, [pc, #8]	; (800087c <UltraSonic_Read_Task+0x7c>)
 8000872:	2203      	movs	r2, #3
 8000874:	701a      	strb	r2, [r3, #0]
		break;
 8000876:	bf00      	nop
		switch( UltraSonic_state )
 8000878:	e7c6      	b.n	8000808 <UltraSonic_Read_Task+0x8>
 800087a:	bf00      	nop
 800087c:	20000000 	.word	0x20000000

08000880 <Motor_init>:
static void 	Motor_stop			(void);
/*******************************************************************************
 *                      Private Functions Definitions                          *
 *******************************************************************************/
static void		Motor_init			(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
	DcMotor_Init(&Motor_FR);
 8000884:	4806      	ldr	r0, [pc, #24]	; (80008a0 <Motor_init+0x20>)
 8000886:	f000 fa20 	bl	8000cca <DcMotor_Init>
	DcMotor_Init(&Motor_FL);
 800088a:	4806      	ldr	r0, [pc, #24]	; (80008a4 <Motor_init+0x24>)
 800088c:	f000 fa1d 	bl	8000cca <DcMotor_Init>
	DcMotor_Init(&Motor_BR);
 8000890:	4805      	ldr	r0, [pc, #20]	; (80008a8 <Motor_init+0x28>)
 8000892:	f000 fa1a 	bl	8000cca <DcMotor_Init>
	DcMotor_Init(&Motor_BL);
 8000896:	4805      	ldr	r0, [pc, #20]	; (80008ac <Motor_init+0x2c>)
 8000898:	f000 fa17 	bl	8000cca <DcMotor_Init>
}
 800089c:	bf00      	nop
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	20000004 	.word	0x20000004
 80008a4:	20000014 	.word	0x20000014
 80008a8:	2000000c 	.word	0x2000000c
 80008ac:	2000001c 	.word	0x2000001c

080008b0 <Motor_GoForward>:
static void 	Motor_GoForward		(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
	Motor_FR.motor_id.direction = clockwise;
 80008b4:	4b1a      	ldr	r3, [pc, #104]	; (8000920 <Motor_GoForward+0x70>)
 80008b6:	2201      	movs	r2, #1
 80008b8:	719a      	strb	r2, [r3, #6]
	Motor_FR.motor_id.state = on ;
 80008ba:	4b19      	ldr	r3, [pc, #100]	; (8000920 <Motor_GoForward+0x70>)
 80008bc:	2201      	movs	r2, #1
 80008be:	715a      	strb	r2, [r3, #5]
	Motor_FR.motor_id.speed = PWM_SPEED;
 80008c0:	4b18      	ldr	r3, [pc, #96]	; (8000924 <Motor_GoForward+0x74>)
 80008c2:	781a      	ldrb	r2, [r3, #0]
 80008c4:	4b16      	ldr	r3, [pc, #88]	; (8000920 <Motor_GoForward+0x70>)
 80008c6:	71da      	strb	r2, [r3, #7]

	Motor_FL.motor_id.direction = clockwise;
 80008c8:	4b17      	ldr	r3, [pc, #92]	; (8000928 <Motor_GoForward+0x78>)
 80008ca:	2201      	movs	r2, #1
 80008cc:	719a      	strb	r2, [r3, #6]
	Motor_FL.motor_id.state = on ;
 80008ce:	4b16      	ldr	r3, [pc, #88]	; (8000928 <Motor_GoForward+0x78>)
 80008d0:	2201      	movs	r2, #1
 80008d2:	715a      	strb	r2, [r3, #5]
	Motor_FL.motor_id.speed = PWM_SPEED;
 80008d4:	4b13      	ldr	r3, [pc, #76]	; (8000924 <Motor_GoForward+0x74>)
 80008d6:	781a      	ldrb	r2, [r3, #0]
 80008d8:	4b13      	ldr	r3, [pc, #76]	; (8000928 <Motor_GoForward+0x78>)
 80008da:	71da      	strb	r2, [r3, #7]

	Motor_BR.motor_id.direction = clockwise;
 80008dc:	4b13      	ldr	r3, [pc, #76]	; (800092c <Motor_GoForward+0x7c>)
 80008de:	2201      	movs	r2, #1
 80008e0:	719a      	strb	r2, [r3, #6]
	Motor_BR.motor_id.state = on ;
 80008e2:	4b12      	ldr	r3, [pc, #72]	; (800092c <Motor_GoForward+0x7c>)
 80008e4:	2201      	movs	r2, #1
 80008e6:	715a      	strb	r2, [r3, #5]
	Motor_BR.motor_id.speed = PWM_SPEED;
 80008e8:	4b0e      	ldr	r3, [pc, #56]	; (8000924 <Motor_GoForward+0x74>)
 80008ea:	781a      	ldrb	r2, [r3, #0]
 80008ec:	4b0f      	ldr	r3, [pc, #60]	; (800092c <Motor_GoForward+0x7c>)
 80008ee:	71da      	strb	r2, [r3, #7]

	Motor_BL.motor_id.direction = clockwise;
 80008f0:	4b0f      	ldr	r3, [pc, #60]	; (8000930 <Motor_GoForward+0x80>)
 80008f2:	2201      	movs	r2, #1
 80008f4:	719a      	strb	r2, [r3, #6]
	Motor_BL.motor_id.state = on ;
 80008f6:	4b0e      	ldr	r3, [pc, #56]	; (8000930 <Motor_GoForward+0x80>)
 80008f8:	2201      	movs	r2, #1
 80008fa:	715a      	strb	r2, [r3, #5]
	Motor_BL.motor_id.speed = PWM_SPEED;
 80008fc:	4b09      	ldr	r3, [pc, #36]	; (8000924 <Motor_GoForward+0x74>)
 80008fe:	781a      	ldrb	r2, [r3, #0]
 8000900:	4b0b      	ldr	r3, [pc, #44]	; (8000930 <Motor_GoForward+0x80>)
 8000902:	71da      	strb	r2, [r3, #7]

	DcMotor_Rotate( &Motor_FR );
 8000904:	4806      	ldr	r0, [pc, #24]	; (8000920 <Motor_GoForward+0x70>)
 8000906:	f000 fa1a 	bl	8000d3e <DcMotor_Rotate>
	DcMotor_Rotate( &Motor_FL );
 800090a:	4807      	ldr	r0, [pc, #28]	; (8000928 <Motor_GoForward+0x78>)
 800090c:	f000 fa17 	bl	8000d3e <DcMotor_Rotate>
	DcMotor_Rotate( &Motor_BR );
 8000910:	4806      	ldr	r0, [pc, #24]	; (800092c <Motor_GoForward+0x7c>)
 8000912:	f000 fa14 	bl	8000d3e <DcMotor_Rotate>
	DcMotor_Rotate( &Motor_BL );
 8000916:	4806      	ldr	r0, [pc, #24]	; (8000930 <Motor_GoForward+0x80>)
 8000918:	f000 fa11 	bl	8000d3e <DcMotor_Rotate>
}
 800091c:	bf00      	nop
 800091e:	bd80      	pop	{r7, pc}
 8000920:	20000004 	.word	0x20000004
 8000924:	20000024 	.word	0x20000024
 8000928:	20000014 	.word	0x20000014
 800092c:	2000000c 	.word	0x2000000c
 8000930:	2000001c 	.word	0x2000001c

08000934 <Motor_GoBackward>:
static void 	Motor_GoBackward	(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
	Motor_FR.motor_id.direction = anticlockwise;
 8000938:	4b1a      	ldr	r3, [pc, #104]	; (80009a4 <Motor_GoBackward+0x70>)
 800093a:	2202      	movs	r2, #2
 800093c:	719a      	strb	r2, [r3, #6]
	Motor_FR.motor_id.state = on ;
 800093e:	4b19      	ldr	r3, [pc, #100]	; (80009a4 <Motor_GoBackward+0x70>)
 8000940:	2201      	movs	r2, #1
 8000942:	715a      	strb	r2, [r3, #5]
	Motor_FR.motor_id.speed = PWM_SPEED;
 8000944:	4b18      	ldr	r3, [pc, #96]	; (80009a8 <Motor_GoBackward+0x74>)
 8000946:	781a      	ldrb	r2, [r3, #0]
 8000948:	4b16      	ldr	r3, [pc, #88]	; (80009a4 <Motor_GoBackward+0x70>)
 800094a:	71da      	strb	r2, [r3, #7]

	Motor_FL.motor_id.direction = anticlockwise;
 800094c:	4b17      	ldr	r3, [pc, #92]	; (80009ac <Motor_GoBackward+0x78>)
 800094e:	2202      	movs	r2, #2
 8000950:	719a      	strb	r2, [r3, #6]
	Motor_FL.motor_id.state = on ;
 8000952:	4b16      	ldr	r3, [pc, #88]	; (80009ac <Motor_GoBackward+0x78>)
 8000954:	2201      	movs	r2, #1
 8000956:	715a      	strb	r2, [r3, #5]
	Motor_FL.motor_id.speed = PWM_SPEED;
 8000958:	4b13      	ldr	r3, [pc, #76]	; (80009a8 <Motor_GoBackward+0x74>)
 800095a:	781a      	ldrb	r2, [r3, #0]
 800095c:	4b13      	ldr	r3, [pc, #76]	; (80009ac <Motor_GoBackward+0x78>)
 800095e:	71da      	strb	r2, [r3, #7]

	Motor_BR.motor_id.direction = anticlockwise;
 8000960:	4b13      	ldr	r3, [pc, #76]	; (80009b0 <Motor_GoBackward+0x7c>)
 8000962:	2202      	movs	r2, #2
 8000964:	719a      	strb	r2, [r3, #6]
	Motor_BR.motor_id.state = on ;
 8000966:	4b12      	ldr	r3, [pc, #72]	; (80009b0 <Motor_GoBackward+0x7c>)
 8000968:	2201      	movs	r2, #1
 800096a:	715a      	strb	r2, [r3, #5]
	Motor_BR.motor_id.speed = PWM_SPEED;
 800096c:	4b0e      	ldr	r3, [pc, #56]	; (80009a8 <Motor_GoBackward+0x74>)
 800096e:	781a      	ldrb	r2, [r3, #0]
 8000970:	4b0f      	ldr	r3, [pc, #60]	; (80009b0 <Motor_GoBackward+0x7c>)
 8000972:	71da      	strb	r2, [r3, #7]

	Motor_BL.motor_id.direction = anticlockwise;
 8000974:	4b0f      	ldr	r3, [pc, #60]	; (80009b4 <Motor_GoBackward+0x80>)
 8000976:	2202      	movs	r2, #2
 8000978:	719a      	strb	r2, [r3, #6]
	Motor_BL.motor_id.state = on ;
 800097a:	4b0e      	ldr	r3, [pc, #56]	; (80009b4 <Motor_GoBackward+0x80>)
 800097c:	2201      	movs	r2, #1
 800097e:	715a      	strb	r2, [r3, #5]
	Motor_BL.motor_id.speed = PWM_SPEED;
 8000980:	4b09      	ldr	r3, [pc, #36]	; (80009a8 <Motor_GoBackward+0x74>)
 8000982:	781a      	ldrb	r2, [r3, #0]
 8000984:	4b0b      	ldr	r3, [pc, #44]	; (80009b4 <Motor_GoBackward+0x80>)
 8000986:	71da      	strb	r2, [r3, #7]

	DcMotor_Rotate( &Motor_FR );
 8000988:	4806      	ldr	r0, [pc, #24]	; (80009a4 <Motor_GoBackward+0x70>)
 800098a:	f000 f9d8 	bl	8000d3e <DcMotor_Rotate>
	DcMotor_Rotate( &Motor_FL );
 800098e:	4807      	ldr	r0, [pc, #28]	; (80009ac <Motor_GoBackward+0x78>)
 8000990:	f000 f9d5 	bl	8000d3e <DcMotor_Rotate>
	DcMotor_Rotate( &Motor_BR );
 8000994:	4806      	ldr	r0, [pc, #24]	; (80009b0 <Motor_GoBackward+0x7c>)
 8000996:	f000 f9d2 	bl	8000d3e <DcMotor_Rotate>
	DcMotor_Rotate( &Motor_BL );
 800099a:	4806      	ldr	r0, [pc, #24]	; (80009b4 <Motor_GoBackward+0x80>)
 800099c:	f000 f9cf 	bl	8000d3e <DcMotor_Rotate>
}
 80009a0:	bf00      	nop
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	20000004 	.word	0x20000004
 80009a8:	20000024 	.word	0x20000024
 80009ac:	20000014 	.word	0x20000014
 80009b0:	2000000c 	.word	0x2000000c
 80009b4:	2000001c 	.word	0x2000001c

080009b8 <Motor_GoRight>:
static void 	Motor_GoRight		(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
	Motor_FR.motor_id.direction = clockwise;
 80009bc:	4b1a      	ldr	r3, [pc, #104]	; (8000a28 <Motor_GoRight+0x70>)
 80009be:	2201      	movs	r2, #1
 80009c0:	719a      	strb	r2, [r3, #6]
	Motor_FR.motor_id.state = off ;
 80009c2:	4b19      	ldr	r3, [pc, #100]	; (8000a28 <Motor_GoRight+0x70>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	715a      	strb	r2, [r3, #5]
	Motor_FR.motor_id.speed = PWM_SPEED;
 80009c8:	4b18      	ldr	r3, [pc, #96]	; (8000a2c <Motor_GoRight+0x74>)
 80009ca:	781a      	ldrb	r2, [r3, #0]
 80009cc:	4b16      	ldr	r3, [pc, #88]	; (8000a28 <Motor_GoRight+0x70>)
 80009ce:	71da      	strb	r2, [r3, #7]

	Motor_FL.motor_id.direction = clockwise;
 80009d0:	4b17      	ldr	r3, [pc, #92]	; (8000a30 <Motor_GoRight+0x78>)
 80009d2:	2201      	movs	r2, #1
 80009d4:	719a      	strb	r2, [r3, #6]
	Motor_FL.motor_id.state = on ;
 80009d6:	4b16      	ldr	r3, [pc, #88]	; (8000a30 <Motor_GoRight+0x78>)
 80009d8:	2201      	movs	r2, #1
 80009da:	715a      	strb	r2, [r3, #5]
	Motor_FL.motor_id.speed = PWM_SPEED;
 80009dc:	4b13      	ldr	r3, [pc, #76]	; (8000a2c <Motor_GoRight+0x74>)
 80009de:	781a      	ldrb	r2, [r3, #0]
 80009e0:	4b13      	ldr	r3, [pc, #76]	; (8000a30 <Motor_GoRight+0x78>)
 80009e2:	71da      	strb	r2, [r3, #7]

	Motor_BR.motor_id.direction = clockwise;
 80009e4:	4b13      	ldr	r3, [pc, #76]	; (8000a34 <Motor_GoRight+0x7c>)
 80009e6:	2201      	movs	r2, #1
 80009e8:	719a      	strb	r2, [r3, #6]
	Motor_BR.motor_id.state = off ;
 80009ea:	4b12      	ldr	r3, [pc, #72]	; (8000a34 <Motor_GoRight+0x7c>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	715a      	strb	r2, [r3, #5]
	Motor_BR.motor_id.speed = PWM_SPEED;
 80009f0:	4b0e      	ldr	r3, [pc, #56]	; (8000a2c <Motor_GoRight+0x74>)
 80009f2:	781a      	ldrb	r2, [r3, #0]
 80009f4:	4b0f      	ldr	r3, [pc, #60]	; (8000a34 <Motor_GoRight+0x7c>)
 80009f6:	71da      	strb	r2, [r3, #7]

	Motor_BL.motor_id.direction = clockwise;
 80009f8:	4b0f      	ldr	r3, [pc, #60]	; (8000a38 <Motor_GoRight+0x80>)
 80009fa:	2201      	movs	r2, #1
 80009fc:	719a      	strb	r2, [r3, #6]
	Motor_BL.motor_id.state = on ;
 80009fe:	4b0e      	ldr	r3, [pc, #56]	; (8000a38 <Motor_GoRight+0x80>)
 8000a00:	2201      	movs	r2, #1
 8000a02:	715a      	strb	r2, [r3, #5]
	Motor_BL.motor_id.speed = PWM_SPEED;
 8000a04:	4b09      	ldr	r3, [pc, #36]	; (8000a2c <Motor_GoRight+0x74>)
 8000a06:	781a      	ldrb	r2, [r3, #0]
 8000a08:	4b0b      	ldr	r3, [pc, #44]	; (8000a38 <Motor_GoRight+0x80>)
 8000a0a:	71da      	strb	r2, [r3, #7]

	DcMotor_Rotate( &Motor_FR );
 8000a0c:	4806      	ldr	r0, [pc, #24]	; (8000a28 <Motor_GoRight+0x70>)
 8000a0e:	f000 f996 	bl	8000d3e <DcMotor_Rotate>
	DcMotor_Rotate( &Motor_FL );
 8000a12:	4807      	ldr	r0, [pc, #28]	; (8000a30 <Motor_GoRight+0x78>)
 8000a14:	f000 f993 	bl	8000d3e <DcMotor_Rotate>
	DcMotor_Rotate( &Motor_BR );
 8000a18:	4806      	ldr	r0, [pc, #24]	; (8000a34 <Motor_GoRight+0x7c>)
 8000a1a:	f000 f990 	bl	8000d3e <DcMotor_Rotate>
	DcMotor_Rotate( &Motor_BL );
 8000a1e:	4806      	ldr	r0, [pc, #24]	; (8000a38 <Motor_GoRight+0x80>)
 8000a20:	f000 f98d 	bl	8000d3e <DcMotor_Rotate>
}
 8000a24:	bf00      	nop
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	20000004 	.word	0x20000004
 8000a2c:	20000024 	.word	0x20000024
 8000a30:	20000014 	.word	0x20000014
 8000a34:	2000000c 	.word	0x2000000c
 8000a38:	2000001c 	.word	0x2000001c

08000a3c <Motor_GoLeft>:
static void 	Motor_GoLeft		(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
	Motor_FR.motor_id.direction = clockwise;
 8000a40:	4b1a      	ldr	r3, [pc, #104]	; (8000aac <Motor_GoLeft+0x70>)
 8000a42:	2201      	movs	r2, #1
 8000a44:	719a      	strb	r2, [r3, #6]
	Motor_FR.motor_id.state = on ;
 8000a46:	4b19      	ldr	r3, [pc, #100]	; (8000aac <Motor_GoLeft+0x70>)
 8000a48:	2201      	movs	r2, #1
 8000a4a:	715a      	strb	r2, [r3, #5]
	Motor_FR.motor_id.speed = PWM_SPEED;
 8000a4c:	4b18      	ldr	r3, [pc, #96]	; (8000ab0 <Motor_GoLeft+0x74>)
 8000a4e:	781a      	ldrb	r2, [r3, #0]
 8000a50:	4b16      	ldr	r3, [pc, #88]	; (8000aac <Motor_GoLeft+0x70>)
 8000a52:	71da      	strb	r2, [r3, #7]

	Motor_FL.motor_id.direction = clockwise;
 8000a54:	4b17      	ldr	r3, [pc, #92]	; (8000ab4 <Motor_GoLeft+0x78>)
 8000a56:	2201      	movs	r2, #1
 8000a58:	719a      	strb	r2, [r3, #6]
	Motor_FL.motor_id.state = off ;
 8000a5a:	4b16      	ldr	r3, [pc, #88]	; (8000ab4 <Motor_GoLeft+0x78>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	715a      	strb	r2, [r3, #5]
	Motor_FL.motor_id.speed = PWM_SPEED;
 8000a60:	4b13      	ldr	r3, [pc, #76]	; (8000ab0 <Motor_GoLeft+0x74>)
 8000a62:	781a      	ldrb	r2, [r3, #0]
 8000a64:	4b13      	ldr	r3, [pc, #76]	; (8000ab4 <Motor_GoLeft+0x78>)
 8000a66:	71da      	strb	r2, [r3, #7]

	Motor_BR.motor_id.direction = clockwise;
 8000a68:	4b13      	ldr	r3, [pc, #76]	; (8000ab8 <Motor_GoLeft+0x7c>)
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	719a      	strb	r2, [r3, #6]
	Motor_BR.motor_id.state = on ;
 8000a6e:	4b12      	ldr	r3, [pc, #72]	; (8000ab8 <Motor_GoLeft+0x7c>)
 8000a70:	2201      	movs	r2, #1
 8000a72:	715a      	strb	r2, [r3, #5]
	Motor_BR.motor_id.speed = PWM_SPEED;
 8000a74:	4b0e      	ldr	r3, [pc, #56]	; (8000ab0 <Motor_GoLeft+0x74>)
 8000a76:	781a      	ldrb	r2, [r3, #0]
 8000a78:	4b0f      	ldr	r3, [pc, #60]	; (8000ab8 <Motor_GoLeft+0x7c>)
 8000a7a:	71da      	strb	r2, [r3, #7]

	Motor_BL.motor_id.direction = clockwise;
 8000a7c:	4b0f      	ldr	r3, [pc, #60]	; (8000abc <Motor_GoLeft+0x80>)
 8000a7e:	2201      	movs	r2, #1
 8000a80:	719a      	strb	r2, [r3, #6]
	Motor_BL.motor_id.state = off ;
 8000a82:	4b0e      	ldr	r3, [pc, #56]	; (8000abc <Motor_GoLeft+0x80>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	715a      	strb	r2, [r3, #5]
	Motor_BL.motor_id.speed = PWM_SPEED;
 8000a88:	4b09      	ldr	r3, [pc, #36]	; (8000ab0 <Motor_GoLeft+0x74>)
 8000a8a:	781a      	ldrb	r2, [r3, #0]
 8000a8c:	4b0b      	ldr	r3, [pc, #44]	; (8000abc <Motor_GoLeft+0x80>)
 8000a8e:	71da      	strb	r2, [r3, #7]

	DcMotor_Rotate( &Motor_FR );
 8000a90:	4806      	ldr	r0, [pc, #24]	; (8000aac <Motor_GoLeft+0x70>)
 8000a92:	f000 f954 	bl	8000d3e <DcMotor_Rotate>
	DcMotor_Rotate( &Motor_FL );
 8000a96:	4807      	ldr	r0, [pc, #28]	; (8000ab4 <Motor_GoLeft+0x78>)
 8000a98:	f000 f951 	bl	8000d3e <DcMotor_Rotate>
	DcMotor_Rotate( &Motor_BR );
 8000a9c:	4806      	ldr	r0, [pc, #24]	; (8000ab8 <Motor_GoLeft+0x7c>)
 8000a9e:	f000 f94e 	bl	8000d3e <DcMotor_Rotate>
	DcMotor_Rotate( &Motor_BL );
 8000aa2:	4806      	ldr	r0, [pc, #24]	; (8000abc <Motor_GoLeft+0x80>)
 8000aa4:	f000 f94b 	bl	8000d3e <DcMotor_Rotate>
}
 8000aa8:	bf00      	nop
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	20000004 	.word	0x20000004
 8000ab0:	20000024 	.word	0x20000024
 8000ab4:	20000014 	.word	0x20000014
 8000ab8:	2000000c 	.word	0x2000000c
 8000abc:	2000001c 	.word	0x2000001c

08000ac0 <Motor_GoBackRight>:
static void 	Motor_GoBackRight	(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
	Motor_FR.motor_id.direction = anticlockwise;
 8000ac4:	4b1a      	ldr	r3, [pc, #104]	; (8000b30 <Motor_GoBackRight+0x70>)
 8000ac6:	2202      	movs	r2, #2
 8000ac8:	719a      	strb	r2, [r3, #6]
	Motor_FR.motor_id.state = off ;
 8000aca:	4b19      	ldr	r3, [pc, #100]	; (8000b30 <Motor_GoBackRight+0x70>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	715a      	strb	r2, [r3, #5]
	Motor_FR.motor_id.speed = PWM_SPEED;
 8000ad0:	4b18      	ldr	r3, [pc, #96]	; (8000b34 <Motor_GoBackRight+0x74>)
 8000ad2:	781a      	ldrb	r2, [r3, #0]
 8000ad4:	4b16      	ldr	r3, [pc, #88]	; (8000b30 <Motor_GoBackRight+0x70>)
 8000ad6:	71da      	strb	r2, [r3, #7]

	Motor_FL.motor_id.direction = anticlockwise;
 8000ad8:	4b17      	ldr	r3, [pc, #92]	; (8000b38 <Motor_GoBackRight+0x78>)
 8000ada:	2202      	movs	r2, #2
 8000adc:	719a      	strb	r2, [r3, #6]
	Motor_FL.motor_id.state = on ;
 8000ade:	4b16      	ldr	r3, [pc, #88]	; (8000b38 <Motor_GoBackRight+0x78>)
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	715a      	strb	r2, [r3, #5]
	Motor_FL.motor_id.speed = PWM_SPEED;
 8000ae4:	4b13      	ldr	r3, [pc, #76]	; (8000b34 <Motor_GoBackRight+0x74>)
 8000ae6:	781a      	ldrb	r2, [r3, #0]
 8000ae8:	4b13      	ldr	r3, [pc, #76]	; (8000b38 <Motor_GoBackRight+0x78>)
 8000aea:	71da      	strb	r2, [r3, #7]

	Motor_BR.motor_id.direction = anticlockwise;
 8000aec:	4b13      	ldr	r3, [pc, #76]	; (8000b3c <Motor_GoBackRight+0x7c>)
 8000aee:	2202      	movs	r2, #2
 8000af0:	719a      	strb	r2, [r3, #6]
	Motor_BR.motor_id.state = off ;
 8000af2:	4b12      	ldr	r3, [pc, #72]	; (8000b3c <Motor_GoBackRight+0x7c>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	715a      	strb	r2, [r3, #5]
	Motor_BR.motor_id.speed = PWM_SPEED;
 8000af8:	4b0e      	ldr	r3, [pc, #56]	; (8000b34 <Motor_GoBackRight+0x74>)
 8000afa:	781a      	ldrb	r2, [r3, #0]
 8000afc:	4b0f      	ldr	r3, [pc, #60]	; (8000b3c <Motor_GoBackRight+0x7c>)
 8000afe:	71da      	strb	r2, [r3, #7]

	Motor_BL.motor_id.direction = anticlockwise;
 8000b00:	4b0f      	ldr	r3, [pc, #60]	; (8000b40 <Motor_GoBackRight+0x80>)
 8000b02:	2202      	movs	r2, #2
 8000b04:	719a      	strb	r2, [r3, #6]
	Motor_BL.motor_id.state = on ;
 8000b06:	4b0e      	ldr	r3, [pc, #56]	; (8000b40 <Motor_GoBackRight+0x80>)
 8000b08:	2201      	movs	r2, #1
 8000b0a:	715a      	strb	r2, [r3, #5]
	Motor_BL.motor_id.speed = PWM_SPEED;
 8000b0c:	4b09      	ldr	r3, [pc, #36]	; (8000b34 <Motor_GoBackRight+0x74>)
 8000b0e:	781a      	ldrb	r2, [r3, #0]
 8000b10:	4b0b      	ldr	r3, [pc, #44]	; (8000b40 <Motor_GoBackRight+0x80>)
 8000b12:	71da      	strb	r2, [r3, #7]

	DcMotor_Rotate( &Motor_FR );
 8000b14:	4806      	ldr	r0, [pc, #24]	; (8000b30 <Motor_GoBackRight+0x70>)
 8000b16:	f000 f912 	bl	8000d3e <DcMotor_Rotate>
	DcMotor_Rotate( &Motor_FL );
 8000b1a:	4807      	ldr	r0, [pc, #28]	; (8000b38 <Motor_GoBackRight+0x78>)
 8000b1c:	f000 f90f 	bl	8000d3e <DcMotor_Rotate>
	DcMotor_Rotate( &Motor_BR );
 8000b20:	4806      	ldr	r0, [pc, #24]	; (8000b3c <Motor_GoBackRight+0x7c>)
 8000b22:	f000 f90c 	bl	8000d3e <DcMotor_Rotate>
	DcMotor_Rotate( &Motor_BL );
 8000b26:	4806      	ldr	r0, [pc, #24]	; (8000b40 <Motor_GoBackRight+0x80>)
 8000b28:	f000 f909 	bl	8000d3e <DcMotor_Rotate>
}
 8000b2c:	bf00      	nop
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	20000004 	.word	0x20000004
 8000b34:	20000024 	.word	0x20000024
 8000b38:	20000014 	.word	0x20000014
 8000b3c:	2000000c 	.word	0x2000000c
 8000b40:	2000001c 	.word	0x2000001c

08000b44 <Motor_GoBackLeft>:
static void 	Motor_GoBackLeft	(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
	Motor_FR.motor_id.direction = anticlockwise;
 8000b48:	4b1a      	ldr	r3, [pc, #104]	; (8000bb4 <Motor_GoBackLeft+0x70>)
 8000b4a:	2202      	movs	r2, #2
 8000b4c:	719a      	strb	r2, [r3, #6]
	Motor_FR.motor_id.state = on ;
 8000b4e:	4b19      	ldr	r3, [pc, #100]	; (8000bb4 <Motor_GoBackLeft+0x70>)
 8000b50:	2201      	movs	r2, #1
 8000b52:	715a      	strb	r2, [r3, #5]
	Motor_FR.motor_id.speed = PWM_SPEED;
 8000b54:	4b18      	ldr	r3, [pc, #96]	; (8000bb8 <Motor_GoBackLeft+0x74>)
 8000b56:	781a      	ldrb	r2, [r3, #0]
 8000b58:	4b16      	ldr	r3, [pc, #88]	; (8000bb4 <Motor_GoBackLeft+0x70>)
 8000b5a:	71da      	strb	r2, [r3, #7]

	Motor_FL.motor_id.direction = anticlockwise;
 8000b5c:	4b17      	ldr	r3, [pc, #92]	; (8000bbc <Motor_GoBackLeft+0x78>)
 8000b5e:	2202      	movs	r2, #2
 8000b60:	719a      	strb	r2, [r3, #6]
	Motor_FL.motor_id.state = off ;
 8000b62:	4b16      	ldr	r3, [pc, #88]	; (8000bbc <Motor_GoBackLeft+0x78>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	715a      	strb	r2, [r3, #5]
	Motor_FL.motor_id.speed = PWM_SPEED;
 8000b68:	4b13      	ldr	r3, [pc, #76]	; (8000bb8 <Motor_GoBackLeft+0x74>)
 8000b6a:	781a      	ldrb	r2, [r3, #0]
 8000b6c:	4b13      	ldr	r3, [pc, #76]	; (8000bbc <Motor_GoBackLeft+0x78>)
 8000b6e:	71da      	strb	r2, [r3, #7]

	Motor_BR.motor_id.direction = anticlockwise;
 8000b70:	4b13      	ldr	r3, [pc, #76]	; (8000bc0 <Motor_GoBackLeft+0x7c>)
 8000b72:	2202      	movs	r2, #2
 8000b74:	719a      	strb	r2, [r3, #6]
	Motor_BR.motor_id.state = on ;
 8000b76:	4b12      	ldr	r3, [pc, #72]	; (8000bc0 <Motor_GoBackLeft+0x7c>)
 8000b78:	2201      	movs	r2, #1
 8000b7a:	715a      	strb	r2, [r3, #5]
	Motor_BR.motor_id.speed = PWM_SPEED;
 8000b7c:	4b0e      	ldr	r3, [pc, #56]	; (8000bb8 <Motor_GoBackLeft+0x74>)
 8000b7e:	781a      	ldrb	r2, [r3, #0]
 8000b80:	4b0f      	ldr	r3, [pc, #60]	; (8000bc0 <Motor_GoBackLeft+0x7c>)
 8000b82:	71da      	strb	r2, [r3, #7]

	Motor_BL.motor_id.direction = anticlockwise;
 8000b84:	4b0f      	ldr	r3, [pc, #60]	; (8000bc4 <Motor_GoBackLeft+0x80>)
 8000b86:	2202      	movs	r2, #2
 8000b88:	719a      	strb	r2, [r3, #6]
	Motor_BL.motor_id.state = off ;
 8000b8a:	4b0e      	ldr	r3, [pc, #56]	; (8000bc4 <Motor_GoBackLeft+0x80>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	715a      	strb	r2, [r3, #5]
	Motor_BL.motor_id.speed = PWM_SPEED;
 8000b90:	4b09      	ldr	r3, [pc, #36]	; (8000bb8 <Motor_GoBackLeft+0x74>)
 8000b92:	781a      	ldrb	r2, [r3, #0]
 8000b94:	4b0b      	ldr	r3, [pc, #44]	; (8000bc4 <Motor_GoBackLeft+0x80>)
 8000b96:	71da      	strb	r2, [r3, #7]

	DcMotor_Rotate( &Motor_FR );
 8000b98:	4806      	ldr	r0, [pc, #24]	; (8000bb4 <Motor_GoBackLeft+0x70>)
 8000b9a:	f000 f8d0 	bl	8000d3e <DcMotor_Rotate>
	DcMotor_Rotate( &Motor_FL );
 8000b9e:	4807      	ldr	r0, [pc, #28]	; (8000bbc <Motor_GoBackLeft+0x78>)
 8000ba0:	f000 f8cd 	bl	8000d3e <DcMotor_Rotate>
	DcMotor_Rotate( &Motor_BR );
 8000ba4:	4806      	ldr	r0, [pc, #24]	; (8000bc0 <Motor_GoBackLeft+0x7c>)
 8000ba6:	f000 f8ca 	bl	8000d3e <DcMotor_Rotate>
	DcMotor_Rotate( &Motor_BL );
 8000baa:	4806      	ldr	r0, [pc, #24]	; (8000bc4 <Motor_GoBackLeft+0x80>)
 8000bac:	f000 f8c7 	bl	8000d3e <DcMotor_Rotate>
}
 8000bb0:	bf00      	nop
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	20000004 	.word	0x20000004
 8000bb8:	20000024 	.word	0x20000024
 8000bbc:	20000014 	.word	0x20000014
 8000bc0:	2000000c 	.word	0x2000000c
 8000bc4:	2000001c 	.word	0x2000001c

08000bc8 <Motor_stop>:
static void 	Motor_stop			(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
	Motor_FR.motor_id.state = off ;
 8000bcc:	4b0c      	ldr	r3, [pc, #48]	; (8000c00 <Motor_stop+0x38>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	715a      	strb	r2, [r3, #5]

	Motor_FL.motor_id.state = off ;
 8000bd2:	4b0c      	ldr	r3, [pc, #48]	; (8000c04 <Motor_stop+0x3c>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	715a      	strb	r2, [r3, #5]

	Motor_BR.motor_id.state = off ;
 8000bd8:	4b0b      	ldr	r3, [pc, #44]	; (8000c08 <Motor_stop+0x40>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	715a      	strb	r2, [r3, #5]

	Motor_BL.motor_id.state = off ;
 8000bde:	4b0b      	ldr	r3, [pc, #44]	; (8000c0c <Motor_stop+0x44>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	715a      	strb	r2, [r3, #5]

	DcMotor_Rotate( &Motor_FR );
 8000be4:	4806      	ldr	r0, [pc, #24]	; (8000c00 <Motor_stop+0x38>)
 8000be6:	f000 f8aa 	bl	8000d3e <DcMotor_Rotate>
	DcMotor_Rotate( &Motor_FL );
 8000bea:	4806      	ldr	r0, [pc, #24]	; (8000c04 <Motor_stop+0x3c>)
 8000bec:	f000 f8a7 	bl	8000d3e <DcMotor_Rotate>
	DcMotor_Rotate( &Motor_BR );
 8000bf0:	4805      	ldr	r0, [pc, #20]	; (8000c08 <Motor_stop+0x40>)
 8000bf2:	f000 f8a4 	bl	8000d3e <DcMotor_Rotate>
	DcMotor_Rotate( &Motor_BL );
 8000bf6:	4805      	ldr	r0, [pc, #20]	; (8000c0c <Motor_stop+0x44>)
 8000bf8:	f000 f8a1 	bl	8000d3e <DcMotor_Rotate>
}
 8000bfc:	bf00      	nop
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	20000004 	.word	0x20000004
 8000c04:	20000014 	.word	0x20000014
 8000c08:	2000000c 	.word	0x2000000c
 8000c0c:	2000001c 	.word	0x2000001c

08000c10 <Motor_Task>:
/*******************************************************************************
 *                      Global Functions Definitions                           *
 *******************************************************************************/

void Motor_Task(void * pvparam)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
	 portTickType Freq = 5;
 8000c18:	2305      	movs	r3, #5
 8000c1a:	60fb      	str	r3, [r7, #12]
	 portTickType Start = xTaskGetTickCount();
 8000c1c:	f002 fc3e 	bl	800349c <xTaskGetTickCount>
 8000c20:	4603      	mov	r3, r0
 8000c22:	60bb      	str	r3, [r7, #8]
	while(1)
	{
		switch(Motor_mode)
 8000c24:	4b1c      	ldr	r3, [pc, #112]	; (8000c98 <Motor_Task+0x88>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	2b07      	cmp	r3, #7
 8000c2a:	d82e      	bhi.n	8000c8a <Motor_Task+0x7a>
 8000c2c:	a201      	add	r2, pc, #4	; (adr r2, 8000c34 <Motor_Task+0x24>)
 8000c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c32:	bf00      	nop
 8000c34:	08000c55 	.word	0x08000c55
 8000c38:	08000c61 	.word	0x08000c61
 8000c3c:	08000c67 	.word	0x08000c67
 8000c40:	08000c6d 	.word	0x08000c6d
 8000c44:	08000c73 	.word	0x08000c73
 8000c48:	08000c79 	.word	0x08000c79
 8000c4c:	08000c7f 	.word	0x08000c7f
 8000c50:	08000c85 	.word	0x08000c85
		{
		case Motor_init_mode:
		{
			Motor_init();
 8000c54:	f7ff fe14 	bl	8000880 <Motor_init>
			Motor_mode = Motor_GoForward_mode;
 8000c58:	4b0f      	ldr	r3, [pc, #60]	; (8000c98 <Motor_Task+0x88>)
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000c5e:	e014      	b.n	8000c8a <Motor_Task+0x7a>
		case Motor_GoForward_mode:
		{
			Motor_GoForward();
 8000c60:	f7ff fe26 	bl	80008b0 <Motor_GoForward>
		}
		break;
 8000c64:	e011      	b.n	8000c8a <Motor_Task+0x7a>
		case Motor_GoBackward_mode:
		{
			Motor_GoBackward();
 8000c66:	f7ff fe65 	bl	8000934 <Motor_GoBackward>
		}
		break;
 8000c6a:	e00e      	b.n	8000c8a <Motor_Task+0x7a>
		case Motor_GoRight_mode:
		{
			Motor_GoRight();
 8000c6c:	f7ff fea4 	bl	80009b8 <Motor_GoRight>
		}
		break;
 8000c70:	e00b      	b.n	8000c8a <Motor_Task+0x7a>
		case Motor_GoLeft_mode:
		{
			Motor_GoLeft();
 8000c72:	f7ff fee3 	bl	8000a3c <Motor_GoLeft>
		}
		break;
 8000c76:	e008      	b.n	8000c8a <Motor_Task+0x7a>
		case Motor_GoBackRight_mode:
		{
			Motor_GoBackRight();
 8000c78:	f7ff ff22 	bl	8000ac0 <Motor_GoBackRight>
		}
		break;
 8000c7c:	e005      	b.n	8000c8a <Motor_Task+0x7a>
		case Motor_GoBackLeft_mode:
		{
			Motor_GoBackLeft();
 8000c7e:	f7ff ff61 	bl	8000b44 <Motor_GoBackLeft>
		}
		break;
 8000c82:	e002      	b.n	8000c8a <Motor_Task+0x7a>
		case Motor_stop_mode:
		{
			Motor_stop();
 8000c84:	f7ff ffa0 	bl	8000bc8 <Motor_stop>
		}
		break;
 8000c88:	bf00      	nop
		}
		vTaskDelayUntil(&Start,Freq);
 8000c8a:	f107 0308 	add.w	r3, r7, #8
 8000c8e:	68f9      	ldr	r1, [r7, #12]
 8000c90:	4618      	mov	r0, r3
 8000c92:	f002 fa09 	bl	80030a8 <xTaskDelayUntil>
		switch(Motor_mode)
 8000c96:	e7c5      	b.n	8000c24 <Motor_Task+0x14>
 8000c98:	20000084 	.word	0x20000084

08000c9c <LED_Init>:

#include "led.h"
#include "dio.h"

void LED_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
	DIO_setupPinMode( PORTA_ID , PIN5_ID , PIN_OUTPUT );
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	2105      	movs	r1, #5
 8000ca4:	2000      	movs	r0, #0
 8000ca6:	f001 f967 	bl	8001f78 <DIO_setupPinMode>
	DIO_writePin(PORTA_ID, PIN5_ID, LOGIC_LOW);
 8000caa:	2200      	movs	r2, #0
 8000cac:	2105      	movs	r1, #5
 8000cae:	2000      	movs	r0, #0
 8000cb0:	f001 fa3e 	bl	8002130 <DIO_writePin>
}
 8000cb4:	bf00      	nop
 8000cb6:	bd80      	pop	{r7, pc}

08000cb8 <LED_ON>:

void LED_ON(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
	DIO_writePin(PORTA_ID, PIN5_ID, LOGIC_HIGH);
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	2105      	movs	r1, #5
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	f001 fa35 	bl	8002130 <DIO_writePin>
}
 8000cc6:	bf00      	nop
 8000cc8:	bd80      	pop	{r7, pc}

08000cca <DcMotor_Init>:
#include "dio.h"
#include "pwm.h"



void DcMotor_Init(Motor_ID_t* motor ){
 8000cca:	b580      	push	{r7, lr}
 8000ccc:	b082      	sub	sp, #8
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	6078      	str	r0, [r7, #4]
	DIO_setupPinMode(motor->MotorPortID,motor->MootorPin1, PIN_OUTPUT);
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	7818      	ldrb	r0, [r3, #0]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	785b      	ldrb	r3, [r3, #1]
 8000cda:	2201      	movs	r2, #1
 8000cdc:	4619      	mov	r1, r3
 8000cde:	f001 f94b 	bl	8001f78 <DIO_setupPinMode>
	DIO_setupPinMode(motor->MotorPortID,motor->MootorPin2, PIN_OUTPUT);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	7818      	ldrb	r0, [r3, #0]
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	789b      	ldrb	r3, [r3, #2]
 8000cea:	2201      	movs	r2, #1
 8000cec:	4619      	mov	r1, r3
 8000cee:	f001 f943 	bl	8001f78 <DIO_setupPinMode>

	DIO_writePin(motor->MotorPortID, motor->MootorPin1,LOGIC_LOW);
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	7818      	ldrb	r0, [r3, #0]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	785b      	ldrb	r3, [r3, #1]
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	f001 fa17 	bl	8002130 <DIO_writePin>
	DIO_writePin(motor->MotorPortID, motor->MootorPin2,LOGIC_LOW);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	7818      	ldrb	r0, [r3, #0]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	789b      	ldrb	r3, [r3, #2]
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	f001 fa0f 	bl	8002130 <DIO_writePin>

	DIO_setupPinMode( motor->MotorPortID_PWM ,motor->MootorPin_PWM , PIN_ALTERNATE );
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	78d8      	ldrb	r0, [r3, #3]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	791b      	ldrb	r3, [r3, #4]
 8000d1a:	2202      	movs	r2, #2
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	f001 f92b 	bl	8001f78 <DIO_setupPinMode>
	DIO_setAlternateFunction(motor->MotorPortID_PWM ,motor->MootorPin_PWM , AF1 );
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	78d8      	ldrb	r0, [r3, #3]
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	791b      	ldrb	r3, [r3, #4]
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	f001 fb13 	bl	8002358 <DIO_setAlternateFunction>

	PWM_Init();
 8000d32:	f000 ffff 	bl	8001d34 <PWM_Init>
}
 8000d36:	bf00      	nop
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <DcMotor_Rotate>:


void DcMotor_Rotate(Motor_ID_t* motor ){
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	b082      	sub	sp, #8
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	6078      	str	r0, [r7, #4]
	PWM_Start(motor->MootorPin_PWM , motor->motor_id.speed );
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	791a      	ldrb	r2, [r3, #4]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	79db      	ldrb	r3, [r3, #7]
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4610      	mov	r0, r2
 8000d52:	f001 f843 	bl	8001ddc <PWM_Start>

	if(motor->motor_id.state==on){
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	795b      	ldrb	r3, [r3, #5]
 8000d5a:	2b01      	cmp	r3, #1
 8000d5c:	d129      	bne.n	8000db2 <DcMotor_Rotate+0x74>
		//		PWM_Start(config_ptr->speed);
		if(motor->motor_id.direction==clockwise){
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	799b      	ldrb	r3, [r3, #6]
 8000d62:	2b01      	cmp	r3, #1
 8000d64:	d110      	bne.n	8000d88 <DcMotor_Rotate+0x4a>
			DIO_writePin(motor->MotorPortID, motor->MootorPin1,LOGIC_HIGH);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	7818      	ldrb	r0, [r3, #0]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	785b      	ldrb	r3, [r3, #1]
 8000d6e:	2201      	movs	r2, #1
 8000d70:	4619      	mov	r1, r3
 8000d72:	f001 f9dd 	bl	8002130 <DIO_writePin>
			DIO_writePin(motor->MotorPortID, motor->MootorPin2,LOGIC_LOW);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	7818      	ldrb	r0, [r3, #0]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	789b      	ldrb	r3, [r3, #2]
 8000d7e:	2200      	movs	r2, #0
 8000d80:	4619      	mov	r1, r3
 8000d82:	f001 f9d5 	bl	8002130 <DIO_writePin>

		DIO_writePin(motor->MotorPortID, motor->MootorPin1,LOGIC_LOW);
		DIO_writePin(motor->MotorPortID, motor->MootorPin2,LOGIC_LOW);
	}

}
 8000d86:	e024      	b.n	8000dd2 <DcMotor_Rotate+0x94>
		else if(motor->motor_id.direction==anticlockwise)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	799b      	ldrb	r3, [r3, #6]
 8000d8c:	2b02      	cmp	r3, #2
 8000d8e:	d120      	bne.n	8000dd2 <DcMotor_Rotate+0x94>
			DIO_writePin(motor->MotorPortID, motor->MootorPin1,LOGIC_LOW);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	7818      	ldrb	r0, [r3, #0]
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	785b      	ldrb	r3, [r3, #1]
 8000d98:	2200      	movs	r2, #0
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	f001 f9c8 	bl	8002130 <DIO_writePin>
			DIO_writePin(motor->MotorPortID, motor->MootorPin2,LOGIC_HIGH);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	7818      	ldrb	r0, [r3, #0]
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	789b      	ldrb	r3, [r3, #2]
 8000da8:	2201      	movs	r2, #1
 8000daa:	4619      	mov	r1, r3
 8000dac:	f001 f9c0 	bl	8002130 <DIO_writePin>
}
 8000db0:	e00f      	b.n	8000dd2 <DcMotor_Rotate+0x94>
		DIO_writePin(motor->MotorPortID, motor->MootorPin1,LOGIC_LOW);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	7818      	ldrb	r0, [r3, #0]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	785b      	ldrb	r3, [r3, #1]
 8000dba:	2200      	movs	r2, #0
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	f001 f9b7 	bl	8002130 <DIO_writePin>
		DIO_writePin(motor->MotorPortID, motor->MootorPin2,LOGIC_LOW);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	7818      	ldrb	r0, [r3, #0]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	789b      	ldrb	r3, [r3, #2]
 8000dca:	2200      	movs	r2, #0
 8000dcc:	4619      	mov	r1, r3
 8000dce:	f001 f9af 	bl	8002130 <DIO_writePin>
}
 8000dd2:	bf00      	nop
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
	...

08000ddc <Ultrasonic_init>:
#define UltraSonic_HW_Calibartion		58
/*
 * Description: initialization Function of the Ultrasonic driver
 */
void Ultrasonic_init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b086      	sub	sp, #24
 8000de0:	af00      	add	r7, sp, #0

	Channel_Config cfg = {0};
 8000de2:	463b      	mov	r3, r7
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	605a      	str	r2, [r3, #4]
 8000dea:	609a      	str	r2, [r3, #8]
 8000dec:	60da      	str	r2, [r3, #12]
 8000dee:	611a      	str	r2, [r3, #16]
 8000df0:	615a      	str	r2, [r3, #20]
	/*****	Init all ICU Channels 1,2,3,4,5,6 *********/

	ICU_Init();
 8000df2:	f000 fc23 	bl	800163c <ICU_Init>

	/**********  Channel   1   *********************************/

	DIO_setupPinMode( TRIGGER1_PORT , TRIGGER1_PIN , PIN_OUTPUT );
 8000df6:	2201      	movs	r2, #1
 8000df8:	2104      	movs	r1, #4
 8000dfa:	2000      	movs	r0, #0
 8000dfc:	f001 f8bc 	bl	8001f78 <DIO_setupPinMode>
	DIO_writePin( TRIGGER1_PORT ,  TRIGGER1_PIN , LOGIC_LOW );
 8000e00:	2200      	movs	r2, #0
 8000e02:	2104      	movs	r1, #4
 8000e04:	2000      	movs	r0, #0
 8000e06:	f001 f993 	bl	8002130 <DIO_writePin>

	DIO_setupPinMode( ECHO1_PORT , ECHO1_PIN , PIN_ALTERNATE );
 8000e0a:	2202      	movs	r2, #2
 8000e0c:	2106      	movs	r1, #6
 8000e0e:	2002      	movs	r0, #2
 8000e10:	f001 f8b2 	bl	8001f78 <DIO_setupPinMode>
	DIO_setAlternateFunction(ECHO1_PORT ,ECHO1_PIN , UltraSonic1_AF );
 8000e14:	2204      	movs	r2, #4
 8000e16:	2106      	movs	r1, #6
 8000e18:	2002      	movs	r0, #2
 8000e1a:	f001 fa9d 	bl	8002358 <DIO_setAlternateFunction>

	cfg.DMA = DMA_2_;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	703b      	strb	r3, [r7, #0]
	cfg.Chanel = CH_3_ ;
 8000e22:	2302      	movs	r3, #2
 8000e24:	707b      	strb	r3, [r7, #1]
	cfg.PL = Very_High;
 8000e26:	2303      	movs	r3, #3
 8000e28:	737b      	strb	r3, [r7, #13]
	cfg.MSIZE = _16_bits;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	73bb      	strb	r3, [r7, #14]
	cfg.PSIZE = _16_bits;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	73fb      	strb	r3, [r7, #15]
	cfg.MINC = TRUE;
 8000e32:	2301      	movs	r3, #1
 8000e34:	743b      	strb	r3, [r7, #16]
	cfg.CIRC = TRUE;
 8000e36:	2301      	movs	r3, #1
 8000e38:	74bb      	strb	r3, [r7, #18]
	cfg.TCIE = TRUE;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	75bb      	strb	r3, [r7, #22]
	cfg.Block_Size = 2;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	807b      	strh	r3, [r7, #2]
	cfg.Source_Address = (u32)(&TIM8_CCR1_REG);
 8000e42:	4b6a      	ldr	r3, [pc, #424]	; (8000fec <Ultrasonic_init+0x210>)
 8000e44:	607b      	str	r3, [r7, #4]
	cfg.Dest_Address   = (u32)(&arr);
 8000e46:	4b6a      	ldr	r3, [pc, #424]	; (8000ff0 <Ultrasonic_init+0x214>)
 8000e48:	60bb      	str	r3, [r7, #8]
	cfg.EN = TRUE;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	75fb      	strb	r3, [r7, #23]
	DMA_Start(&cfg);
 8000e4e:	463b      	mov	r3, r7
 8000e50:	4618      	mov	r0, r3
 8000e52:	f000 f959 	bl	8001108 <DMA_Start>

	ICU_SelectEdge(UltraSonic_Channel1, Both_Edges );
 8000e56:	2102      	movs	r1, #2
 8000e58:	2000      	movs	r0, #0
 8000e5a:	f000 fc93 	bl	8001784 <ICU_SelectEdge>
	ICU_INT_Enable(UltraSonic_Channel1 , (void*)RET_NULLPTR );
 8000e5e:	2102      	movs	r1, #2
 8000e60:	2000      	movs	r0, #0
 8000e62:	f000 fe47 	bl	8001af4 <ICU_INT_Enable>

	/**********  Channel   2   *********************************/

	DIO_setupPinMode( TRIGGER2_PORT , TRIGGER2_PIN , PIN_OUTPUT );
 8000e66:	2201      	movs	r2, #1
 8000e68:	2104      	movs	r1, #4
 8000e6a:	2000      	movs	r0, #0
 8000e6c:	f001 f884 	bl	8001f78 <DIO_setupPinMode>
	DIO_writePin( TRIGGER2_PORT ,  TRIGGER2_PIN , LOGIC_LOW );
 8000e70:	2200      	movs	r2, #0
 8000e72:	2104      	movs	r1, #4
 8000e74:	2000      	movs	r0, #0
 8000e76:	f001 f95b 	bl	8002130 <DIO_writePin>

	DIO_setupPinMode( ECHO2_PORT , ECHO2_PIN , PIN_ALTERNATE );
 8000e7a:	2202      	movs	r2, #2
 8000e7c:	2108      	movs	r1, #8
 8000e7e:	2001      	movs	r0, #1
 8000e80:	f001 f87a 	bl	8001f78 <DIO_setupPinMode>
	DIO_setAlternateFunction(ECHO2_PORT ,ECHO2_PIN , UltraSonic2_AF );
 8000e84:	220a      	movs	r2, #10
 8000e86:	2108      	movs	r1, #8
 8000e88:	2001      	movs	r0, #1
 8000e8a:	f001 fa65 	bl	8002358 <DIO_setAlternateFunction>

	cfg.DMA = DMA_2_;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	703b      	strb	r3, [r7, #0]
	cfg.Chanel = CH_5_ ;
 8000e92:	2304      	movs	r3, #4
 8000e94:	707b      	strb	r3, [r7, #1]
	cfg.Source_Address = (u32)(&TIM8_CCR2_REG);
 8000e96:	4b57      	ldr	r3, [pc, #348]	; (8000ff4 <Ultrasonic_init+0x218>)
 8000e98:	607b      	str	r3, [r7, #4]
	DMA_Start(&cfg);
 8000e9a:	463b      	mov	r3, r7
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f000 f933 	bl	8001108 <DMA_Start>

	ICU_SelectEdge(UltraSonic_Channel2, Both_Edges );
 8000ea2:	2102      	movs	r1, #2
 8000ea4:	2001      	movs	r0, #1
 8000ea6:	f000 fc6d 	bl	8001784 <ICU_SelectEdge>
	ICU_INT_Enable(UltraSonic_Channel2 , (void*)RET_NULLPTR);
 8000eaa:	2102      	movs	r1, #2
 8000eac:	2001      	movs	r0, #1
 8000eae:	f000 fe21 	bl	8001af4 <ICU_INT_Enable>

	/**********  Channel   3   *********************************/

	DIO_setupPinMode( TRIGGER3_PORT , TRIGGER3_PIN , PIN_OUTPUT );
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	2104      	movs	r1, #4
 8000eb6:	2000      	movs	r0, #0
 8000eb8:	f001 f85e 	bl	8001f78 <DIO_setupPinMode>
	DIO_writePin( TRIGGER3_PORT ,  TRIGGER3_PIN , LOGIC_LOW );
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	2104      	movs	r1, #4
 8000ec0:	2000      	movs	r0, #0
 8000ec2:	f001 f935 	bl	8002130 <DIO_writePin>

	DIO_setupPinMode( ECHO3_PORT , ECHO3_PIN , PIN_ALTERNATE );
 8000ec6:	2202      	movs	r2, #2
 8000ec8:	2108      	movs	r1, #8
 8000eca:	2002      	movs	r0, #2
 8000ecc:	f001 f854 	bl	8001f78 <DIO_setupPinMode>
	DIO_setAlternateFunction(ECHO3_PORT ,ECHO3_PIN , UltraSonic3_AF );
 8000ed0:	2204      	movs	r2, #4
 8000ed2:	2108      	movs	r1, #8
 8000ed4:	2002      	movs	r0, #2
 8000ed6:	f001 fa3f 	bl	8002358 <DIO_setAlternateFunction>

	cfg.DMA = DMA_2_;
 8000eda:	2301      	movs	r3, #1
 8000edc:	703b      	strb	r3, [r7, #0]
	cfg.Chanel = CH_1_ ;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	707b      	strb	r3, [r7, #1]
	cfg.Source_Address = (u32)(&TIM8_CCR3_REG);
 8000ee2:	4b45      	ldr	r3, [pc, #276]	; (8000ff8 <Ultrasonic_init+0x21c>)
 8000ee4:	607b      	str	r3, [r7, #4]
	DMA_Start(&cfg);
 8000ee6:	463b      	mov	r3, r7
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f000 f90d 	bl	8001108 <DMA_Start>

	ICU_SelectEdge(UltraSonic_Channel3, Both_Edges );
 8000eee:	2102      	movs	r1, #2
 8000ef0:	2002      	movs	r0, #2
 8000ef2:	f000 fc47 	bl	8001784 <ICU_SelectEdge>
	ICU_INT_Enable(UltraSonic_Channel3 , (void*)RET_NULLPTR);
 8000ef6:	2102      	movs	r1, #2
 8000ef8:	2002      	movs	r0, #2
 8000efa:	f000 fdfb 	bl	8001af4 <ICU_INT_Enable>

	/**********  Channel   4   *********************************/

	DIO_setupPinMode( TRIGGER4_PORT , TRIGGER4_PIN , PIN_OUTPUT );
 8000efe:	2201      	movs	r2, #1
 8000f00:	2104      	movs	r1, #4
 8000f02:	2000      	movs	r0, #0
 8000f04:	f001 f838 	bl	8001f78 <DIO_setupPinMode>
	DIO_writePin( TRIGGER4_PORT ,  TRIGGER4_PIN , LOGIC_LOW );
 8000f08:	2200      	movs	r2, #0
 8000f0a:	2104      	movs	r1, #4
 8000f0c:	2000      	movs	r0, #0
 8000f0e:	f001 f90f 	bl	8002130 <DIO_writePin>

	DIO_setupPinMode( ECHO4_PORT , ECHO4_PIN , PIN_ALTERNATE );
 8000f12:	2202      	movs	r2, #2
 8000f14:	2100      	movs	r1, #0
 8000f16:	2002      	movs	r0, #2
 8000f18:	f001 f82e 	bl	8001f78 <DIO_setupPinMode>
	DIO_setAlternateFunction(ECHO4_PORT ,ECHO4_PIN , UltraSonic4_AF );
 8000f1c:	2202      	movs	r2, #2
 8000f1e:	2100      	movs	r1, #0
 8000f20:	2002      	movs	r0, #2
 8000f22:	f001 fa19 	bl	8002358 <DIO_setAlternateFunction>

	cfg.DMA = DMA_1_;
 8000f26:	2300      	movs	r3, #0
 8000f28:	703b      	strb	r3, [r7, #0]
	cfg.Chanel = CH_2_ ;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	707b      	strb	r3, [r7, #1]
	cfg.Source_Address = (u32)(&TIM1_CCR1_REG);
 8000f2e:	4b33      	ldr	r3, [pc, #204]	; (8000ffc <Ultrasonic_init+0x220>)
 8000f30:	607b      	str	r3, [r7, #4]
	DMA_Start(&cfg);
 8000f32:	463b      	mov	r3, r7
 8000f34:	4618      	mov	r0, r3
 8000f36:	f000 f8e7 	bl	8001108 <DMA_Start>

	ICU_SelectEdge(UltraSonic_Channel4, Both_Edges );
 8000f3a:	2102      	movs	r1, #2
 8000f3c:	2003      	movs	r0, #3
 8000f3e:	f000 fc21 	bl	8001784 <ICU_SelectEdge>
	ICU_INT_Enable(UltraSonic_Channel4 , (void*)RET_NULLPTR);
 8000f42:	2102      	movs	r1, #2
 8000f44:	2003      	movs	r0, #3
 8000f46:	f000 fdd5 	bl	8001af4 <ICU_INT_Enable>

	/**********  Channel   5   *********************************/

	DIO_setupPinMode( TRIGGER5_PORT , TRIGGER5_PIN , PIN_OUTPUT );
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	2104      	movs	r1, #4
 8000f4e:	2000      	movs	r0, #0
 8000f50:	f001 f812 	bl	8001f78 <DIO_setupPinMode>
	DIO_writePin( TRIGGER5_PORT ,  TRIGGER5_PIN , LOGIC_LOW );
 8000f54:	2200      	movs	r2, #0
 8000f56:	2104      	movs	r1, #4
 8000f58:	2000      	movs	r0, #0
 8000f5a:	f001 f8e9 	bl	8002130 <DIO_writePin>

	DIO_setupPinMode( ECHO5_PORT , ECHO5_PIN , PIN_ALTERNATE );
 8000f5e:	2202      	movs	r2, #2
 8000f60:	2101      	movs	r1, #1
 8000f62:	2002      	movs	r0, #2
 8000f64:	f001 f808 	bl	8001f78 <DIO_setupPinMode>
	DIO_setAlternateFunction(ECHO5_PORT ,ECHO5_PIN , UltraSonic5_AF );
 8000f68:	2202      	movs	r2, #2
 8000f6a:	2101      	movs	r1, #1
 8000f6c:	2002      	movs	r0, #2
 8000f6e:	f001 f9f3 	bl	8002358 <DIO_setAlternateFunction>


	cfg.DMA = DMA_1_;
 8000f72:	2300      	movs	r3, #0
 8000f74:	703b      	strb	r3, [r7, #0]
	cfg.Chanel = CH_3_ ;
 8000f76:	2302      	movs	r3, #2
 8000f78:	707b      	strb	r3, [r7, #1]
	cfg.Source_Address = (u32)(&TIM1_CCR2_REG);
 8000f7a:	4b21      	ldr	r3, [pc, #132]	; (8001000 <Ultrasonic_init+0x224>)
 8000f7c:	607b      	str	r3, [r7, #4]
	DMA_Start(&cfg);
 8000f7e:	463b      	mov	r3, r7
 8000f80:	4618      	mov	r0, r3
 8000f82:	f000 f8c1 	bl	8001108 <DMA_Start>

	ICU_SelectEdge(UltraSonic_Channel5, Both_Edges );
 8000f86:	2102      	movs	r1, #2
 8000f88:	2004      	movs	r0, #4
 8000f8a:	f000 fbfb 	bl	8001784 <ICU_SelectEdge>
	ICU_INT_Enable(UltraSonic_Channel5 , (void*)RET_NULLPTR);
 8000f8e:	2102      	movs	r1, #2
 8000f90:	2004      	movs	r0, #4
 8000f92:	f000 fdaf 	bl	8001af4 <ICU_INT_Enable>

	/**********  Channel   6   *********************************/

	DIO_setupPinMode( TRIGGER6_PORT , TRIGGER6_PIN , PIN_OUTPUT );
 8000f96:	2201      	movs	r2, #1
 8000f98:	2104      	movs	r1, #4
 8000f9a:	2000      	movs	r0, #0
 8000f9c:	f000 ffec 	bl	8001f78 <DIO_setupPinMode>
	DIO_writePin( TRIGGER6_PORT ,  TRIGGER6_PIN , LOGIC_LOW );
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	2104      	movs	r1, #4
 8000fa4:	2000      	movs	r0, #0
 8000fa6:	f001 f8c3 	bl	8002130 <DIO_writePin>

	DIO_setupPinMode( ECHO6_PORT , ECHO6_PIN , PIN_ALTERNATE );
 8000faa:	2202      	movs	r2, #2
 8000fac:	2102      	movs	r1, #2
 8000fae:	2002      	movs	r0, #2
 8000fb0:	f000 ffe2 	bl	8001f78 <DIO_setupPinMode>
	DIO_setAlternateFunction(ECHO6_PORT ,ECHO6_PIN , UltraSonic6_AF );
 8000fb4:	2202      	movs	r2, #2
 8000fb6:	2102      	movs	r1, #2
 8000fb8:	2002      	movs	r0, #2
 8000fba:	f001 f9cd 	bl	8002358 <DIO_setAlternateFunction>

	cfg.DMA = DMA_1_;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	703b      	strb	r3, [r7, #0]
	cfg.Chanel = CH_6_ ;
 8000fc2:	2305      	movs	r3, #5
 8000fc4:	707b      	strb	r3, [r7, #1]
	cfg.Source_Address = (u32)(&TIM1_CCR3_REG);
 8000fc6:	4b0f      	ldr	r3, [pc, #60]	; (8001004 <Ultrasonic_init+0x228>)
 8000fc8:	607b      	str	r3, [r7, #4]
	DMA_Start(&cfg);
 8000fca:	463b      	mov	r3, r7
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f000 f89b 	bl	8001108 <DMA_Start>

	ICU_SelectEdge(UltraSonic_Channel6, Both_Edges );
 8000fd2:	2102      	movs	r1, #2
 8000fd4:	2005      	movs	r0, #5
 8000fd6:	f000 fbd5 	bl	8001784 <ICU_SelectEdge>
	ICU_INT_Enable(UltraSonic_Channel6 , (void*)RET_NULLPTR);
 8000fda:	2102      	movs	r1, #2
 8000fdc:	2005      	movs	r0, #5
 8000fde:	f000 fd89 	bl	8001af4 <ICU_INT_Enable>


}
 8000fe2:	bf00      	nop
 8000fe4:	3718      	adds	r7, #24
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	40013434 	.word	0x40013434
 8000ff0:	2000008c 	.word	0x2000008c
 8000ff4:	40013438 	.word	0x40013438
 8000ff8:	4001343c 	.word	0x4001343c
 8000ffc:	40012c34 	.word	0x40012c34
 8001000:	40012c38 	.word	0x40012c38
 8001004:	40012c3c 	.word	0x40012c3c

08001008 <Ultrasonic_Trigger>:

/*
 *  Description: Send the trigger pulse to the ultrasonic
 */
void Ultrasonic_Trigger(DIO_PortID port , DIO_PinID pin , u8 Channel )
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	71fb      	strb	r3, [r7, #7]
 8001012:	460b      	mov	r3, r1
 8001014:	71bb      	strb	r3, [r7, #6]
 8001016:	4613      	mov	r3, r2
 8001018:	717b      	strb	r3, [r7, #5]
	UltraSonic_Channel = Channel;
 800101a:	4a0e      	ldr	r2, [pc, #56]	; (8001054 <Ultrasonic_Trigger+0x4c>)
 800101c:	797b      	ldrb	r3, [r7, #5]
 800101e:	7013      	strb	r3, [r2, #0]
	ICU_Control(UltraSonic_Channel , Enable);
 8001020:	4b0c      	ldr	r3, [pc, #48]	; (8001054 <Ultrasonic_Trigger+0x4c>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	2100      	movs	r1, #0
 8001026:	4618      	mov	r0, r3
 8001028:	f000 fb5a 	bl	80016e0 <ICU_Control>
	DIO_writePin( port ,  pin , LOGIC_HIGH );
 800102c:	79b9      	ldrb	r1, [r7, #6]
 800102e:	79fb      	ldrb	r3, [r7, #7]
 8001030:	2201      	movs	r2, #1
 8001032:	4618      	mov	r0, r3
 8001034:	f001 f87c 	bl	8002130 <DIO_writePin>
	TIM6_Delay(10);
 8001038:	200a      	movs	r0, #10
 800103a:	f000 ff71 	bl	8001f20 <TIM6_Delay>
	DIO_writePin( port ,  pin , LOGIC_LOW );
 800103e:	79b9      	ldrb	r1, [r7, #6]
 8001040:	79fb      	ldrb	r3, [r7, #7]
 8001042:	2200      	movs	r2, #0
 8001044:	4618      	mov	r0, r3
 8001046:	f001 f873 	bl	8002130 <DIO_writePin>
}
 800104a:	bf00      	nop
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	2000008a 	.word	0x2000008a

08001058 <Ultrasonic_readDistance>:
 */



u16 Ultrasonic_readDistance(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
	static u16 distance = Read_Threshold ;
	u16 tim ;

	t1 = arr[0];
 800105e:	4b23      	ldr	r3, [pc, #140]	; (80010ec <Ultrasonic_readDistance+0x94>)
 8001060:	881a      	ldrh	r2, [r3, #0]
 8001062:	4b23      	ldr	r3, [pc, #140]	; (80010f0 <Ultrasonic_readDistance+0x98>)
 8001064:	801a      	strh	r2, [r3, #0]
	t2 = arr[1];
 8001066:	4b21      	ldr	r3, [pc, #132]	; (80010ec <Ultrasonic_readDistance+0x94>)
 8001068:	885a      	ldrh	r2, [r3, #2]
 800106a:	4b22      	ldr	r3, [pc, #136]	; (80010f4 <Ultrasonic_readDistance+0x9c>)
 800106c:	801a      	strh	r2, [r3, #0]
	static u16 last_read;

	if( last_read != t2)
 800106e:	4b22      	ldr	r3, [pc, #136]	; (80010f8 <Ultrasonic_readDistance+0xa0>)
 8001070:	881a      	ldrh	r2, [r3, #0]
 8001072:	4b20      	ldr	r3, [pc, #128]	; (80010f4 <Ultrasonic_readDistance+0x9c>)
 8001074:	881b      	ldrh	r3, [r3, #0]
 8001076:	429a      	cmp	r2, r3
 8001078:	d021      	beq.n	80010be <Ultrasonic_readDistance+0x66>
	{
		if( t1 > t2)
 800107a:	4b1d      	ldr	r3, [pc, #116]	; (80010f0 <Ultrasonic_readDistance+0x98>)
 800107c:	881a      	ldrh	r2, [r3, #0]
 800107e:	4b1d      	ldr	r3, [pc, #116]	; (80010f4 <Ultrasonic_readDistance+0x9c>)
 8001080:	881b      	ldrh	r3, [r3, #0]
 8001082:	429a      	cmp	r2, r3
 8001084:	d908      	bls.n	8001098 <Ultrasonic_readDistance+0x40>
		{
			tim = ( 0xFFFF - t1 ) + t2 ;
 8001086:	4b1b      	ldr	r3, [pc, #108]	; (80010f4 <Ultrasonic_readDistance+0x9c>)
 8001088:	881a      	ldrh	r2, [r3, #0]
 800108a:	4b19      	ldr	r3, [pc, #100]	; (80010f0 <Ultrasonic_readDistance+0x98>)
 800108c:	881b      	ldrh	r3, [r3, #0]
 800108e:	1ad3      	subs	r3, r2, r3
 8001090:	b29b      	uxth	r3, r3
 8001092:	3b01      	subs	r3, #1
 8001094:	80fb      	strh	r3, [r7, #6]
 8001096:	e005      	b.n	80010a4 <Ultrasonic_readDistance+0x4c>
		}
		else
		{
			tim = t2 - t1 ;
 8001098:	4b16      	ldr	r3, [pc, #88]	; (80010f4 <Ultrasonic_readDistance+0x9c>)
 800109a:	881a      	ldrh	r2, [r3, #0]
 800109c:	4b14      	ldr	r3, [pc, #80]	; (80010f0 <Ultrasonic_readDistance+0x98>)
 800109e:	881b      	ldrh	r3, [r3, #0]
 80010a0:	1ad3      	subs	r3, r2, r3
 80010a2:	80fb      	strh	r3, [r7, #6]
		}
		distance = ( tim / UltraSonic_HW_Calibartion ) ;
 80010a4:	88fb      	ldrh	r3, [r7, #6]
 80010a6:	4a15      	ldr	r2, [pc, #84]	; (80010fc <Ultrasonic_readDistance+0xa4>)
 80010a8:	fba2 2303 	umull	r2, r3, r2, r3
 80010ac:	095b      	lsrs	r3, r3, #5
 80010ae:	b29a      	uxth	r2, r3
 80010b0:	4b13      	ldr	r3, [pc, #76]	; (8001100 <Ultrasonic_readDistance+0xa8>)
 80010b2:	801a      	strh	r2, [r3, #0]
		last_read = t2;
 80010b4:	4b0f      	ldr	r3, [pc, #60]	; (80010f4 <Ultrasonic_readDistance+0x9c>)
 80010b6:	881a      	ldrh	r2, [r3, #0]
 80010b8:	4b0f      	ldr	r3, [pc, #60]	; (80010f8 <Ultrasonic_readDistance+0xa0>)
 80010ba:	801a      	strh	r2, [r3, #0]
 80010bc:	e002      	b.n	80010c4 <Ultrasonic_readDistance+0x6c>
	}
	else
	{
		distance = Read_Threshold;
 80010be:	4b10      	ldr	r3, [pc, #64]	; (8001100 <Ultrasonic_readDistance+0xa8>)
 80010c0:	2232      	movs	r2, #50	; 0x32
 80010c2:	801a      	strh	r2, [r3, #0]
	}

	if ( distance > Read_Threshold )
 80010c4:	4b0e      	ldr	r3, [pc, #56]	; (8001100 <Ultrasonic_readDistance+0xa8>)
 80010c6:	881b      	ldrh	r3, [r3, #0]
 80010c8:	2b32      	cmp	r3, #50	; 0x32
 80010ca:	d902      	bls.n	80010d2 <Ultrasonic_readDistance+0x7a>
	{
		distance = Read_Threshold;
 80010cc:	4b0c      	ldr	r3, [pc, #48]	; (8001100 <Ultrasonic_readDistance+0xa8>)
 80010ce:	2232      	movs	r2, #50	; 0x32
 80010d0:	801a      	strh	r2, [r3, #0]
	else
	{

	}

	ICU_Control(UltraSonic_Channel , Disable);
 80010d2:	4b0c      	ldr	r3, [pc, #48]	; (8001104 <Ultrasonic_readDistance+0xac>)
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	2101      	movs	r1, #1
 80010d8:	4618      	mov	r0, r3
 80010da:	f000 fb01 	bl	80016e0 <ICU_Control>

	return distance;
 80010de:	4b08      	ldr	r3, [pc, #32]	; (8001100 <Ultrasonic_readDistance+0xa8>)
 80010e0:	881b      	ldrh	r3, [r3, #0]
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	2000008c 	.word	0x2000008c
 80010f0:	20000086 	.word	0x20000086
 80010f4:	20000088 	.word	0x20000088
 80010f8:	20000090 	.word	0x20000090
 80010fc:	8d3dcb09 	.word	0x8d3dcb09
 8001100:	20000026 	.word	0x20000026
 8001104:	2000008a 	.word	0x2000008a

08001108 <DMA_Start>:
#include "dma.h"


void DMA_Start( Channel_Config * ch_cfg )
{
 8001108:	b480      	push	{r7}
 800110a:	b085      	sub	sp, #20
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
	u8 channel = ch_cfg->Chanel;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	785b      	ldrb	r3, [r3, #1]
 8001114:	73fb      	strb	r3, [r7, #15]
	switch((ch_cfg->DMA))
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d003      	beq.n	8001126 <DMA_Start+0x1e>
 800111e:	2b01      	cmp	r3, #1
 8001120:	f000 8144 	beq.w	80013ac <DMA_Start+0x2a4>





}
 8001124:	e282      	b.n	800162c <DMA_Start+0x524>
		DMA_1->Channel[channel].CCR = 0x0000;
 8001126:	49a0      	ldr	r1, [pc, #640]	; (80013a8 <DMA_Start+0x2a0>)
 8001128:	7bfa      	ldrb	r2, [r7, #15]
 800112a:	4613      	mov	r3, r2
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	4413      	add	r3, r2
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	440b      	add	r3, r1
 8001134:	3308      	adds	r3, #8
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]
		DMA_1->Channel[channel].CNDTR = ch_cfg->Block_Size;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	885b      	ldrh	r3, [r3, #2]
 800113e:	499a      	ldr	r1, [pc, #616]	; (80013a8 <DMA_Start+0x2a0>)
 8001140:	7bfa      	ldrb	r2, [r7, #15]
 8001142:	4618      	mov	r0, r3
 8001144:	4613      	mov	r3, r2
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	4413      	add	r3, r2
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	440b      	add	r3, r1
 800114e:	330c      	adds	r3, #12
 8001150:	6018      	str	r0, [r3, #0]
		DMA_1->Channel[channel].CPAR  =  ch_cfg->Source_Address;
 8001152:	4895      	ldr	r0, [pc, #596]	; (80013a8 <DMA_Start+0x2a0>)
 8001154:	7bfa      	ldrb	r2, [r7, #15]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6859      	ldr	r1, [r3, #4]
 800115a:	4613      	mov	r3, r2
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	4413      	add	r3, r2
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	4403      	add	r3, r0
 8001164:	3310      	adds	r3, #16
 8001166:	6019      	str	r1, [r3, #0]
		DMA_1->Channel[channel].CMAR  =  ch_cfg->Dest_Address;
 8001168:	488f      	ldr	r0, [pc, #572]	; (80013a8 <DMA_Start+0x2a0>)
 800116a:	7bfa      	ldrb	r2, [r7, #15]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6899      	ldr	r1, [r3, #8]
 8001170:	4613      	mov	r3, r2
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	4413      	add	r3, r2
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	4403      	add	r3, r0
 800117a:	3314      	adds	r3, #20
 800117c:	6019      	str	r1, [r3, #0]
		DMA_1->Channel[channel].CCR |= WriteValue( ch_cfg->MEM2MEM , MEM2MEM_BIT_14 );
 800117e:	498a      	ldr	r1, [pc, #552]	; (80013a8 <DMA_Start+0x2a0>)
 8001180:	7bfa      	ldrb	r2, [r7, #15]
 8001182:	4613      	mov	r3, r2
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	4413      	add	r3, r2
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	440b      	add	r3, r1
 800118c:	3308      	adds	r3, #8
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	687a      	ldr	r2, [r7, #4]
 8001192:	7b12      	ldrb	r2, [r2, #12]
 8001194:	0392      	lsls	r2, r2, #14
 8001196:	4611      	mov	r1, r2
 8001198:	4883      	ldr	r0, [pc, #524]	; (80013a8 <DMA_Start+0x2a0>)
 800119a:	7bfa      	ldrb	r2, [r7, #15]
 800119c:	4319      	orrs	r1, r3
 800119e:	4613      	mov	r3, r2
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	4413      	add	r3, r2
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	4403      	add	r3, r0
 80011a8:	3308      	adds	r3, #8
 80011aa:	6019      	str	r1, [r3, #0]
		DMA_1->Channel[channel].CCR |= WriteValue( ch_cfg->PL      , PL_BIT_12_13 );
 80011ac:	497e      	ldr	r1, [pc, #504]	; (80013a8 <DMA_Start+0x2a0>)
 80011ae:	7bfa      	ldrb	r2, [r7, #15]
 80011b0:	4613      	mov	r3, r2
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	4413      	add	r3, r2
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	440b      	add	r3, r1
 80011ba:	3308      	adds	r3, #8
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	7b52      	ldrb	r2, [r2, #13]
 80011c2:	0312      	lsls	r2, r2, #12
 80011c4:	4611      	mov	r1, r2
 80011c6:	4878      	ldr	r0, [pc, #480]	; (80013a8 <DMA_Start+0x2a0>)
 80011c8:	7bfa      	ldrb	r2, [r7, #15]
 80011ca:	4319      	orrs	r1, r3
 80011cc:	4613      	mov	r3, r2
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	4413      	add	r3, r2
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	4403      	add	r3, r0
 80011d6:	3308      	adds	r3, #8
 80011d8:	6019      	str	r1, [r3, #0]
		DMA_1->Channel[channel].CCR |= WriteValue( ch_cfg->MSIZE   , MSIZE_BIT_10_11 );
 80011da:	4973      	ldr	r1, [pc, #460]	; (80013a8 <DMA_Start+0x2a0>)
 80011dc:	7bfa      	ldrb	r2, [r7, #15]
 80011de:	4613      	mov	r3, r2
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	4413      	add	r3, r2
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	440b      	add	r3, r1
 80011e8:	3308      	adds	r3, #8
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	687a      	ldr	r2, [r7, #4]
 80011ee:	7b92      	ldrb	r2, [r2, #14]
 80011f0:	0292      	lsls	r2, r2, #10
 80011f2:	4611      	mov	r1, r2
 80011f4:	486c      	ldr	r0, [pc, #432]	; (80013a8 <DMA_Start+0x2a0>)
 80011f6:	7bfa      	ldrb	r2, [r7, #15]
 80011f8:	4319      	orrs	r1, r3
 80011fa:	4613      	mov	r3, r2
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	4413      	add	r3, r2
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	4403      	add	r3, r0
 8001204:	3308      	adds	r3, #8
 8001206:	6019      	str	r1, [r3, #0]
		DMA_1->Channel[channel].CCR |= WriteValue( ch_cfg->PSIZE   , PSIZE_BIT_8_9 );
 8001208:	4967      	ldr	r1, [pc, #412]	; (80013a8 <DMA_Start+0x2a0>)
 800120a:	7bfa      	ldrb	r2, [r7, #15]
 800120c:	4613      	mov	r3, r2
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	4413      	add	r3, r2
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	440b      	add	r3, r1
 8001216:	3308      	adds	r3, #8
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	687a      	ldr	r2, [r7, #4]
 800121c:	7bd2      	ldrb	r2, [r2, #15]
 800121e:	0212      	lsls	r2, r2, #8
 8001220:	4611      	mov	r1, r2
 8001222:	4861      	ldr	r0, [pc, #388]	; (80013a8 <DMA_Start+0x2a0>)
 8001224:	7bfa      	ldrb	r2, [r7, #15]
 8001226:	4319      	orrs	r1, r3
 8001228:	4613      	mov	r3, r2
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	4413      	add	r3, r2
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	4403      	add	r3, r0
 8001232:	3308      	adds	r3, #8
 8001234:	6019      	str	r1, [r3, #0]
		DMA_1->Channel[channel].CCR |= WriteValue( ch_cfg->MINC    , MINC_BIT_7 );
 8001236:	495c      	ldr	r1, [pc, #368]	; (80013a8 <DMA_Start+0x2a0>)
 8001238:	7bfa      	ldrb	r2, [r7, #15]
 800123a:	4613      	mov	r3, r2
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	4413      	add	r3, r2
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	440b      	add	r3, r1
 8001244:	3308      	adds	r3, #8
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	687a      	ldr	r2, [r7, #4]
 800124a:	7c12      	ldrb	r2, [r2, #16]
 800124c:	01d2      	lsls	r2, r2, #7
 800124e:	4611      	mov	r1, r2
 8001250:	4855      	ldr	r0, [pc, #340]	; (80013a8 <DMA_Start+0x2a0>)
 8001252:	7bfa      	ldrb	r2, [r7, #15]
 8001254:	4319      	orrs	r1, r3
 8001256:	4613      	mov	r3, r2
 8001258:	009b      	lsls	r3, r3, #2
 800125a:	4413      	add	r3, r2
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	4403      	add	r3, r0
 8001260:	3308      	adds	r3, #8
 8001262:	6019      	str	r1, [r3, #0]
		DMA_1->Channel[channel].CCR |= WriteValue( ch_cfg->PINC    , PINC_BIT_6 );
 8001264:	4950      	ldr	r1, [pc, #320]	; (80013a8 <DMA_Start+0x2a0>)
 8001266:	7bfa      	ldrb	r2, [r7, #15]
 8001268:	4613      	mov	r3, r2
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	4413      	add	r3, r2
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	440b      	add	r3, r1
 8001272:	3308      	adds	r3, #8
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	7c52      	ldrb	r2, [r2, #17]
 800127a:	0192      	lsls	r2, r2, #6
 800127c:	4611      	mov	r1, r2
 800127e:	484a      	ldr	r0, [pc, #296]	; (80013a8 <DMA_Start+0x2a0>)
 8001280:	7bfa      	ldrb	r2, [r7, #15]
 8001282:	4319      	orrs	r1, r3
 8001284:	4613      	mov	r3, r2
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	4413      	add	r3, r2
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	4403      	add	r3, r0
 800128e:	3308      	adds	r3, #8
 8001290:	6019      	str	r1, [r3, #0]
		DMA_1->Channel[channel].CCR |= WriteValue( ch_cfg->CIRC    , CIRC_BIT_5 );
 8001292:	4945      	ldr	r1, [pc, #276]	; (80013a8 <DMA_Start+0x2a0>)
 8001294:	7bfa      	ldrb	r2, [r7, #15]
 8001296:	4613      	mov	r3, r2
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	4413      	add	r3, r2
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	440b      	add	r3, r1
 80012a0:	3308      	adds	r3, #8
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	687a      	ldr	r2, [r7, #4]
 80012a6:	7c92      	ldrb	r2, [r2, #18]
 80012a8:	0152      	lsls	r2, r2, #5
 80012aa:	4611      	mov	r1, r2
 80012ac:	483e      	ldr	r0, [pc, #248]	; (80013a8 <DMA_Start+0x2a0>)
 80012ae:	7bfa      	ldrb	r2, [r7, #15]
 80012b0:	4319      	orrs	r1, r3
 80012b2:	4613      	mov	r3, r2
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	4413      	add	r3, r2
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	4403      	add	r3, r0
 80012bc:	3308      	adds	r3, #8
 80012be:	6019      	str	r1, [r3, #0]
		DMA_1->Channel[channel].CCR |= WriteValue( ch_cfg->DIR     , DIR_BIT_4 );
 80012c0:	4939      	ldr	r1, [pc, #228]	; (80013a8 <DMA_Start+0x2a0>)
 80012c2:	7bfa      	ldrb	r2, [r7, #15]
 80012c4:	4613      	mov	r3, r2
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	4413      	add	r3, r2
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	440b      	add	r3, r1
 80012ce:	3308      	adds	r3, #8
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	687a      	ldr	r2, [r7, #4]
 80012d4:	7cd2      	ldrb	r2, [r2, #19]
 80012d6:	0112      	lsls	r2, r2, #4
 80012d8:	4611      	mov	r1, r2
 80012da:	4833      	ldr	r0, [pc, #204]	; (80013a8 <DMA_Start+0x2a0>)
 80012dc:	7bfa      	ldrb	r2, [r7, #15]
 80012de:	4319      	orrs	r1, r3
 80012e0:	4613      	mov	r3, r2
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	4413      	add	r3, r2
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	4403      	add	r3, r0
 80012ea:	3308      	adds	r3, #8
 80012ec:	6019      	str	r1, [r3, #0]
		DMA_1->Channel[channel].CCR |= WriteValue( ch_cfg->TEIE     , TEIE_BIT_3 );
 80012ee:	492e      	ldr	r1, [pc, #184]	; (80013a8 <DMA_Start+0x2a0>)
 80012f0:	7bfa      	ldrb	r2, [r7, #15]
 80012f2:	4613      	mov	r3, r2
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	4413      	add	r3, r2
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	440b      	add	r3, r1
 80012fc:	3308      	adds	r3, #8
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	687a      	ldr	r2, [r7, #4]
 8001302:	7d12      	ldrb	r2, [r2, #20]
 8001304:	00d2      	lsls	r2, r2, #3
 8001306:	4611      	mov	r1, r2
 8001308:	4827      	ldr	r0, [pc, #156]	; (80013a8 <DMA_Start+0x2a0>)
 800130a:	7bfa      	ldrb	r2, [r7, #15]
 800130c:	4319      	orrs	r1, r3
 800130e:	4613      	mov	r3, r2
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	4413      	add	r3, r2
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	4403      	add	r3, r0
 8001318:	3308      	adds	r3, #8
 800131a:	6019      	str	r1, [r3, #0]
		DMA_1->Channel[channel].CCR |= WriteValue( ch_cfg->HTIE     , HTIE_BIT_2 );
 800131c:	4922      	ldr	r1, [pc, #136]	; (80013a8 <DMA_Start+0x2a0>)
 800131e:	7bfa      	ldrb	r2, [r7, #15]
 8001320:	4613      	mov	r3, r2
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	4413      	add	r3, r2
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	440b      	add	r3, r1
 800132a:	3308      	adds	r3, #8
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	7d52      	ldrb	r2, [r2, #21]
 8001332:	0092      	lsls	r2, r2, #2
 8001334:	4611      	mov	r1, r2
 8001336:	481c      	ldr	r0, [pc, #112]	; (80013a8 <DMA_Start+0x2a0>)
 8001338:	7bfa      	ldrb	r2, [r7, #15]
 800133a:	4319      	orrs	r1, r3
 800133c:	4613      	mov	r3, r2
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	4413      	add	r3, r2
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	4403      	add	r3, r0
 8001346:	3308      	adds	r3, #8
 8001348:	6019      	str	r1, [r3, #0]
		DMA_1->Channel[channel].CCR |= WriteValue( ch_cfg->TCIE     , TCIE_BIT_1 );
 800134a:	4917      	ldr	r1, [pc, #92]	; (80013a8 <DMA_Start+0x2a0>)
 800134c:	7bfa      	ldrb	r2, [r7, #15]
 800134e:	4613      	mov	r3, r2
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	4413      	add	r3, r2
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	440b      	add	r3, r1
 8001358:	3308      	adds	r3, #8
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	687a      	ldr	r2, [r7, #4]
 800135e:	7d92      	ldrb	r2, [r2, #22]
 8001360:	0052      	lsls	r2, r2, #1
 8001362:	4611      	mov	r1, r2
 8001364:	4810      	ldr	r0, [pc, #64]	; (80013a8 <DMA_Start+0x2a0>)
 8001366:	7bfa      	ldrb	r2, [r7, #15]
 8001368:	4319      	orrs	r1, r3
 800136a:	4613      	mov	r3, r2
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	4413      	add	r3, r2
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	4403      	add	r3, r0
 8001374:	3308      	adds	r3, #8
 8001376:	6019      	str	r1, [r3, #0]
		DMA_1->Channel[channel].CCR |= WriteValue( ch_cfg->EN      , EN_BIT_0 );
 8001378:	490b      	ldr	r1, [pc, #44]	; (80013a8 <DMA_Start+0x2a0>)
 800137a:	7bfa      	ldrb	r2, [r7, #15]
 800137c:	4613      	mov	r3, r2
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	4413      	add	r3, r2
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	440b      	add	r3, r1
 8001386:	3308      	adds	r3, #8
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	687a      	ldr	r2, [r7, #4]
 800138c:	7dd2      	ldrb	r2, [r2, #23]
 800138e:	4611      	mov	r1, r2
 8001390:	4805      	ldr	r0, [pc, #20]	; (80013a8 <DMA_Start+0x2a0>)
 8001392:	7bfa      	ldrb	r2, [r7, #15]
 8001394:	4319      	orrs	r1, r3
 8001396:	4613      	mov	r3, r2
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	4413      	add	r3, r2
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	4403      	add	r3, r0
 80013a0:	3308      	adds	r3, #8
 80013a2:	6019      	str	r1, [r3, #0]
		break;
 80013a4:	e142      	b.n	800162c <DMA_Start+0x524>
 80013a6:	bf00      	nop
 80013a8:	40020000 	.word	0x40020000
		DMA_2->Channel[channel].CCR = 0x0000;
 80013ac:	49a2      	ldr	r1, [pc, #648]	; (8001638 <DMA_Start+0x530>)
 80013ae:	7bfa      	ldrb	r2, [r7, #15]
 80013b0:	4613      	mov	r3, r2
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	4413      	add	r3, r2
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	440b      	add	r3, r1
 80013ba:	3308      	adds	r3, #8
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
		DMA_2->Channel[channel].CCR |= WriteValue( ch_cfg->MEM2MEM , MEM2MEM_BIT_14 );
 80013c0:	499d      	ldr	r1, [pc, #628]	; (8001638 <DMA_Start+0x530>)
 80013c2:	7bfa      	ldrb	r2, [r7, #15]
 80013c4:	4613      	mov	r3, r2
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	4413      	add	r3, r2
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	440b      	add	r3, r1
 80013ce:	3308      	adds	r3, #8
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	687a      	ldr	r2, [r7, #4]
 80013d4:	7b12      	ldrb	r2, [r2, #12]
 80013d6:	0392      	lsls	r2, r2, #14
 80013d8:	4611      	mov	r1, r2
 80013da:	4897      	ldr	r0, [pc, #604]	; (8001638 <DMA_Start+0x530>)
 80013dc:	7bfa      	ldrb	r2, [r7, #15]
 80013de:	4319      	orrs	r1, r3
 80013e0:	4613      	mov	r3, r2
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	4413      	add	r3, r2
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	4403      	add	r3, r0
 80013ea:	3308      	adds	r3, #8
 80013ec:	6019      	str	r1, [r3, #0]
		DMA_2->Channel[channel].CCR |= WriteValue( ch_cfg->PL      , PL_BIT_12_13 );
 80013ee:	4992      	ldr	r1, [pc, #584]	; (8001638 <DMA_Start+0x530>)
 80013f0:	7bfa      	ldrb	r2, [r7, #15]
 80013f2:	4613      	mov	r3, r2
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	4413      	add	r3, r2
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	440b      	add	r3, r1
 80013fc:	3308      	adds	r3, #8
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	687a      	ldr	r2, [r7, #4]
 8001402:	7b52      	ldrb	r2, [r2, #13]
 8001404:	0312      	lsls	r2, r2, #12
 8001406:	4611      	mov	r1, r2
 8001408:	488b      	ldr	r0, [pc, #556]	; (8001638 <DMA_Start+0x530>)
 800140a:	7bfa      	ldrb	r2, [r7, #15]
 800140c:	4319      	orrs	r1, r3
 800140e:	4613      	mov	r3, r2
 8001410:	009b      	lsls	r3, r3, #2
 8001412:	4413      	add	r3, r2
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	4403      	add	r3, r0
 8001418:	3308      	adds	r3, #8
 800141a:	6019      	str	r1, [r3, #0]
		DMA_2->Channel[channel].CCR |= WriteValue( ch_cfg->MSIZE   , MSIZE_BIT_10_11 );
 800141c:	4986      	ldr	r1, [pc, #536]	; (8001638 <DMA_Start+0x530>)
 800141e:	7bfa      	ldrb	r2, [r7, #15]
 8001420:	4613      	mov	r3, r2
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	4413      	add	r3, r2
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	440b      	add	r3, r1
 800142a:	3308      	adds	r3, #8
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	687a      	ldr	r2, [r7, #4]
 8001430:	7b92      	ldrb	r2, [r2, #14]
 8001432:	0292      	lsls	r2, r2, #10
 8001434:	4611      	mov	r1, r2
 8001436:	4880      	ldr	r0, [pc, #512]	; (8001638 <DMA_Start+0x530>)
 8001438:	7bfa      	ldrb	r2, [r7, #15]
 800143a:	4319      	orrs	r1, r3
 800143c:	4613      	mov	r3, r2
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	4413      	add	r3, r2
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	4403      	add	r3, r0
 8001446:	3308      	adds	r3, #8
 8001448:	6019      	str	r1, [r3, #0]
		DMA_2->Channel[channel].CCR |= WriteValue( ch_cfg->PSIZE   , PSIZE_BIT_8_9 );
 800144a:	497b      	ldr	r1, [pc, #492]	; (8001638 <DMA_Start+0x530>)
 800144c:	7bfa      	ldrb	r2, [r7, #15]
 800144e:	4613      	mov	r3, r2
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	4413      	add	r3, r2
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	440b      	add	r3, r1
 8001458:	3308      	adds	r3, #8
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	687a      	ldr	r2, [r7, #4]
 800145e:	7bd2      	ldrb	r2, [r2, #15]
 8001460:	0212      	lsls	r2, r2, #8
 8001462:	4611      	mov	r1, r2
 8001464:	4874      	ldr	r0, [pc, #464]	; (8001638 <DMA_Start+0x530>)
 8001466:	7bfa      	ldrb	r2, [r7, #15]
 8001468:	4319      	orrs	r1, r3
 800146a:	4613      	mov	r3, r2
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	4413      	add	r3, r2
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	4403      	add	r3, r0
 8001474:	3308      	adds	r3, #8
 8001476:	6019      	str	r1, [r3, #0]
		DMA_2->Channel[channel].CCR |= WriteValue( ch_cfg->MINC    , MINC_BIT_7 );
 8001478:	496f      	ldr	r1, [pc, #444]	; (8001638 <DMA_Start+0x530>)
 800147a:	7bfa      	ldrb	r2, [r7, #15]
 800147c:	4613      	mov	r3, r2
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	4413      	add	r3, r2
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	440b      	add	r3, r1
 8001486:	3308      	adds	r3, #8
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	687a      	ldr	r2, [r7, #4]
 800148c:	7c12      	ldrb	r2, [r2, #16]
 800148e:	01d2      	lsls	r2, r2, #7
 8001490:	4611      	mov	r1, r2
 8001492:	4869      	ldr	r0, [pc, #420]	; (8001638 <DMA_Start+0x530>)
 8001494:	7bfa      	ldrb	r2, [r7, #15]
 8001496:	4319      	orrs	r1, r3
 8001498:	4613      	mov	r3, r2
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	4413      	add	r3, r2
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	4403      	add	r3, r0
 80014a2:	3308      	adds	r3, #8
 80014a4:	6019      	str	r1, [r3, #0]
		DMA_2->Channel[channel].CCR |= WriteValue( ch_cfg->PINC    , PINC_BIT_6 );
 80014a6:	4964      	ldr	r1, [pc, #400]	; (8001638 <DMA_Start+0x530>)
 80014a8:	7bfa      	ldrb	r2, [r7, #15]
 80014aa:	4613      	mov	r3, r2
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	4413      	add	r3, r2
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	440b      	add	r3, r1
 80014b4:	3308      	adds	r3, #8
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	687a      	ldr	r2, [r7, #4]
 80014ba:	7c52      	ldrb	r2, [r2, #17]
 80014bc:	0192      	lsls	r2, r2, #6
 80014be:	4611      	mov	r1, r2
 80014c0:	485d      	ldr	r0, [pc, #372]	; (8001638 <DMA_Start+0x530>)
 80014c2:	7bfa      	ldrb	r2, [r7, #15]
 80014c4:	4319      	orrs	r1, r3
 80014c6:	4613      	mov	r3, r2
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	4413      	add	r3, r2
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	4403      	add	r3, r0
 80014d0:	3308      	adds	r3, #8
 80014d2:	6019      	str	r1, [r3, #0]
		DMA_2->Channel[channel].CCR |= WriteValue( ch_cfg->CIRC    , CIRC_BIT_5 );
 80014d4:	4958      	ldr	r1, [pc, #352]	; (8001638 <DMA_Start+0x530>)
 80014d6:	7bfa      	ldrb	r2, [r7, #15]
 80014d8:	4613      	mov	r3, r2
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	4413      	add	r3, r2
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	440b      	add	r3, r1
 80014e2:	3308      	adds	r3, #8
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	687a      	ldr	r2, [r7, #4]
 80014e8:	7c92      	ldrb	r2, [r2, #18]
 80014ea:	0152      	lsls	r2, r2, #5
 80014ec:	4611      	mov	r1, r2
 80014ee:	4852      	ldr	r0, [pc, #328]	; (8001638 <DMA_Start+0x530>)
 80014f0:	7bfa      	ldrb	r2, [r7, #15]
 80014f2:	4319      	orrs	r1, r3
 80014f4:	4613      	mov	r3, r2
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	4413      	add	r3, r2
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	4403      	add	r3, r0
 80014fe:	3308      	adds	r3, #8
 8001500:	6019      	str	r1, [r3, #0]
		DMA_2->Channel[channel].CCR |= WriteValue( ch_cfg->DIR     , DIR_BIT_4 );
 8001502:	494d      	ldr	r1, [pc, #308]	; (8001638 <DMA_Start+0x530>)
 8001504:	7bfa      	ldrb	r2, [r7, #15]
 8001506:	4613      	mov	r3, r2
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	4413      	add	r3, r2
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	440b      	add	r3, r1
 8001510:	3308      	adds	r3, #8
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	687a      	ldr	r2, [r7, #4]
 8001516:	7cd2      	ldrb	r2, [r2, #19]
 8001518:	0112      	lsls	r2, r2, #4
 800151a:	4611      	mov	r1, r2
 800151c:	4846      	ldr	r0, [pc, #280]	; (8001638 <DMA_Start+0x530>)
 800151e:	7bfa      	ldrb	r2, [r7, #15]
 8001520:	4319      	orrs	r1, r3
 8001522:	4613      	mov	r3, r2
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	4413      	add	r3, r2
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	4403      	add	r3, r0
 800152c:	3308      	adds	r3, #8
 800152e:	6019      	str	r1, [r3, #0]
		DMA_2->Channel[channel].CCR |= WriteValue( ch_cfg->TEIE     , TEIE_BIT_3 );
 8001530:	4941      	ldr	r1, [pc, #260]	; (8001638 <DMA_Start+0x530>)
 8001532:	7bfa      	ldrb	r2, [r7, #15]
 8001534:	4613      	mov	r3, r2
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	4413      	add	r3, r2
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	440b      	add	r3, r1
 800153e:	3308      	adds	r3, #8
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	7d12      	ldrb	r2, [r2, #20]
 8001546:	00d2      	lsls	r2, r2, #3
 8001548:	4611      	mov	r1, r2
 800154a:	483b      	ldr	r0, [pc, #236]	; (8001638 <DMA_Start+0x530>)
 800154c:	7bfa      	ldrb	r2, [r7, #15]
 800154e:	4319      	orrs	r1, r3
 8001550:	4613      	mov	r3, r2
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	4413      	add	r3, r2
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	4403      	add	r3, r0
 800155a:	3308      	adds	r3, #8
 800155c:	6019      	str	r1, [r3, #0]
		DMA_2->Channel[channel].CCR |= WriteValue( ch_cfg->HTIE     , HTIE_BIT_2 );
 800155e:	4936      	ldr	r1, [pc, #216]	; (8001638 <DMA_Start+0x530>)
 8001560:	7bfa      	ldrb	r2, [r7, #15]
 8001562:	4613      	mov	r3, r2
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	4413      	add	r3, r2
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	440b      	add	r3, r1
 800156c:	3308      	adds	r3, #8
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	687a      	ldr	r2, [r7, #4]
 8001572:	7d52      	ldrb	r2, [r2, #21]
 8001574:	0092      	lsls	r2, r2, #2
 8001576:	4611      	mov	r1, r2
 8001578:	482f      	ldr	r0, [pc, #188]	; (8001638 <DMA_Start+0x530>)
 800157a:	7bfa      	ldrb	r2, [r7, #15]
 800157c:	4319      	orrs	r1, r3
 800157e:	4613      	mov	r3, r2
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	4413      	add	r3, r2
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	4403      	add	r3, r0
 8001588:	3308      	adds	r3, #8
 800158a:	6019      	str	r1, [r3, #0]
		DMA_2->Channel[channel].CCR |= WriteValue( ch_cfg->TCIE     , TCIE_BIT_1 );
 800158c:	492a      	ldr	r1, [pc, #168]	; (8001638 <DMA_Start+0x530>)
 800158e:	7bfa      	ldrb	r2, [r7, #15]
 8001590:	4613      	mov	r3, r2
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	4413      	add	r3, r2
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	440b      	add	r3, r1
 800159a:	3308      	adds	r3, #8
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	7d92      	ldrb	r2, [r2, #22]
 80015a2:	0052      	lsls	r2, r2, #1
 80015a4:	4611      	mov	r1, r2
 80015a6:	4824      	ldr	r0, [pc, #144]	; (8001638 <DMA_Start+0x530>)
 80015a8:	7bfa      	ldrb	r2, [r7, #15]
 80015aa:	4319      	orrs	r1, r3
 80015ac:	4613      	mov	r3, r2
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	4413      	add	r3, r2
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	4403      	add	r3, r0
 80015b6:	3308      	adds	r3, #8
 80015b8:	6019      	str	r1, [r3, #0]
		DMA_2->Channel[channel].CNDTR = ch_cfg->Block_Size;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	885b      	ldrh	r3, [r3, #2]
 80015be:	491e      	ldr	r1, [pc, #120]	; (8001638 <DMA_Start+0x530>)
 80015c0:	7bfa      	ldrb	r2, [r7, #15]
 80015c2:	4618      	mov	r0, r3
 80015c4:	4613      	mov	r3, r2
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	4413      	add	r3, r2
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	440b      	add	r3, r1
 80015ce:	330c      	adds	r3, #12
 80015d0:	6018      	str	r0, [r3, #0]
		DMA_2->Channel[channel].CPAR  = ch_cfg->Source_Address;
 80015d2:	4819      	ldr	r0, [pc, #100]	; (8001638 <DMA_Start+0x530>)
 80015d4:	7bfa      	ldrb	r2, [r7, #15]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6859      	ldr	r1, [r3, #4]
 80015da:	4613      	mov	r3, r2
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	4413      	add	r3, r2
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	4403      	add	r3, r0
 80015e4:	3310      	adds	r3, #16
 80015e6:	6019      	str	r1, [r3, #0]
		DMA_2->Channel[channel].CMAR  = ch_cfg->Dest_Address;
 80015e8:	4813      	ldr	r0, [pc, #76]	; (8001638 <DMA_Start+0x530>)
 80015ea:	7bfa      	ldrb	r2, [r7, #15]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6899      	ldr	r1, [r3, #8]
 80015f0:	4613      	mov	r3, r2
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	4413      	add	r3, r2
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	4403      	add	r3, r0
 80015fa:	3314      	adds	r3, #20
 80015fc:	6019      	str	r1, [r3, #0]
		DMA_2->Channel[channel].CCR |= WriteValue( ch_cfg->EN      , EN_BIT_0 );
 80015fe:	490e      	ldr	r1, [pc, #56]	; (8001638 <DMA_Start+0x530>)
 8001600:	7bfa      	ldrb	r2, [r7, #15]
 8001602:	4613      	mov	r3, r2
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	4413      	add	r3, r2
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	440b      	add	r3, r1
 800160c:	3308      	adds	r3, #8
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	687a      	ldr	r2, [r7, #4]
 8001612:	7dd2      	ldrb	r2, [r2, #23]
 8001614:	4611      	mov	r1, r2
 8001616:	4808      	ldr	r0, [pc, #32]	; (8001638 <DMA_Start+0x530>)
 8001618:	7bfa      	ldrb	r2, [r7, #15]
 800161a:	4319      	orrs	r1, r3
 800161c:	4613      	mov	r3, r2
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	4413      	add	r3, r2
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	4403      	add	r3, r0
 8001626:	3308      	adds	r3, #8
 8001628:	6019      	str	r1, [r3, #0]
		break;
 800162a:	bf00      	nop
}
 800162c:	bf00      	nop
 800162e:	3714      	adds	r7, #20
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr
 8001638:	40020400 	.word	0x40020400

0800163c <ICU_Init>:




void ICU_Init(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
	}
#endif

	  /************   Channels 1,2,3 Tim 8 as ICU  ***************/

	  TIM8_CCMR1_REG |= WriteValue(1,CC1S_BIT_0_1); //01: CC1 channel is configured as input, IC1 is mapped on TI1
 8001640:	4b1f      	ldr	r3, [pc, #124]	; (80016c0 <ICU_Init+0x84>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a1e      	ldr	r2, [pc, #120]	; (80016c0 <ICU_Init+0x84>)
 8001646:	f043 0301 	orr.w	r3, r3, #1
 800164a:	6013      	str	r3, [r2, #0]
	  TIM8_CCMR1_REG |= WriteValue(1,CC2S_BIT_8_9); //01: CC2 channel is configured as input, IC2 is mapped on TI2
 800164c:	4b1c      	ldr	r3, [pc, #112]	; (80016c0 <ICU_Init+0x84>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a1b      	ldr	r2, [pc, #108]	; (80016c0 <ICU_Init+0x84>)
 8001652:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001656:	6013      	str	r3, [r2, #0]
	  TIM8_CCMR2_REG |= WriteValue(1,CC3S_BIT_0_1); //01: CC3 channel is configured as input, IC3 is mapped on TI3
 8001658:	4b1a      	ldr	r3, [pc, #104]	; (80016c4 <ICU_Init+0x88>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a19      	ldr	r2, [pc, #100]	; (80016c4 <ICU_Init+0x88>)
 800165e:	f043 0301 	orr.w	r3, r3, #1
 8001662:	6013      	str	r3, [r2, #0]

	  /************   Channels 4,5,6 Tim 1 as ICU  ***************/

	  TIM1_CCMR1_REG |= WriteValue(1,CC1S_BIT_0_1);   //01: CC1 channel is configured as input, IC1 is mapped on TI1
 8001664:	4b18      	ldr	r3, [pc, #96]	; (80016c8 <ICU_Init+0x8c>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a17      	ldr	r2, [pc, #92]	; (80016c8 <ICU_Init+0x8c>)
 800166a:	f043 0301 	orr.w	r3, r3, #1
 800166e:	6013      	str	r3, [r2, #0]
	  TIM1_CCMR1_REG |= WriteValue(1,CC2S_BIT_8_9);   //01: CC2 channel is configured as input, IC2 is mapped on TI2
 8001670:	4b15      	ldr	r3, [pc, #84]	; (80016c8 <ICU_Init+0x8c>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a14      	ldr	r2, [pc, #80]	; (80016c8 <ICU_Init+0x8c>)
 8001676:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800167a:	6013      	str	r3, [r2, #0]
	  TIM1_CCMR2_REG |= WriteValue(1,CC3S_BIT_0_1);   //01: CC3 channel is configured as input, IC3 is mapped on TI3
 800167c:	4b13      	ldr	r3, [pc, #76]	; (80016cc <ICU_Init+0x90>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a12      	ldr	r2, [pc, #72]	; (80016cc <ICU_Init+0x90>)
 8001682:	f043 0301 	orr.w	r3, r3, #1
 8001686:	6013      	str	r3, [r2, #0]

	  /*************  Enable Tim8 with 8 Prescaler so tick time is 1 micro sec Sys Clk is 8 M ====> HSI *******/

	  TIM8_PSC_REG = 7;
 8001688:	4b11      	ldr	r3, [pc, #68]	; (80016d0 <ICU_Init+0x94>)
 800168a:	2207      	movs	r2, #7
 800168c:	801a      	strh	r2, [r3, #0]
	  SET_BIT(TIM8_CR1_REG,CEN_BIT_0);
 800168e:	4b11      	ldr	r3, [pc, #68]	; (80016d4 <ICU_Init+0x98>)
 8001690:	881b      	ldrh	r3, [r3, #0]
 8001692:	b29b      	uxth	r3, r3
 8001694:	4a0f      	ldr	r2, [pc, #60]	; (80016d4 <ICU_Init+0x98>)
 8001696:	f043 0301 	orr.w	r3, r3, #1
 800169a:	b29b      	uxth	r3, r3
 800169c:	8013      	strh	r3, [r2, #0]
	  /*************  Enable Tim1 with 8 Prescaler so tick time is 1 micro sec Sys Clk is 8 M ====> HSI *******/

      TIM1_PSC_REG = 7;
 800169e:	4b0e      	ldr	r3, [pc, #56]	; (80016d8 <ICU_Init+0x9c>)
 80016a0:	2207      	movs	r2, #7
 80016a2:	801a      	strh	r2, [r3, #0]
      SET_BIT(TIM1_CR1_REG,CEN_BIT_0);
 80016a4:	4b0d      	ldr	r3, [pc, #52]	; (80016dc <ICU_Init+0xa0>)
 80016a6:	881b      	ldrh	r3, [r3, #0]
 80016a8:	b29b      	uxth	r3, r3
 80016aa:	4a0c      	ldr	r2, [pc, #48]	; (80016dc <ICU_Init+0xa0>)
 80016ac:	f043 0301 	orr.w	r3, r3, #1
 80016b0:	b29b      	uxth	r3, r3
 80016b2:	8013      	strh	r3, [r2, #0]

}
 80016b4:	bf00      	nop
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	40013418 	.word	0x40013418
 80016c4:	4001341c 	.word	0x4001341c
 80016c8:	40012c18 	.word	0x40012c18
 80016cc:	40012c1c 	.word	0x40012c1c
 80016d0:	40013428 	.word	0x40013428
 80016d4:	40013400 	.word	0x40013400
 80016d8:	40012c28 	.word	0x40012c28
 80016dc:	40012c00 	.word	0x40012c00

080016e0 <ICU_Control>:

void ICU_Control(ICU_Channel channel ,  u8 control)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	4603      	mov	r3, r0
 80016e8:	460a      	mov	r2, r1
 80016ea:	71fb      	strb	r3, [r7, #7]
 80016ec:	4613      	mov	r3, r2
 80016ee:	71bb      	strb	r3, [r7, #6]
	switch(control)
 80016f0:	79bb      	ldrb	r3, [r7, #6]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d002      	beq.n	80016fc <ICU_Control+0x1c>
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d01c      	beq.n	8001734 <ICU_Control+0x54>
	break;


	}

}
 80016fa:	e039      	b.n	8001770 <ICU_Control+0x90>
		if( channel < channel_4 )
 80016fc:	79fb      	ldrb	r3, [r7, #7]
 80016fe:	2b02      	cmp	r3, #2
 8001700:	d80b      	bhi.n	800171a <ICU_Control+0x3a>
			SET_BIT(TIM8_CCER_REG , ( channel * 4 ) );
 8001702:	4b1e      	ldr	r3, [pc, #120]	; (800177c <ICU_Control+0x9c>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	79fa      	ldrb	r2, [r7, #7]
 8001708:	0092      	lsls	r2, r2, #2
 800170a:	2101      	movs	r1, #1
 800170c:	fa01 f202 	lsl.w	r2, r1, r2
 8001710:	4611      	mov	r1, r2
 8001712:	4a1a      	ldr	r2, [pc, #104]	; (800177c <ICU_Control+0x9c>)
 8001714:	430b      	orrs	r3, r1
 8001716:	6013      	str	r3, [r2, #0]
	break;
 8001718:	e02a      	b.n	8001770 <ICU_Control+0x90>
			SET_BIT(TIM1_CCER_REG , ( ( channel - 3 ) * 4 ) );
 800171a:	4b19      	ldr	r3, [pc, #100]	; (8001780 <ICU_Control+0xa0>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	79fa      	ldrb	r2, [r7, #7]
 8001720:	3a03      	subs	r2, #3
 8001722:	0092      	lsls	r2, r2, #2
 8001724:	2101      	movs	r1, #1
 8001726:	fa01 f202 	lsl.w	r2, r1, r2
 800172a:	4611      	mov	r1, r2
 800172c:	4a14      	ldr	r2, [pc, #80]	; (8001780 <ICU_Control+0xa0>)
 800172e:	430b      	orrs	r3, r1
 8001730:	6013      	str	r3, [r2, #0]
	break;
 8001732:	e01d      	b.n	8001770 <ICU_Control+0x90>
		if( channel < channel_4 )
 8001734:	79fb      	ldrb	r3, [r7, #7]
 8001736:	2b02      	cmp	r3, #2
 8001738:	d80c      	bhi.n	8001754 <ICU_Control+0x74>
			CLEAR_BIT(TIM8_CCER_REG , ( channel * 4 ) );
 800173a:	4b10      	ldr	r3, [pc, #64]	; (800177c <ICU_Control+0x9c>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	79fa      	ldrb	r2, [r7, #7]
 8001740:	0092      	lsls	r2, r2, #2
 8001742:	2101      	movs	r1, #1
 8001744:	fa01 f202 	lsl.w	r2, r1, r2
 8001748:	43d2      	mvns	r2, r2
 800174a:	4611      	mov	r1, r2
 800174c:	4a0b      	ldr	r2, [pc, #44]	; (800177c <ICU_Control+0x9c>)
 800174e:	400b      	ands	r3, r1
 8001750:	6013      	str	r3, [r2, #0]
	break;
 8001752:	e00c      	b.n	800176e <ICU_Control+0x8e>
			CLEAR_BIT(TIM1_CCER_REG , ( ( channel - 3 ) * 4 ) );
 8001754:	4b0a      	ldr	r3, [pc, #40]	; (8001780 <ICU_Control+0xa0>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	79fa      	ldrb	r2, [r7, #7]
 800175a:	3a03      	subs	r2, #3
 800175c:	0092      	lsls	r2, r2, #2
 800175e:	2101      	movs	r1, #1
 8001760:	fa01 f202 	lsl.w	r2, r1, r2
 8001764:	43d2      	mvns	r2, r2
 8001766:	4611      	mov	r1, r2
 8001768:	4a05      	ldr	r2, [pc, #20]	; (8001780 <ICU_Control+0xa0>)
 800176a:	400b      	ands	r3, r1
 800176c:	6013      	str	r3, [r2, #0]
	break;
 800176e:	bf00      	nop
}
 8001770:	bf00      	nop
 8001772:	370c      	adds	r7, #12
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr
 800177c:	40013420 	.word	0x40013420
 8001780:	40012c20 	.word	0x40012c20

08001784 <ICU_SelectEdge>:


void ICU_SelectEdge(ICU_Channel channel,ICU_Edge edge)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	4603      	mov	r3, r0
 800178c:	460a      	mov	r2, r1
 800178e:	71fb      	strb	r3, [r7, #7]
 8001790:	4613      	mov	r3, r2
 8001792:	71bb      	strb	r3, [r7, #6]
	switch(channel)
 8001794:	79fb      	ldrb	r3, [r7, #7]
 8001796:	2b05      	cmp	r3, #5
 8001798:	f200 811e 	bhi.w	80019d8 <ICU_SelectEdge+0x254>
 800179c:	a201      	add	r2, pc, #4	; (adr r2, 80017a4 <ICU_SelectEdge+0x20>)
 800179e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017a2:	bf00      	nop
 80017a4:	080017bd 	.word	0x080017bd
 80017a8:	08001817 	.word	0x08001817
 80017ac:	08001871 	.word	0x08001871
 80017b0:	080018cb 	.word	0x080018cb
 80017b4:	08001925 	.word	0x08001925
 80017b8:	0800197f 	.word	0x0800197f
	{
	  case channel_1:
		  	   if( edge == RISING )
 80017bc:	79bb      	ldrb	r3, [r7, #6]
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d10c      	bne.n	80017dc <ICU_SelectEdge+0x58>
		  	  	{
		  		      CLEAR_BIT(TIM8_CCER_REG,CC1P_BIT_1);
 80017c2:	4b88      	ldr	r3, [pc, #544]	; (80019e4 <ICU_SelectEdge+0x260>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a87      	ldr	r2, [pc, #540]	; (80019e4 <ICU_SelectEdge+0x260>)
 80017c8:	f023 0302 	bic.w	r3, r3, #2
 80017cc:	6013      	str	r3, [r2, #0]
		  		      CLEAR_BIT(TIM8_CCER_REG,CC1NP_BIT_3);
 80017ce:	4b85      	ldr	r3, [pc, #532]	; (80019e4 <ICU_SelectEdge+0x260>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a84      	ldr	r2, [pc, #528]	; (80019e4 <ICU_SelectEdge+0x260>)
 80017d4:	f023 0308 	bic.w	r3, r3, #8
 80017d8:	6013      	str	r3, [r2, #0]
		  	  	else
		  	  	{
		  	  		 SET_BIT(TIM8_CCER_REG,CC1P_BIT_1);
		  	  		 SET_BIT(TIM8_CCER_REG,CC1NP_BIT_3);
		  	  	}
	  break;
 80017da:	e0fd      	b.n	80019d8 <ICU_SelectEdge+0x254>
		  	  	else if (edge == FALLING )
 80017dc:	79bb      	ldrb	r3, [r7, #6]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d10c      	bne.n	80017fc <ICU_SelectEdge+0x78>
		  	  	  	  SET_BIT(TIM8_CCER_REG,CC1P_BIT_1);
 80017e2:	4b80      	ldr	r3, [pc, #512]	; (80019e4 <ICU_SelectEdge+0x260>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a7f      	ldr	r2, [pc, #508]	; (80019e4 <ICU_SelectEdge+0x260>)
 80017e8:	f043 0302 	orr.w	r3, r3, #2
 80017ec:	6013      	str	r3, [r2, #0]
		  	  	  	  CLEAR_BIT(TIM8_CCER_REG,CC1NP_BIT_3);
 80017ee:	4b7d      	ldr	r3, [pc, #500]	; (80019e4 <ICU_SelectEdge+0x260>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a7c      	ldr	r2, [pc, #496]	; (80019e4 <ICU_SelectEdge+0x260>)
 80017f4:	f023 0308 	bic.w	r3, r3, #8
 80017f8:	6013      	str	r3, [r2, #0]
	  break;
 80017fa:	e0ed      	b.n	80019d8 <ICU_SelectEdge+0x254>
		  	  		 SET_BIT(TIM8_CCER_REG,CC1P_BIT_1);
 80017fc:	4b79      	ldr	r3, [pc, #484]	; (80019e4 <ICU_SelectEdge+0x260>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a78      	ldr	r2, [pc, #480]	; (80019e4 <ICU_SelectEdge+0x260>)
 8001802:	f043 0302 	orr.w	r3, r3, #2
 8001806:	6013      	str	r3, [r2, #0]
		  	  		 SET_BIT(TIM8_CCER_REG,CC1NP_BIT_3);
 8001808:	4b76      	ldr	r3, [pc, #472]	; (80019e4 <ICU_SelectEdge+0x260>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a75      	ldr	r2, [pc, #468]	; (80019e4 <ICU_SelectEdge+0x260>)
 800180e:	f043 0308 	orr.w	r3, r3, #8
 8001812:	6013      	str	r3, [r2, #0]
	  break;
 8001814:	e0e0      	b.n	80019d8 <ICU_SelectEdge+0x254>
	  case channel_2:
	  	  	  if( edge == RISING )
 8001816:	79bb      	ldrb	r3, [r7, #6]
 8001818:	2b01      	cmp	r3, #1
 800181a:	d10c      	bne.n	8001836 <ICU_SelectEdge+0xb2>
	  	  	  {
	  	  		  CLEAR_BIT(TIM8_CCER_REG,CC2P_BIT_5);
 800181c:	4b71      	ldr	r3, [pc, #452]	; (80019e4 <ICU_SelectEdge+0x260>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a70      	ldr	r2, [pc, #448]	; (80019e4 <ICU_SelectEdge+0x260>)
 8001822:	f023 0320 	bic.w	r3, r3, #32
 8001826:	6013      	str	r3, [r2, #0]
	  	  		  CLEAR_BIT(TIM8_CCER_REG,CC2NP_BIT_7);
 8001828:	4b6e      	ldr	r3, [pc, #440]	; (80019e4 <ICU_SelectEdge+0x260>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a6d      	ldr	r2, [pc, #436]	; (80019e4 <ICU_SelectEdge+0x260>)
 800182e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001832:	6013      	str	r3, [r2, #0]
	  	     else
	  	     {
	  	  		  SET_BIT(TIM8_CCER_REG,CC2P_BIT_5);
	  	  		  SET_BIT(TIM8_CCER_REG,CC2NP_BIT_7);
	  	     }
	  break;
 8001834:	e0d0      	b.n	80019d8 <ICU_SelectEdge+0x254>
	  	     else if (edge == FALLING )
 8001836:	79bb      	ldrb	r3, [r7, #6]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d10c      	bne.n	8001856 <ICU_SelectEdge+0xd2>
	  	  		  SET_BIT(TIM8_CCER_REG,CC2P_BIT_5);
 800183c:	4b69      	ldr	r3, [pc, #420]	; (80019e4 <ICU_SelectEdge+0x260>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a68      	ldr	r2, [pc, #416]	; (80019e4 <ICU_SelectEdge+0x260>)
 8001842:	f043 0320 	orr.w	r3, r3, #32
 8001846:	6013      	str	r3, [r2, #0]
	  	  		  CLEAR_BIT(TIM8_CCER_REG,CC2NP_BIT_7);
 8001848:	4b66      	ldr	r3, [pc, #408]	; (80019e4 <ICU_SelectEdge+0x260>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a65      	ldr	r2, [pc, #404]	; (80019e4 <ICU_SelectEdge+0x260>)
 800184e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001852:	6013      	str	r3, [r2, #0]
	  break;
 8001854:	e0c0      	b.n	80019d8 <ICU_SelectEdge+0x254>
	  	  		  SET_BIT(TIM8_CCER_REG,CC2P_BIT_5);
 8001856:	4b63      	ldr	r3, [pc, #396]	; (80019e4 <ICU_SelectEdge+0x260>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a62      	ldr	r2, [pc, #392]	; (80019e4 <ICU_SelectEdge+0x260>)
 800185c:	f043 0320 	orr.w	r3, r3, #32
 8001860:	6013      	str	r3, [r2, #0]
	  	  		  SET_BIT(TIM8_CCER_REG,CC2NP_BIT_7);
 8001862:	4b60      	ldr	r3, [pc, #384]	; (80019e4 <ICU_SelectEdge+0x260>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a5f      	ldr	r2, [pc, #380]	; (80019e4 <ICU_SelectEdge+0x260>)
 8001868:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800186c:	6013      	str	r3, [r2, #0]
	  break;
 800186e:	e0b3      	b.n	80019d8 <ICU_SelectEdge+0x254>
	  case channel_3:
	  	  	  if( edge == RISING )
 8001870:	79bb      	ldrb	r3, [r7, #6]
 8001872:	2b01      	cmp	r3, #1
 8001874:	d10c      	bne.n	8001890 <ICU_SelectEdge+0x10c>
	  	  	  {
	  	  		  CLEAR_BIT(TIM8_CCER_REG,CC3P_BIT_9);
 8001876:	4b5b      	ldr	r3, [pc, #364]	; (80019e4 <ICU_SelectEdge+0x260>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a5a      	ldr	r2, [pc, #360]	; (80019e4 <ICU_SelectEdge+0x260>)
 800187c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001880:	6013      	str	r3, [r2, #0]
	  	  		  CLEAR_BIT(TIM8_CCER_REG,CC3NP_BIT_11);
 8001882:	4b58      	ldr	r3, [pc, #352]	; (80019e4 <ICU_SelectEdge+0x260>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a57      	ldr	r2, [pc, #348]	; (80019e4 <ICU_SelectEdge+0x260>)
 8001888:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800188c:	6013      	str	r3, [r2, #0]
		  	  else
		  	  {
		  		 SET_BIT(TIM8_CCER_REG,CC3P_BIT_9);
		  		SET_BIT(TIM8_CCER_REG,CC3NP_BIT_11);
		  	  }
	  break;
 800188e:	e0a3      	b.n	80019d8 <ICU_SelectEdge+0x254>
		  	  else if (edge == FALLING )
 8001890:	79bb      	ldrb	r3, [r7, #6]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d10c      	bne.n	80018b0 <ICU_SelectEdge+0x12c>
	  	  		  SET_BIT(TIM8_CCER_REG,CC3P_BIT_9);
 8001896:	4b53      	ldr	r3, [pc, #332]	; (80019e4 <ICU_SelectEdge+0x260>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a52      	ldr	r2, [pc, #328]	; (80019e4 <ICU_SelectEdge+0x260>)
 800189c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018a0:	6013      	str	r3, [r2, #0]
	  	  		  CLEAR_BIT(TIM8_CCER_REG,CC3NP_BIT_11);
 80018a2:	4b50      	ldr	r3, [pc, #320]	; (80019e4 <ICU_SelectEdge+0x260>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a4f      	ldr	r2, [pc, #316]	; (80019e4 <ICU_SelectEdge+0x260>)
 80018a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80018ac:	6013      	str	r3, [r2, #0]
	  break;
 80018ae:	e093      	b.n	80019d8 <ICU_SelectEdge+0x254>
		  		 SET_BIT(TIM8_CCER_REG,CC3P_BIT_9);
 80018b0:	4b4c      	ldr	r3, [pc, #304]	; (80019e4 <ICU_SelectEdge+0x260>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a4b      	ldr	r2, [pc, #300]	; (80019e4 <ICU_SelectEdge+0x260>)
 80018b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018ba:	6013      	str	r3, [r2, #0]
		  		SET_BIT(TIM8_CCER_REG,CC3NP_BIT_11);
 80018bc:	4b49      	ldr	r3, [pc, #292]	; (80019e4 <ICU_SelectEdge+0x260>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a48      	ldr	r2, [pc, #288]	; (80019e4 <ICU_SelectEdge+0x260>)
 80018c2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80018c6:	6013      	str	r3, [r2, #0]
	  break;
 80018c8:	e086      	b.n	80019d8 <ICU_SelectEdge+0x254>
	  case channel_4:
	  	   if( edge == RISING )
 80018ca:	79bb      	ldrb	r3, [r7, #6]
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d10c      	bne.n	80018ea <ICU_SelectEdge+0x166>
	  	  	{
	  		      CLEAR_BIT(TIM1_CCER_REG,CC1P_BIT_1);
 80018d0:	4b45      	ldr	r3, [pc, #276]	; (80019e8 <ICU_SelectEdge+0x264>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a44      	ldr	r2, [pc, #272]	; (80019e8 <ICU_SelectEdge+0x264>)
 80018d6:	f023 0302 	bic.w	r3, r3, #2
 80018da:	6013      	str	r3, [r2, #0]
	  		      CLEAR_BIT(TIM1_CCER_REG,CC1NP_BIT_3);
 80018dc:	4b42      	ldr	r3, [pc, #264]	; (80019e8 <ICU_SelectEdge+0x264>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a41      	ldr	r2, [pc, #260]	; (80019e8 <ICU_SelectEdge+0x264>)
 80018e2:	f023 0308 	bic.w	r3, r3, #8
 80018e6:	6013      	str	r3, [r2, #0]
	  	  	else
	  	  	{
	  	  		 SET_BIT(TIM1_CCER_REG,CC1P_BIT_1);
	  	  		 SET_BIT(TIM1_CCER_REG,CC1NP_BIT_3);
	  	  	}
	  break;
 80018e8:	e076      	b.n	80019d8 <ICU_SelectEdge+0x254>
	  	  	else if (edge == FALLING )
 80018ea:	79bb      	ldrb	r3, [r7, #6]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d10c      	bne.n	800190a <ICU_SelectEdge+0x186>
	  	  	  	  SET_BIT(TIM1_CCER_REG,CC1P_BIT_1);
 80018f0:	4b3d      	ldr	r3, [pc, #244]	; (80019e8 <ICU_SelectEdge+0x264>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a3c      	ldr	r2, [pc, #240]	; (80019e8 <ICU_SelectEdge+0x264>)
 80018f6:	f043 0302 	orr.w	r3, r3, #2
 80018fa:	6013      	str	r3, [r2, #0]
	  	  	  	  CLEAR_BIT(TIM1_CCER_REG,CC1NP_BIT_3);
 80018fc:	4b3a      	ldr	r3, [pc, #232]	; (80019e8 <ICU_SelectEdge+0x264>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a39      	ldr	r2, [pc, #228]	; (80019e8 <ICU_SelectEdge+0x264>)
 8001902:	f023 0308 	bic.w	r3, r3, #8
 8001906:	6013      	str	r3, [r2, #0]
	  break;
 8001908:	e066      	b.n	80019d8 <ICU_SelectEdge+0x254>
	  	  		 SET_BIT(TIM1_CCER_REG,CC1P_BIT_1);
 800190a:	4b37      	ldr	r3, [pc, #220]	; (80019e8 <ICU_SelectEdge+0x264>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a36      	ldr	r2, [pc, #216]	; (80019e8 <ICU_SelectEdge+0x264>)
 8001910:	f043 0302 	orr.w	r3, r3, #2
 8001914:	6013      	str	r3, [r2, #0]
	  	  		 SET_BIT(TIM1_CCER_REG,CC1NP_BIT_3);
 8001916:	4b34      	ldr	r3, [pc, #208]	; (80019e8 <ICU_SelectEdge+0x264>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a33      	ldr	r2, [pc, #204]	; (80019e8 <ICU_SelectEdge+0x264>)
 800191c:	f043 0308 	orr.w	r3, r3, #8
 8001920:	6013      	str	r3, [r2, #0]
	  break;
 8001922:	e059      	b.n	80019d8 <ICU_SelectEdge+0x254>
	  case channel_5:
  	  	  if( edge == RISING )
 8001924:	79bb      	ldrb	r3, [r7, #6]
 8001926:	2b01      	cmp	r3, #1
 8001928:	d10c      	bne.n	8001944 <ICU_SelectEdge+0x1c0>
  	  	  {
  	  		  CLEAR_BIT(TIM1_CCER_REG,CC2P_BIT_5);
 800192a:	4b2f      	ldr	r3, [pc, #188]	; (80019e8 <ICU_SelectEdge+0x264>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a2e      	ldr	r2, [pc, #184]	; (80019e8 <ICU_SelectEdge+0x264>)
 8001930:	f023 0320 	bic.w	r3, r3, #32
 8001934:	6013      	str	r3, [r2, #0]
  	  		  CLEAR_BIT(TIM1_CCER_REG,CC2NP_BIT_7);
 8001936:	4b2c      	ldr	r3, [pc, #176]	; (80019e8 <ICU_SelectEdge+0x264>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a2b      	ldr	r2, [pc, #172]	; (80019e8 <ICU_SelectEdge+0x264>)
 800193c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001940:	6013      	str	r3, [r2, #0]
  	     else
  	     {
  	  		  SET_BIT(TIM1_CCER_REG,CC2P_BIT_5);
  	  		  SET_BIT(TIM1_CCER_REG,CC2NP_BIT_7);
  	     }
	  break;
 8001942:	e049      	b.n	80019d8 <ICU_SelectEdge+0x254>
  	     else if (edge == FALLING )
 8001944:	79bb      	ldrb	r3, [r7, #6]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d10c      	bne.n	8001964 <ICU_SelectEdge+0x1e0>
  	  		  SET_BIT(TIM1_CCER_REG,CC2P_BIT_5);
 800194a:	4b27      	ldr	r3, [pc, #156]	; (80019e8 <ICU_SelectEdge+0x264>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a26      	ldr	r2, [pc, #152]	; (80019e8 <ICU_SelectEdge+0x264>)
 8001950:	f043 0320 	orr.w	r3, r3, #32
 8001954:	6013      	str	r3, [r2, #0]
  	  		  CLEAR_BIT(TIM1_CCER_REG,CC2NP_BIT_7);
 8001956:	4b24      	ldr	r3, [pc, #144]	; (80019e8 <ICU_SelectEdge+0x264>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a23      	ldr	r2, [pc, #140]	; (80019e8 <ICU_SelectEdge+0x264>)
 800195c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001960:	6013      	str	r3, [r2, #0]
	  break;
 8001962:	e039      	b.n	80019d8 <ICU_SelectEdge+0x254>
  	  		  SET_BIT(TIM1_CCER_REG,CC2P_BIT_5);
 8001964:	4b20      	ldr	r3, [pc, #128]	; (80019e8 <ICU_SelectEdge+0x264>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a1f      	ldr	r2, [pc, #124]	; (80019e8 <ICU_SelectEdge+0x264>)
 800196a:	f043 0320 	orr.w	r3, r3, #32
 800196e:	6013      	str	r3, [r2, #0]
  	  		  SET_BIT(TIM1_CCER_REG,CC2NP_BIT_7);
 8001970:	4b1d      	ldr	r3, [pc, #116]	; (80019e8 <ICU_SelectEdge+0x264>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a1c      	ldr	r2, [pc, #112]	; (80019e8 <ICU_SelectEdge+0x264>)
 8001976:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800197a:	6013      	str	r3, [r2, #0]
	  break;
 800197c:	e02c      	b.n	80019d8 <ICU_SelectEdge+0x254>
	  case channel_6:
  	  	  if( edge == RISING )
 800197e:	79bb      	ldrb	r3, [r7, #6]
 8001980:	2b01      	cmp	r3, #1
 8001982:	d10c      	bne.n	800199e <ICU_SelectEdge+0x21a>
  	  	  {
  	  		  CLEAR_BIT(TIM1_CCER_REG,CC3P_BIT_9);
 8001984:	4b18      	ldr	r3, [pc, #96]	; (80019e8 <ICU_SelectEdge+0x264>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a17      	ldr	r2, [pc, #92]	; (80019e8 <ICU_SelectEdge+0x264>)
 800198a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800198e:	6013      	str	r3, [r2, #0]
  	  		  CLEAR_BIT(TIM1_CCER_REG,CC3NP_BIT_11);
 8001990:	4b15      	ldr	r3, [pc, #84]	; (80019e8 <ICU_SelectEdge+0x264>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a14      	ldr	r2, [pc, #80]	; (80019e8 <ICU_SelectEdge+0x264>)
 8001996:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800199a:	6013      	str	r3, [r2, #0]
	  	  else
	  	  {
	  		 SET_BIT(TIM1_CCER_REG,CC3P_BIT_9);
	  		 SET_BIT(TIM1_CCER_REG,CC3NP_BIT_11);
	  	  }
	  break;
 800199c:	e01b      	b.n	80019d6 <ICU_SelectEdge+0x252>
	  	  else if (edge == FALLING )
 800199e:	79bb      	ldrb	r3, [r7, #6]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d10c      	bne.n	80019be <ICU_SelectEdge+0x23a>
  	  		  SET_BIT(TIM1_CCER_REG,CC3P_BIT_9);
 80019a4:	4b10      	ldr	r3, [pc, #64]	; (80019e8 <ICU_SelectEdge+0x264>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a0f      	ldr	r2, [pc, #60]	; (80019e8 <ICU_SelectEdge+0x264>)
 80019aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019ae:	6013      	str	r3, [r2, #0]
  	  		  CLEAR_BIT(TIM1_CCER_REG,CC3NP_BIT_11);
 80019b0:	4b0d      	ldr	r3, [pc, #52]	; (80019e8 <ICU_SelectEdge+0x264>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a0c      	ldr	r2, [pc, #48]	; (80019e8 <ICU_SelectEdge+0x264>)
 80019b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80019ba:	6013      	str	r3, [r2, #0]
	  break;
 80019bc:	e00b      	b.n	80019d6 <ICU_SelectEdge+0x252>
	  		 SET_BIT(TIM1_CCER_REG,CC3P_BIT_9);
 80019be:	4b0a      	ldr	r3, [pc, #40]	; (80019e8 <ICU_SelectEdge+0x264>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a09      	ldr	r2, [pc, #36]	; (80019e8 <ICU_SelectEdge+0x264>)
 80019c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019c8:	6013      	str	r3, [r2, #0]
	  		 SET_BIT(TIM1_CCER_REG,CC3NP_BIT_11);
 80019ca:	4b07      	ldr	r3, [pc, #28]	; (80019e8 <ICU_SelectEdge+0x264>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a06      	ldr	r2, [pc, #24]	; (80019e8 <ICU_SelectEdge+0x264>)
 80019d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80019d4:	6013      	str	r3, [r2, #0]
	  break;
 80019d6:	bf00      	nop
	}



}
 80019d8:	bf00      	nop
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr
 80019e4:	40013420 	.word	0x40013420
 80019e8:	40012c20 	.word	0x40012c20

080019ec <ICU_INT_CheckStatus>:


STD_ReturnState ICU_INT_CheckStatus(ICU_Channel channel)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b085      	sub	sp, #20
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	4603      	mov	r3, r0
 80019f4:	71fb      	strb	r3, [r7, #7]
	STD_ReturnState state;

	switch(channel)
 80019f6:	79fb      	ldrb	r3, [r7, #7]
 80019f8:	2b05      	cmp	r3, #5
 80019fa:	d86f      	bhi.n	8001adc <ICU_INT_CheckStatus+0xf0>
 80019fc:	a201      	add	r2, pc, #4	; (adr r2, 8001a04 <ICU_INT_CheckStatus+0x18>)
 80019fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a02:	bf00      	nop
 8001a04:	08001a1d 	.word	0x08001a1d
 8001a08:	08001a3d 	.word	0x08001a3d
 8001a0c:	08001a5d 	.word	0x08001a5d
 8001a10:	08001a7d 	.word	0x08001a7d
 8001a14:	08001a9d 	.word	0x08001a9d
 8001a18:	08001abd 	.word	0x08001abd
	{
	   case channel_1:
		   state = CHECK_BIT( TIM8_SR_REG , CC1IF_BIT_1 );
 8001a1c:	4b33      	ldr	r3, [pc, #204]	; (8001aec <ICU_INT_CheckStatus+0x100>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	085b      	lsrs	r3, r3, #1
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	f003 0301 	and.w	r3, r3, #1
 8001a28:	73fb      	strb	r3, [r7, #15]
		   if( state == 0 )
 8001a2a:	7bfb      	ldrb	r3, [r7, #15]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d102      	bne.n	8001a36 <ICU_INT_CheckStatus+0x4a>
		   	{
		   	   state = RET_NOK;
 8001a30:	2301      	movs	r3, #1
 8001a32:	73fb      	strb	r3, [r7, #15]
		   	}
		   	else
		   	{
			   state = RET_OK;
			}
	   break;
 8001a34:	e052      	b.n	8001adc <ICU_INT_CheckStatus+0xf0>
			   state = RET_OK;
 8001a36:	2300      	movs	r3, #0
 8001a38:	73fb      	strb	r3, [r7, #15]
	   break;
 8001a3a:	e04f      	b.n	8001adc <ICU_INT_CheckStatus+0xf0>
	   case channel_2:
	   	   state = CHECK_BIT( TIM8_SR_REG , CC2IF_BIT_2 );
 8001a3c:	4b2b      	ldr	r3, [pc, #172]	; (8001aec <ICU_INT_CheckStatus+0x100>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	089b      	lsrs	r3, r3, #2
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	f003 0301 	and.w	r3, r3, #1
 8001a48:	73fb      	strb	r3, [r7, #15]
	   	   if( state == 0 )
 8001a4a:	7bfb      	ldrb	r3, [r7, #15]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d102      	bne.n	8001a56 <ICU_INT_CheckStatus+0x6a>
	   	   {
	   		   state = RET_NOK;
 8001a50:	2301      	movs	r3, #1
 8001a52:	73fb      	strb	r3, [r7, #15]
	   	   else
	   	   {
			  state = RET_OK;
	   	   }

	   break;
 8001a54:	e042      	b.n	8001adc <ICU_INT_CheckStatus+0xf0>
			  state = RET_OK;
 8001a56:	2300      	movs	r3, #0
 8001a58:	73fb      	strb	r3, [r7, #15]
	   break;
 8001a5a:	e03f      	b.n	8001adc <ICU_INT_CheckStatus+0xf0>
	   case channel_3:
	   	   state = CHECK_BIT( TIM8_SR_REG , CC3IF_BIT_3 );
 8001a5c:	4b23      	ldr	r3, [pc, #140]	; (8001aec <ICU_INT_CheckStatus+0x100>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	08db      	lsrs	r3, r3, #3
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	f003 0301 	and.w	r3, r3, #1
 8001a68:	73fb      	strb	r3, [r7, #15]
	   	   if( state == 0 )
 8001a6a:	7bfb      	ldrb	r3, [r7, #15]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d102      	bne.n	8001a76 <ICU_INT_CheckStatus+0x8a>
	   	   {
	   		   state = RET_NOK;
 8001a70:	2301      	movs	r3, #1
 8001a72:	73fb      	strb	r3, [r7, #15]
	   	   else
	   	   {
			  state = RET_OK;
	   	   }

	   break;
 8001a74:	e032      	b.n	8001adc <ICU_INT_CheckStatus+0xf0>
			  state = RET_OK;
 8001a76:	2300      	movs	r3, #0
 8001a78:	73fb      	strb	r3, [r7, #15]
	   break;
 8001a7a:	e02f      	b.n	8001adc <ICU_INT_CheckStatus+0xf0>
	   case channel_4:
		   state = CHECK_BIT( TIM1_SR_REG , CC1IF_BIT_1 );
 8001a7c:	4b1c      	ldr	r3, [pc, #112]	; (8001af0 <ICU_INT_CheckStatus+0x104>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	085b      	lsrs	r3, r3, #1
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	f003 0301 	and.w	r3, r3, #1
 8001a88:	73fb      	strb	r3, [r7, #15]
	   	   if( state == 0 )
 8001a8a:	7bfb      	ldrb	r3, [r7, #15]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d102      	bne.n	8001a96 <ICU_INT_CheckStatus+0xaa>
	   	   {
	   		   state = RET_NOK;
 8001a90:	2301      	movs	r3, #1
 8001a92:	73fb      	strb	r3, [r7, #15]
	   	   else
	   	   {
			  state = RET_OK;
	   	   }

	   break;
 8001a94:	e022      	b.n	8001adc <ICU_INT_CheckStatus+0xf0>
			  state = RET_OK;
 8001a96:	2300      	movs	r3, #0
 8001a98:	73fb      	strb	r3, [r7, #15]
	   break;
 8001a9a:	e01f      	b.n	8001adc <ICU_INT_CheckStatus+0xf0>
	   case channel_5:
		   state = CHECK_BIT( TIM1_SR_REG , CC2IF_BIT_2 );
 8001a9c:	4b14      	ldr	r3, [pc, #80]	; (8001af0 <ICU_INT_CheckStatus+0x104>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	089b      	lsrs	r3, r3, #2
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	f003 0301 	and.w	r3, r3, #1
 8001aa8:	73fb      	strb	r3, [r7, #15]
	   	   if( state == 0 )
 8001aaa:	7bfb      	ldrb	r3, [r7, #15]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d102      	bne.n	8001ab6 <ICU_INT_CheckStatus+0xca>
	   	   {
	   		   state = RET_NOK;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	73fb      	strb	r3, [r7, #15]
	   	   else
	   	   {
			  state = RET_OK;
	   	   }

	   break;
 8001ab4:	e012      	b.n	8001adc <ICU_INT_CheckStatus+0xf0>
			  state = RET_OK;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	73fb      	strb	r3, [r7, #15]
	   break;
 8001aba:	e00f      	b.n	8001adc <ICU_INT_CheckStatus+0xf0>
	   case channel_6:
		   state = CHECK_BIT( TIM1_SR_REG , CC3IF_BIT_3 );
 8001abc:	4b0c      	ldr	r3, [pc, #48]	; (8001af0 <ICU_INT_CheckStatus+0x104>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	08db      	lsrs	r3, r3, #3
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	f003 0301 	and.w	r3, r3, #1
 8001ac8:	73fb      	strb	r3, [r7, #15]
	   	   if( state == 0 )
 8001aca:	7bfb      	ldrb	r3, [r7, #15]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d102      	bne.n	8001ad6 <ICU_INT_CheckStatus+0xea>
	   	   {
	   		   state = RET_NOK;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	73fb      	strb	r3, [r7, #15]
	   	   else
	   	   {
			  state = RET_OK;
	   	   }

	   break;
 8001ad4:	e001      	b.n	8001ada <ICU_INT_CheckStatus+0xee>
			  state = RET_OK;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	73fb      	strb	r3, [r7, #15]
	   break;
 8001ada:	bf00      	nop

	}

	return state;
 8001adc:	7bfb      	ldrb	r3, [r7, #15]

}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3714      	adds	r7, #20
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	40013410 	.word	0x40013410
 8001af0:	40012c10 	.word	0x40012c10

08001af4 <ICU_INT_Enable>:

}


void ICU_INT_Enable(ICU_Channel channel,void(*ptr)(void))
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	4603      	mov	r3, r0
 8001afc:	6039      	str	r1, [r7, #0]
 8001afe:	71fb      	strb	r3, [r7, #7]
	switch(channel)
 8001b00:	79fb      	ldrb	r3, [r7, #7]
 8001b02:	2b05      	cmp	r3, #5
 8001b04:	d873      	bhi.n	8001bee <ICU_INT_Enable+0xfa>
 8001b06:	a201      	add	r2, pc, #4	; (adr r2, 8001b0c <ICU_INT_Enable+0x18>)
 8001b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b0c:	08001b25 	.word	0x08001b25
 8001b10:	08001b43 	.word	0x08001b43
 8001b14:	08001b61 	.word	0x08001b61
 8001b18:	08001b7f 	.word	0x08001b7f
 8001b1c:	08001b9d 	.word	0x08001b9d
 8001b20:	08001bbb 	.word	0x08001bbb
	{
	  case channel_1:
	    	SET_BIT(TIM8_DIER_REG,CC1DE_BIT_9);
 8001b24:	4b35      	ldr	r3, [pc, #212]	; (8001bfc <ICU_INT_Enable+0x108>)
 8001b26:	881b      	ldrh	r3, [r3, #0]
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	4a34      	ldr	r2, [pc, #208]	; (8001bfc <ICU_INT_Enable+0x108>)
 8001b2c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b30:	b29b      	uxth	r3, r3
 8001b32:	8013      	strh	r3, [r2, #0]
	    	if(ptr != (void*)RET_NULLPTR)
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d04e      	beq.n	8001bd8 <ICU_INT_Enable+0xe4>
	    	{
	    		Channel_1_CLB_Ptr = ptr;
 8001b3a:	4a31      	ldr	r2, [pc, #196]	; (8001c00 <ICU_INT_Enable+0x10c>)
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	6013      	str	r3, [r2, #0]
	    	}
	  break;
 8001b40:	e04a      	b.n	8001bd8 <ICU_INT_Enable+0xe4>
	  case channel_2:
		   SET_BIT(TIM8_DIER_REG,CC2DE_BIT_10);
 8001b42:	4b2e      	ldr	r3, [pc, #184]	; (8001bfc <ICU_INT_Enable+0x108>)
 8001b44:	881b      	ldrh	r3, [r3, #0]
 8001b46:	b29b      	uxth	r3, r3
 8001b48:	4a2c      	ldr	r2, [pc, #176]	; (8001bfc <ICU_INT_Enable+0x108>)
 8001b4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b4e:	b29b      	uxth	r3, r3
 8001b50:	8013      	strh	r3, [r2, #0]
	    	if(ptr != (void*)RET_NULLPTR)
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d041      	beq.n	8001bdc <ICU_INT_Enable+0xe8>
	    	{
	    		Channel_2_CLB_Ptr = ptr;
 8001b58:	4a2a      	ldr	r2, [pc, #168]	; (8001c04 <ICU_INT_Enable+0x110>)
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	6013      	str	r3, [r2, #0]
	    	}
	  break;
 8001b5e:	e03d      	b.n	8001bdc <ICU_INT_Enable+0xe8>
	  case channel_3:
		   SET_BIT(TIM8_DIER_REG,CC3DE_BIT_11);
 8001b60:	4b26      	ldr	r3, [pc, #152]	; (8001bfc <ICU_INT_Enable+0x108>)
 8001b62:	881b      	ldrh	r3, [r3, #0]
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	4a25      	ldr	r2, [pc, #148]	; (8001bfc <ICU_INT_Enable+0x108>)
 8001b68:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b6c:	b29b      	uxth	r3, r3
 8001b6e:	8013      	strh	r3, [r2, #0]
	    	if( ptr != (void*)RET_NULLPTR)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d034      	beq.n	8001be0 <ICU_INT_Enable+0xec>
	    	{
	    		Channel_3_CLB_Ptr = ptr;
 8001b76:	4a24      	ldr	r2, [pc, #144]	; (8001c08 <ICU_INT_Enable+0x114>)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	6013      	str	r3, [r2, #0]
	    	}
	  break;
 8001b7c:	e030      	b.n	8001be0 <ICU_INT_Enable+0xec>
	  case channel_4:
		   SET_BIT(TIM1_DIER_REG,CC1DE_BIT_9);
 8001b7e:	4b23      	ldr	r3, [pc, #140]	; (8001c0c <ICU_INT_Enable+0x118>)
 8001b80:	881b      	ldrh	r3, [r3, #0]
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	4a21      	ldr	r2, [pc, #132]	; (8001c0c <ICU_INT_Enable+0x118>)
 8001b86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	8013      	strh	r3, [r2, #0]
	    	if( ptr != (void*)RET_NULLPTR)
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d027      	beq.n	8001be4 <ICU_INT_Enable+0xf0>
	    	{
	    		Channel_4_CLB_Ptr = ptr;
 8001b94:	4a1e      	ldr	r2, [pc, #120]	; (8001c10 <ICU_INT_Enable+0x11c>)
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	6013      	str	r3, [r2, #0]
	    	}
	  break;
 8001b9a:	e023      	b.n	8001be4 <ICU_INT_Enable+0xf0>
	  case channel_5:
		   SET_BIT(TIM1_DIER_REG,CC2DE_BIT_10);
 8001b9c:	4b1b      	ldr	r3, [pc, #108]	; (8001c0c <ICU_INT_Enable+0x118>)
 8001b9e:	881b      	ldrh	r3, [r3, #0]
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	4a1a      	ldr	r2, [pc, #104]	; (8001c0c <ICU_INT_Enable+0x118>)
 8001ba4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	8013      	strh	r3, [r2, #0]
	    	if( ptr != (void*)RET_NULLPTR)
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d01a      	beq.n	8001be8 <ICU_INT_Enable+0xf4>
	    	{
	    		Channel_5_CLB_Ptr = ptr;
 8001bb2:	4a18      	ldr	r2, [pc, #96]	; (8001c14 <ICU_INT_Enable+0x120>)
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	6013      	str	r3, [r2, #0]
	    	}
	  break;
 8001bb8:	e016      	b.n	8001be8 <ICU_INT_Enable+0xf4>
	  case channel_6:
		   SET_BIT(TIM1_DIER_REG,CC3DE_BIT_11);
 8001bba:	4b14      	ldr	r3, [pc, #80]	; (8001c0c <ICU_INT_Enable+0x118>)
 8001bbc:	881b      	ldrh	r3, [r3, #0]
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	4a12      	ldr	r2, [pc, #72]	; (8001c0c <ICU_INT_Enable+0x118>)
 8001bc2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001bc6:	b29b      	uxth	r3, r3
 8001bc8:	8013      	strh	r3, [r2, #0]
	    	if( ptr != (void*)RET_NULLPTR)
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	d00d      	beq.n	8001bec <ICU_INT_Enable+0xf8>
	    	{
	    		Channel_6_CLB_Ptr = ptr;
 8001bd0:	4a11      	ldr	r2, [pc, #68]	; (8001c18 <ICU_INT_Enable+0x124>)
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	6013      	str	r3, [r2, #0]
	    	}
	  break;
 8001bd6:	e009      	b.n	8001bec <ICU_INT_Enable+0xf8>
	  break;
 8001bd8:	bf00      	nop
 8001bda:	e008      	b.n	8001bee <ICU_INT_Enable+0xfa>
	  break;
 8001bdc:	bf00      	nop
 8001bde:	e006      	b.n	8001bee <ICU_INT_Enable+0xfa>
	  break;
 8001be0:	bf00      	nop
 8001be2:	e004      	b.n	8001bee <ICU_INT_Enable+0xfa>
	  break;
 8001be4:	bf00      	nop
 8001be6:	e002      	b.n	8001bee <ICU_INT_Enable+0xfa>
	  break;
 8001be8:	bf00      	nop
 8001bea:	e000      	b.n	8001bee <ICU_INT_Enable+0xfa>
	  break;
 8001bec:	bf00      	nop


	}

}
 8001bee:	bf00      	nop
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	4001340c 	.word	0x4001340c
 8001c00:	20000028 	.word	0x20000028
 8001c04:	2000002c 	.word	0x2000002c
 8001c08:	20000030 	.word	0x20000030
 8001c0c:	40012c0c 	.word	0x40012c0c
 8001c10:	20000034 	.word	0x20000034
 8001c14:	20000038 	.word	0x20000038
 8001c18:	2000003c 	.word	0x2000003c

08001c1c <TIM8_CC_IRQHandler>:
}


//TIM8_CC_IRQHandler
void TIM8_CC_IRQHandler(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0

	if ( ICU_INT_CheckStatus(channel_1 ) == RET_OK  )
 8001c20:	2000      	movs	r0, #0
 8001c22:	f7ff fee3 	bl	80019ec <ICU_INT_CheckStatus>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d10c      	bne.n	8001c46 <TIM8_CC_IRQHandler+0x2a>
	{
		CLEAR_BIT( TIM8_SR_REG , CC1IF_BIT_1 );
 8001c2c:	4b1a      	ldr	r3, [pc, #104]	; (8001c98 <TIM8_CC_IRQHandler+0x7c>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a19      	ldr	r2, [pc, #100]	; (8001c98 <TIM8_CC_IRQHandler+0x7c>)
 8001c32:	f023 0302 	bic.w	r3, r3, #2
 8001c36:	6013      	str	r3, [r2, #0]
		if( Channel_1_CLB_Ptr != (void*)RET_NULLPTR )
 8001c38:	4b18      	ldr	r3, [pc, #96]	; (8001c9c <TIM8_CC_IRQHandler+0x80>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	d002      	beq.n	8001c46 <TIM8_CC_IRQHandler+0x2a>
		{
			Channel_1_CLB_Ptr();
 8001c40:	4b16      	ldr	r3, [pc, #88]	; (8001c9c <TIM8_CC_IRQHandler+0x80>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4798      	blx	r3
		}
	}

	if ( ICU_INT_CheckStatus(channel_2 ) == RET_OK  )
 8001c46:	2001      	movs	r0, #1
 8001c48:	f7ff fed0 	bl	80019ec <ICU_INT_CheckStatus>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d10c      	bne.n	8001c6c <TIM8_CC_IRQHandler+0x50>
	{
		CLEAR_BIT( TIM8_SR_REG , CC2IF_BIT_2 );
 8001c52:	4b11      	ldr	r3, [pc, #68]	; (8001c98 <TIM8_CC_IRQHandler+0x7c>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a10      	ldr	r2, [pc, #64]	; (8001c98 <TIM8_CC_IRQHandler+0x7c>)
 8001c58:	f023 0304 	bic.w	r3, r3, #4
 8001c5c:	6013      	str	r3, [r2, #0]
		if( Channel_2_CLB_Ptr != (void*)RET_NULLPTR )
 8001c5e:	4b10      	ldr	r3, [pc, #64]	; (8001ca0 <TIM8_CC_IRQHandler+0x84>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d002      	beq.n	8001c6c <TIM8_CC_IRQHandler+0x50>
		{
			Channel_2_CLB_Ptr();
 8001c66:	4b0e      	ldr	r3, [pc, #56]	; (8001ca0 <TIM8_CC_IRQHandler+0x84>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4798      	blx	r3
		}
	}

	if ( ICU_INT_CheckStatus(channel_3 ) == RET_OK  )
 8001c6c:	2002      	movs	r0, #2
 8001c6e:	f7ff febd 	bl	80019ec <ICU_INT_CheckStatus>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d10c      	bne.n	8001c92 <TIM8_CC_IRQHandler+0x76>
	{
		CLEAR_BIT( TIM8_SR_REG ,CC3IF_BIT_3 );
 8001c78:	4b07      	ldr	r3, [pc, #28]	; (8001c98 <TIM8_CC_IRQHandler+0x7c>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a06      	ldr	r2, [pc, #24]	; (8001c98 <TIM8_CC_IRQHandler+0x7c>)
 8001c7e:	f023 0308 	bic.w	r3, r3, #8
 8001c82:	6013      	str	r3, [r2, #0]
		if( Channel_3_CLB_Ptr != (void*)RET_NULLPTR )
 8001c84:	4b07      	ldr	r3, [pc, #28]	; (8001ca4 <TIM8_CC_IRQHandler+0x88>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d002      	beq.n	8001c92 <TIM8_CC_IRQHandler+0x76>
		{
			Channel_3_CLB_Ptr();
 8001c8c:	4b05      	ldr	r3, [pc, #20]	; (8001ca4 <TIM8_CC_IRQHandler+0x88>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4798      	blx	r3
		}
	}

}
 8001c92:	bf00      	nop
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	40013410 	.word	0x40013410
 8001c9c:	20000028 	.word	0x20000028
 8001ca0:	2000002c 	.word	0x2000002c
 8001ca4:	20000030 	.word	0x20000030

08001ca8 <TIM1_CC_IRQHandler>:


void TIM1_CC_IRQHandler(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
	if ( ICU_INT_CheckStatus(channel_4 ) == RET_OK  )
 8001cac:	2003      	movs	r0, #3
 8001cae:	f7ff fe9d 	bl	80019ec <ICU_INT_CheckStatus>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d10c      	bne.n	8001cd2 <TIM1_CC_IRQHandler+0x2a>
	{
		CLEAR_BIT( TIM1_SR_REG , CC1IF_BIT_1 );
 8001cb8:	4b1a      	ldr	r3, [pc, #104]	; (8001d24 <TIM1_CC_IRQHandler+0x7c>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a19      	ldr	r2, [pc, #100]	; (8001d24 <TIM1_CC_IRQHandler+0x7c>)
 8001cbe:	f023 0302 	bic.w	r3, r3, #2
 8001cc2:	6013      	str	r3, [r2, #0]
		if( Channel_4_CLB_Ptr != (void*)RET_NULLPTR )
 8001cc4:	4b18      	ldr	r3, [pc, #96]	; (8001d28 <TIM1_CC_IRQHandler+0x80>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d002      	beq.n	8001cd2 <TIM1_CC_IRQHandler+0x2a>
		{
			Channel_4_CLB_Ptr();
 8001ccc:	4b16      	ldr	r3, [pc, #88]	; (8001d28 <TIM1_CC_IRQHandler+0x80>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4798      	blx	r3
		}
	}

	if ( ICU_INT_CheckStatus(channel_5 ) == RET_OK  )
 8001cd2:	2004      	movs	r0, #4
 8001cd4:	f7ff fe8a 	bl	80019ec <ICU_INT_CheckStatus>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d10c      	bne.n	8001cf8 <TIM1_CC_IRQHandler+0x50>
	{
		CLEAR_BIT( TIM1_SR_REG , CC2IF_BIT_2 );
 8001cde:	4b11      	ldr	r3, [pc, #68]	; (8001d24 <TIM1_CC_IRQHandler+0x7c>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a10      	ldr	r2, [pc, #64]	; (8001d24 <TIM1_CC_IRQHandler+0x7c>)
 8001ce4:	f023 0304 	bic.w	r3, r3, #4
 8001ce8:	6013      	str	r3, [r2, #0]
		if( Channel_5_CLB_Ptr != (void*)RET_NULLPTR )
 8001cea:	4b10      	ldr	r3, [pc, #64]	; (8001d2c <TIM1_CC_IRQHandler+0x84>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d002      	beq.n	8001cf8 <TIM1_CC_IRQHandler+0x50>
		{
			Channel_5_CLB_Ptr();
 8001cf2:	4b0e      	ldr	r3, [pc, #56]	; (8001d2c <TIM1_CC_IRQHandler+0x84>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4798      	blx	r3
		}
	}

	if ( ICU_INT_CheckStatus(channel_6 ) == RET_OK  )
 8001cf8:	2005      	movs	r0, #5
 8001cfa:	f7ff fe77 	bl	80019ec <ICU_INT_CheckStatus>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d10c      	bne.n	8001d1e <TIM1_CC_IRQHandler+0x76>
	{
		CLEAR_BIT( TIM1_SR_REG , CC3IF_BIT_3 );
 8001d04:	4b07      	ldr	r3, [pc, #28]	; (8001d24 <TIM1_CC_IRQHandler+0x7c>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a06      	ldr	r2, [pc, #24]	; (8001d24 <TIM1_CC_IRQHandler+0x7c>)
 8001d0a:	f023 0308 	bic.w	r3, r3, #8
 8001d0e:	6013      	str	r3, [r2, #0]
		if( Channel_6_CLB_Ptr != (void*)RET_NULLPTR )
 8001d10:	4b07      	ldr	r3, [pc, #28]	; (8001d30 <TIM1_CC_IRQHandler+0x88>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d002      	beq.n	8001d1e <TIM1_CC_IRQHandler+0x76>
		{
			Channel_6_CLB_Ptr();
 8001d18:	4b05      	ldr	r3, [pc, #20]	; (8001d30 <TIM1_CC_IRQHandler+0x88>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4798      	blx	r3
		}
	}
}
 8001d1e:	bf00      	nop
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	40012c10 	.word	0x40012c10
 8001d28:	20000034 	.word	0x20000034
 8001d2c:	20000038 	.word	0x20000038
 8001d30:	2000003c 	.word	0x2000003c

08001d34 <PWM_Init>:

#include "pwm.h"


void PWM_Init(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0

	TIM2_PSC_REG = ( 800 - 1 ) ;			// tick = 100 micro sec
 8001d38:	4b23      	ldr	r3, [pc, #140]	; (8001dc8 <PWM_Init+0x94>)
 8001d3a:	f240 321f 	movw	r2, #799	; 0x31f
 8001d3e:	601a      	str	r2, [r3, #0]
	TIM2_ARR_REG = ( 100 - 1 ) ;			// reload evrey 10 mili sec  ==> freq = 10 mili sec
 8001d40:	4b22      	ldr	r3, [pc, #136]	; (8001dcc <PWM_Init+0x98>)
 8001d42:	2263      	movs	r2, #99	; 0x63
 8001d44:	601a      	str	r2, [r3, #0]
	TIM2_CNT_REG = 0;
 8001d46:	4b22      	ldr	r3, [pc, #136]	; (8001dd0 <PWM_Init+0x9c>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	601a      	str	r2, [r3, #0]
	TIM2_CCMR1_REG |= WriteValue(6,OC1M_BIT_4_5_6);		//011
 8001d4c:	4b21      	ldr	r3, [pc, #132]	; (8001dd4 <PWM_Init+0xa0>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a20      	ldr	r2, [pc, #128]	; (8001dd4 <PWM_Init+0xa0>)
 8001d52:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001d56:	6013      	str	r3, [r2, #0]
	TIM2_CCMR1_REG |= WriteValue(6,OC2M_BIT_12_13_14);	//011
 8001d58:	4b1e      	ldr	r3, [pc, #120]	; (8001dd4 <PWM_Init+0xa0>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a1d      	ldr	r2, [pc, #116]	; (8001dd4 <PWM_Init+0xa0>)
 8001d5e:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8001d62:	6013      	str	r3, [r2, #0]

	TIM2_CCMR2_REG |= WriteValue(6,OC1M_BIT_4_5_6);		//011
 8001d64:	4b1c      	ldr	r3, [pc, #112]	; (8001dd8 <PWM_Init+0xa4>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a1b      	ldr	r2, [pc, #108]	; (8001dd8 <PWM_Init+0xa4>)
 8001d6a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001d6e:	6013      	str	r3, [r2, #0]
	TIM2_CCMR2_REG |= WriteValue(6,OC2M_BIT_12_13_14);	//011
 8001d70:	4b19      	ldr	r3, [pc, #100]	; (8001dd8 <PWM_Init+0xa4>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a18      	ldr	r2, [pc, #96]	; (8001dd8 <PWM_Init+0xa4>)
 8001d76:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8001d7a:	6013      	str	r3, [r2, #0]

	SET_BIT(TIM2_CCMR1_REG,OC1PE_BIT_3);
 8001d7c:	4b15      	ldr	r3, [pc, #84]	; (8001dd4 <PWM_Init+0xa0>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a14      	ldr	r2, [pc, #80]	; (8001dd4 <PWM_Init+0xa0>)
 8001d82:	f043 0308 	orr.w	r3, r3, #8
 8001d86:	6013      	str	r3, [r2, #0]
	SET_BIT(TIM2_CCMR1_REG,OC2PE_BIT_11);
 8001d88:	4b12      	ldr	r3, [pc, #72]	; (8001dd4 <PWM_Init+0xa0>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a11      	ldr	r2, [pc, #68]	; (8001dd4 <PWM_Init+0xa0>)
 8001d8e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d92:	6013      	str	r3, [r2, #0]

	SET_BIT(TIM2_CCMR2_REG,OC1PE_BIT_3);
 8001d94:	4b10      	ldr	r3, [pc, #64]	; (8001dd8 <PWM_Init+0xa4>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a0f      	ldr	r2, [pc, #60]	; (8001dd8 <PWM_Init+0xa4>)
 8001d9a:	f043 0308 	orr.w	r3, r3, #8
 8001d9e:	6013      	str	r3, [r2, #0]
	SET_BIT(TIM2_CCMR2_REG,OC2PE_BIT_11);
 8001da0:	4b0d      	ldr	r3, [pc, #52]	; (8001dd8 <PWM_Init+0xa4>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a0c      	ldr	r2, [pc, #48]	; (8001dd8 <PWM_Init+0xa4>)
 8001da6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001daa:	6013      	str	r3, [r2, #0]

	SET_BIT(TIM2_CR1_REG,ARPE_BIT_7);
 8001dac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001db6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dba:	6013      	str	r3, [r2, #0]

}
 8001dbc:	bf00      	nop
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	40000028 	.word	0x40000028
 8001dcc:	4000002c 	.word	0x4000002c
 8001dd0:	40000024 	.word	0x40000024
 8001dd4:	40000018 	.word	0x40000018
 8001dd8:	4000001c 	.word	0x4000001c

08001ddc <PWM_Start>:

void PWM_Start(PWM_Channel  channel , u8 Duty)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	4603      	mov	r3, r0
 8001de4:	460a      	mov	r2, r1
 8001de6:	71fb      	strb	r3, [r7, #7]
 8001de8:	4613      	mov	r3, r2
 8001dea:	71bb      	strb	r3, [r7, #6]
	CLEAR_BIT(TIM2_CR1_REG,CEN_BIT_0);			// disable the timer
 8001dec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001df6:	f023 0301 	bic.w	r3, r3, #1
 8001dfa:	6013      	str	r3, [r2, #0]

	switch(channel )
 8001dfc:	79fb      	ldrb	r3, [r7, #7]
 8001dfe:	2b03      	cmp	r3, #3
 8001e00:	d853      	bhi.n	8001eaa <PWM_Start+0xce>
 8001e02:	a201      	add	r2, pc, #4	; (adr r2, 8001e08 <PWM_Start+0x2c>)
 8001e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e08:	08001e19 	.word	0x08001e19
 8001e0c:	08001e45 	.word	0x08001e45
 8001e10:	08001e67 	.word	0x08001e67
 8001e14:	08001e89 	.word	0x08001e89
	{
	case channel1:

		CLEAR_BIT(TIM2_CCER_REG , CC1E_BIT_0 );		// disable the channel
 8001e18:	4b2b      	ldr	r3, [pc, #172]	; (8001ec8 <PWM_Start+0xec>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a2a      	ldr	r2, [pc, #168]	; (8001ec8 <PWM_Start+0xec>)
 8001e1e:	f023 0301 	bic.w	r3, r3, #1
 8001e22:	6013      	str	r3, [r2, #0]
		if(Duty == 0)
 8001e24:	79bb      	ldrb	r3, [r7, #6]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d101      	bne.n	8001e2e <PWM_Start+0x52>
			Duty = 1;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	71bb      	strb	r3, [r7, #6]
		TIM2_CCR1_REG = ( ( Duty * 1 ) - 1 );
 8001e2e:	79bb      	ldrb	r3, [r7, #6]
 8001e30:	1e5a      	subs	r2, r3, #1
 8001e32:	4b26      	ldr	r3, [pc, #152]	; (8001ecc <PWM_Start+0xf0>)
 8001e34:	601a      	str	r2, [r3, #0]
		SET_BIT(TIM2_CCER_REG , CC1E_BIT_0);		//enable the channel
 8001e36:	4b24      	ldr	r3, [pc, #144]	; (8001ec8 <PWM_Start+0xec>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a23      	ldr	r2, [pc, #140]	; (8001ec8 <PWM_Start+0xec>)
 8001e3c:	f043 0301 	orr.w	r3, r3, #1
 8001e40:	6013      	str	r3, [r2, #0]

		break;
 8001e42:	e032      	b.n	8001eaa <PWM_Start+0xce>
	case channel2:

		CLEAR_BIT(TIM2_CCER_REG , CC2E_BIT_4 );
 8001e44:	4b20      	ldr	r3, [pc, #128]	; (8001ec8 <PWM_Start+0xec>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a1f      	ldr	r2, [pc, #124]	; (8001ec8 <PWM_Start+0xec>)
 8001e4a:	f023 0310 	bic.w	r3, r3, #16
 8001e4e:	6013      	str	r3, [r2, #0]
		TIM2_CCR2_REG = ( ( Duty * 1 ) - 1 );
 8001e50:	79bb      	ldrb	r3, [r7, #6]
 8001e52:	1e5a      	subs	r2, r3, #1
 8001e54:	4b1e      	ldr	r3, [pc, #120]	; (8001ed0 <PWM_Start+0xf4>)
 8001e56:	601a      	str	r2, [r3, #0]
		SET_BIT(TIM2_CCER_REG , CC2E_BIT_4);
 8001e58:	4b1b      	ldr	r3, [pc, #108]	; (8001ec8 <PWM_Start+0xec>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a1a      	ldr	r2, [pc, #104]	; (8001ec8 <PWM_Start+0xec>)
 8001e5e:	f043 0310 	orr.w	r3, r3, #16
 8001e62:	6013      	str	r3, [r2, #0]

		break;
 8001e64:	e021      	b.n	8001eaa <PWM_Start+0xce>

	case channel3:

		CLEAR_BIT(TIM2_CCER_REG , CC3E_BIT_8 );
 8001e66:	4b18      	ldr	r3, [pc, #96]	; (8001ec8 <PWM_Start+0xec>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a17      	ldr	r2, [pc, #92]	; (8001ec8 <PWM_Start+0xec>)
 8001e6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e70:	6013      	str	r3, [r2, #0]
		TIM2_CCR3_REG = ( ( Duty * 1 ) - 1 );
 8001e72:	79bb      	ldrb	r3, [r7, #6]
 8001e74:	1e5a      	subs	r2, r3, #1
 8001e76:	4b17      	ldr	r3, [pc, #92]	; (8001ed4 <PWM_Start+0xf8>)
 8001e78:	601a      	str	r2, [r3, #0]
		SET_BIT(TIM2_CCER_REG , CC3E_BIT_8);
 8001e7a:	4b13      	ldr	r3, [pc, #76]	; (8001ec8 <PWM_Start+0xec>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a12      	ldr	r2, [pc, #72]	; (8001ec8 <PWM_Start+0xec>)
 8001e80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e84:	6013      	str	r3, [r2, #0]

		break;
 8001e86:	e010      	b.n	8001eaa <PWM_Start+0xce>

	case channel4:

		CLEAR_BIT(TIM2_CCER_REG , CC4E_BIT_12 );
 8001e88:	4b0f      	ldr	r3, [pc, #60]	; (8001ec8 <PWM_Start+0xec>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a0e      	ldr	r2, [pc, #56]	; (8001ec8 <PWM_Start+0xec>)
 8001e8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001e92:	6013      	str	r3, [r2, #0]
		TIM2_CCR4_REG = ( ( Duty * 1 ) - 1 );
 8001e94:	79bb      	ldrb	r3, [r7, #6]
 8001e96:	1e5a      	subs	r2, r3, #1
 8001e98:	4b0f      	ldr	r3, [pc, #60]	; (8001ed8 <PWM_Start+0xfc>)
 8001e9a:	601a      	str	r2, [r3, #0]
		SET_BIT(TIM2_CCER_REG , CC4E_BIT_12);
 8001e9c:	4b0a      	ldr	r3, [pc, #40]	; (8001ec8 <PWM_Start+0xec>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a09      	ldr	r2, [pc, #36]	; (8001ec8 <PWM_Start+0xec>)
 8001ea2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ea6:	6013      	str	r3, [r2, #0]

		break;
 8001ea8:	bf00      	nop
	}

	SET_BIT(TIM2_CR1_REG,CEN_BIT_0);		//enable the timer
 8001eaa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001eb4:	f043 0301 	orr.w	r3, r3, #1
 8001eb8:	6013      	str	r3, [r2, #0]

}
 8001eba:	bf00      	nop
 8001ebc:	370c      	adds	r7, #12
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	40000020 	.word	0x40000020
 8001ecc:	40000034 	.word	0x40000034
 8001ed0:	40000038 	.word	0x40000038
 8001ed4:	4000003c 	.word	0x4000003c
 8001ed8:	40000040 	.word	0x40000040

08001edc <TIM6_Init>:
 * Parameters (in) : parameterName   Parameter Description
 * Return value:   : Std_ReturnType  E_OK
 *                                    E_NOT_OK
 *******************************************************************************/
void TIM6_Init(u16 prescaler)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	80fb      	strh	r3, [r7, #6]
	/*Auto-reload pre-load enable*/
	SET_BIT(TIM6_CR1_REG, ARPE_BIT_7);
 8001ee6:	4b0c      	ldr	r3, [pc, #48]	; (8001f18 <TIM6_Init+0x3c>)
 8001ee8:	881b      	ldrh	r3, [r3, #0]
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	4a0a      	ldr	r2, [pc, #40]	; (8001f18 <TIM6_Init+0x3c>)
 8001eee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ef2:	b29b      	uxth	r3, r3
 8001ef4:	8013      	strh	r3, [r2, #0]


	SET_BIT(TIM6_CR1_REG, OPM_BIT_3);
 8001ef6:	4b08      	ldr	r3, [pc, #32]	; (8001f18 <TIM6_Init+0x3c>)
 8001ef8:	881b      	ldrh	r3, [r3, #0]
 8001efa:	b29b      	uxth	r3, r3
 8001efc:	4a06      	ldr	r2, [pc, #24]	; (8001f18 <TIM6_Init+0x3c>)
 8001efe:	f043 0308 	orr.w	r3, r3, #8
 8001f02:	b29b      	uxth	r3, r3
 8001f04:	8013      	strh	r3, [r2, #0]
	/*Set pre-scaler*/
	TIM6_PSC_REG = prescaler;
 8001f06:	4a05      	ldr	r2, [pc, #20]	; (8001f1c <TIM6_Init+0x40>)
 8001f08:	88fb      	ldrh	r3, [r7, #6]
 8001f0a:	8013      	strh	r3, [r2, #0]

}
 8001f0c:	bf00      	nop
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr
 8001f18:	40001000 	.word	0x40001000
 8001f1c:	40001028 	.word	0x40001028

08001f20 <TIM6_Delay>:
 * Parameters (in) : parameterName   Parameter Description
 * Return value:   : Std_ReturnType  E_OK
 *                                    E_NOT_OK
 *******************************************************************************/
void TIM6_Delay (u16 loadVal)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	4603      	mov	r3, r0
 8001f28:	80fb      	strh	r3, [r7, #6]
	/*Set auto-reload value*/
	TIM6_ARR_REG = loadVal;
 8001f2a:	4a10      	ldr	r2, [pc, #64]	; (8001f6c <TIM6_Delay+0x4c>)
 8001f2c:	88fb      	ldrh	r3, [r7, #6]
 8001f2e:	8013      	strh	r3, [r2, #0]

	/*Start the counter*/
	SET_BIT(TIM6_CR1_REG, CEN_BIT_0);
 8001f30:	4b0f      	ldr	r3, [pc, #60]	; (8001f70 <TIM6_Delay+0x50>)
 8001f32:	881b      	ldrh	r3, [r3, #0]
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	4a0e      	ldr	r2, [pc, #56]	; (8001f70 <TIM6_Delay+0x50>)
 8001f38:	f043 0301 	orr.w	r3, r3, #1
 8001f3c:	b29b      	uxth	r3, r3
 8001f3e:	8013      	strh	r3, [r2, #0]

	/*Polling on the flag*/
	while(CHECK_BIT(TIM6_SR_REG, UIF_BIT_0) == STD_LOW);
 8001f40:	bf00      	nop
 8001f42:	4b0c      	ldr	r3, [pc, #48]	; (8001f74 <TIM6_Delay+0x54>)
 8001f44:	881b      	ldrh	r3, [r3, #0]
 8001f46:	b29b      	uxth	r3, r3
 8001f48:	f003 0301 	and.w	r3, r3, #1
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d0f8      	beq.n	8001f42 <TIM6_Delay+0x22>

	/*Clear flag by software*/
	CLEAR_BIT(TIM6_SR_REG, UIF_BIT_0);
 8001f50:	4b08      	ldr	r3, [pc, #32]	; (8001f74 <TIM6_Delay+0x54>)
 8001f52:	881b      	ldrh	r3, [r3, #0]
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	4a07      	ldr	r2, [pc, #28]	; (8001f74 <TIM6_Delay+0x54>)
 8001f58:	f023 0301 	bic.w	r3, r3, #1
 8001f5c:	b29b      	uxth	r3, r3
 8001f5e:	8013      	strh	r3, [r2, #0]


}
 8001f60:	bf00      	nop
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr
 8001f6c:	4000102c 	.word	0x4000102c
 8001f70:	40001000 	.word	0x40001000
 8001f74:	40001010 	.word	0x40001010

08001f78 <DIO_setupPinMode>:

/*******************************************************************************
 *                      Global Functions Definitions                           *
 *******************************************************************************/
STD_ReturnState DIO_setupPinMode(DIO_PortID portID, DIO_PinID pinID, DIO_PinMode pinMode)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b085      	sub	sp, #20
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	4603      	mov	r3, r0
 8001f80:	71fb      	strb	r3, [r7, #7]
 8001f82:	460b      	mov	r3, r1
 8001f84:	71bb      	strb	r3, [r7, #6]
 8001f86:	4613      	mov	r3, r2
 8001f88:	717b      	strb	r3, [r7, #5]
	STD_ReturnState Ret_Val = RET_OK;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	73fb      	strb	r3, [r7, #15]

	if((portID >= NUM_OF_PORTS) || (pinID >= NUM_OF_PINS_PER_PORT))
 8001f8e:	79fb      	ldrb	r3, [r7, #7]
 8001f90:	2b07      	cmp	r3, #7
 8001f92:	d802      	bhi.n	8001f9a <DIO_setupPinMode+0x22>
 8001f94:	79bb      	ldrb	r3, [r7, #6]
 8001f96:	2b0e      	cmp	r3, #14
 8001f98:	d902      	bls.n	8001fa0 <DIO_setupPinMode+0x28>
	{
		Ret_Val = RET_NOK;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	73fb      	strb	r3, [r7, #15]
 8001f9e:	e0b1      	b.n	8002104 <DIO_setupPinMode+0x18c>
	}

	else
	{
		switch(portID)
 8001fa0:	79fb      	ldrb	r3, [r7, #7]
 8001fa2:	2b07      	cmp	r3, #7
 8001fa4:	f200 80ae 	bhi.w	8002104 <DIO_setupPinMode+0x18c>
 8001fa8:	a201      	add	r2, pc, #4	; (adr r2, 8001fb0 <DIO_setupPinMode+0x38>)
 8001faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fae:	bf00      	nop
 8001fb0:	08001fd1 	.word	0x08001fd1
 8001fb4:	08001ffb 	.word	0x08001ffb
 8001fb8:	08002021 	.word	0x08002021
 8001fbc:	08002047 	.word	0x08002047
 8001fc0:	0800206d 	.word	0x0800206d
 8001fc4:	08002093 	.word	0x08002093
 8001fc8:	080020b9 	.word	0x080020b9
 8001fcc:	080020df 	.word	0x080020df
		{
		case PORTA_ID:
			DIOA_MODER_REG = (DIOA_MODER_REG & ~(0x03 << (pinID*2))) | (pinMode << (pinID*2));
 8001fd0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	79ba      	ldrb	r2, [r7, #6]
 8001fd8:	0052      	lsls	r2, r2, #1
 8001fda:	2103      	movs	r1, #3
 8001fdc:	fa01 f202 	lsl.w	r2, r1, r2
 8001fe0:	43d2      	mvns	r2, r2
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	7979      	ldrb	r1, [r7, #5]
 8001fe6:	79ba      	ldrb	r2, [r7, #6]
 8001fe8:	0052      	lsls	r2, r2, #1
 8001fea:	fa01 f202 	lsl.w	r2, r1, r2
 8001fee:	4611      	mov	r1, r2
 8001ff0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001ff4:	430b      	orrs	r3, r1
 8001ff6:	6013      	str	r3, [r2, #0]
			break;
 8001ff8:	e084      	b.n	8002104 <DIO_setupPinMode+0x18c>

		case PORTB_ID:
			DIOB_MODER_REG = (DIOB_MODER_REG & ~(0x03 << (pinID*2))) | (pinMode << (pinID*2));
 8001ffa:	4b46      	ldr	r3, [pc, #280]	; (8002114 <DIO_setupPinMode+0x19c>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	79ba      	ldrb	r2, [r7, #6]
 8002000:	0052      	lsls	r2, r2, #1
 8002002:	2103      	movs	r1, #3
 8002004:	fa01 f202 	lsl.w	r2, r1, r2
 8002008:	43d2      	mvns	r2, r2
 800200a:	4013      	ands	r3, r2
 800200c:	7979      	ldrb	r1, [r7, #5]
 800200e:	79ba      	ldrb	r2, [r7, #6]
 8002010:	0052      	lsls	r2, r2, #1
 8002012:	fa01 f202 	lsl.w	r2, r1, r2
 8002016:	4611      	mov	r1, r2
 8002018:	4a3e      	ldr	r2, [pc, #248]	; (8002114 <DIO_setupPinMode+0x19c>)
 800201a:	430b      	orrs	r3, r1
 800201c:	6013      	str	r3, [r2, #0]
			break;
 800201e:	e071      	b.n	8002104 <DIO_setupPinMode+0x18c>

		case PORTC_ID:
			DIOC_MODER_REG = (DIOC_MODER_REG & ~(0x03 << (pinID*2))) | (pinMode << (pinID*2));
 8002020:	4b3d      	ldr	r3, [pc, #244]	; (8002118 <DIO_setupPinMode+0x1a0>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	79ba      	ldrb	r2, [r7, #6]
 8002026:	0052      	lsls	r2, r2, #1
 8002028:	2103      	movs	r1, #3
 800202a:	fa01 f202 	lsl.w	r2, r1, r2
 800202e:	43d2      	mvns	r2, r2
 8002030:	4013      	ands	r3, r2
 8002032:	7979      	ldrb	r1, [r7, #5]
 8002034:	79ba      	ldrb	r2, [r7, #6]
 8002036:	0052      	lsls	r2, r2, #1
 8002038:	fa01 f202 	lsl.w	r2, r1, r2
 800203c:	4611      	mov	r1, r2
 800203e:	4a36      	ldr	r2, [pc, #216]	; (8002118 <DIO_setupPinMode+0x1a0>)
 8002040:	430b      	orrs	r3, r1
 8002042:	6013      	str	r3, [r2, #0]
			break;
 8002044:	e05e      	b.n	8002104 <DIO_setupPinMode+0x18c>

		case PORTD_ID:
			DIOD_MODER_REG = (DIOD_MODER_REG & ~(0x03 << (pinID*2))) | (pinMode << (pinID*2));
 8002046:	4b35      	ldr	r3, [pc, #212]	; (800211c <DIO_setupPinMode+0x1a4>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	79ba      	ldrb	r2, [r7, #6]
 800204c:	0052      	lsls	r2, r2, #1
 800204e:	2103      	movs	r1, #3
 8002050:	fa01 f202 	lsl.w	r2, r1, r2
 8002054:	43d2      	mvns	r2, r2
 8002056:	4013      	ands	r3, r2
 8002058:	7979      	ldrb	r1, [r7, #5]
 800205a:	79ba      	ldrb	r2, [r7, #6]
 800205c:	0052      	lsls	r2, r2, #1
 800205e:	fa01 f202 	lsl.w	r2, r1, r2
 8002062:	4611      	mov	r1, r2
 8002064:	4a2d      	ldr	r2, [pc, #180]	; (800211c <DIO_setupPinMode+0x1a4>)
 8002066:	430b      	orrs	r3, r1
 8002068:	6013      	str	r3, [r2, #0]
			break;
 800206a:	e04b      	b.n	8002104 <DIO_setupPinMode+0x18c>

		case PORTE_ID:
			DIOE_MODER_REG = (DIOE_MODER_REG & ~(0x03 << (pinID*2))) | (pinMode << (pinID*2));
 800206c:	4b2c      	ldr	r3, [pc, #176]	; (8002120 <DIO_setupPinMode+0x1a8>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	79ba      	ldrb	r2, [r7, #6]
 8002072:	0052      	lsls	r2, r2, #1
 8002074:	2103      	movs	r1, #3
 8002076:	fa01 f202 	lsl.w	r2, r1, r2
 800207a:	43d2      	mvns	r2, r2
 800207c:	4013      	ands	r3, r2
 800207e:	7979      	ldrb	r1, [r7, #5]
 8002080:	79ba      	ldrb	r2, [r7, #6]
 8002082:	0052      	lsls	r2, r2, #1
 8002084:	fa01 f202 	lsl.w	r2, r1, r2
 8002088:	4611      	mov	r1, r2
 800208a:	4a25      	ldr	r2, [pc, #148]	; (8002120 <DIO_setupPinMode+0x1a8>)
 800208c:	430b      	orrs	r3, r1
 800208e:	6013      	str	r3, [r2, #0]
			break;
 8002090:	e038      	b.n	8002104 <DIO_setupPinMode+0x18c>

		case PORTF_ID:
			DIOF_MODER_REG = (DIOF_MODER_REG & ~(0x03 << (pinID*2))) | (pinMode << (pinID*2));
 8002092:	4b24      	ldr	r3, [pc, #144]	; (8002124 <DIO_setupPinMode+0x1ac>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	79ba      	ldrb	r2, [r7, #6]
 8002098:	0052      	lsls	r2, r2, #1
 800209a:	2103      	movs	r1, #3
 800209c:	fa01 f202 	lsl.w	r2, r1, r2
 80020a0:	43d2      	mvns	r2, r2
 80020a2:	4013      	ands	r3, r2
 80020a4:	7979      	ldrb	r1, [r7, #5]
 80020a6:	79ba      	ldrb	r2, [r7, #6]
 80020a8:	0052      	lsls	r2, r2, #1
 80020aa:	fa01 f202 	lsl.w	r2, r1, r2
 80020ae:	4611      	mov	r1, r2
 80020b0:	4a1c      	ldr	r2, [pc, #112]	; (8002124 <DIO_setupPinMode+0x1ac>)
 80020b2:	430b      	orrs	r3, r1
 80020b4:	6013      	str	r3, [r2, #0]
			break;
 80020b6:	e025      	b.n	8002104 <DIO_setupPinMode+0x18c>

		case PORTG_ID:
			DIOG_MODER_REG = (DIOG_MODER_REG & ~(0x03 << (pinID*2))) | (pinMode << (pinID*2));
 80020b8:	4b1b      	ldr	r3, [pc, #108]	; (8002128 <DIO_setupPinMode+0x1b0>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	79ba      	ldrb	r2, [r7, #6]
 80020be:	0052      	lsls	r2, r2, #1
 80020c0:	2103      	movs	r1, #3
 80020c2:	fa01 f202 	lsl.w	r2, r1, r2
 80020c6:	43d2      	mvns	r2, r2
 80020c8:	4013      	ands	r3, r2
 80020ca:	7979      	ldrb	r1, [r7, #5]
 80020cc:	79ba      	ldrb	r2, [r7, #6]
 80020ce:	0052      	lsls	r2, r2, #1
 80020d0:	fa01 f202 	lsl.w	r2, r1, r2
 80020d4:	4611      	mov	r1, r2
 80020d6:	4a14      	ldr	r2, [pc, #80]	; (8002128 <DIO_setupPinMode+0x1b0>)
 80020d8:	430b      	orrs	r3, r1
 80020da:	6013      	str	r3, [r2, #0]
			break;
 80020dc:	e012      	b.n	8002104 <DIO_setupPinMode+0x18c>

		case PORTH_ID:
			DIOH_MODER_REG = (DIOH_MODER_REG & ~(0x03 << (pinID*2))) | (pinMode << (pinID*2));
 80020de:	4b13      	ldr	r3, [pc, #76]	; (800212c <DIO_setupPinMode+0x1b4>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	79ba      	ldrb	r2, [r7, #6]
 80020e4:	0052      	lsls	r2, r2, #1
 80020e6:	2103      	movs	r1, #3
 80020e8:	fa01 f202 	lsl.w	r2, r1, r2
 80020ec:	43d2      	mvns	r2, r2
 80020ee:	4013      	ands	r3, r2
 80020f0:	7979      	ldrb	r1, [r7, #5]
 80020f2:	79ba      	ldrb	r2, [r7, #6]
 80020f4:	0052      	lsls	r2, r2, #1
 80020f6:	fa01 f202 	lsl.w	r2, r1, r2
 80020fa:	4611      	mov	r1, r2
 80020fc:	4a0b      	ldr	r2, [pc, #44]	; (800212c <DIO_setupPinMode+0x1b4>)
 80020fe:	430b      	orrs	r3, r1
 8002100:	6013      	str	r3, [r2, #0]
			break;
 8002102:	bf00      	nop
		}
	}

	return Ret_Val;
 8002104:	7bfb      	ldrb	r3, [r7, #15]
}
 8002106:	4618      	mov	r0, r3
 8002108:	3714      	adds	r7, #20
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	48000400 	.word	0x48000400
 8002118:	48000800 	.word	0x48000800
 800211c:	48000c00 	.word	0x48000c00
 8002120:	48001000 	.word	0x48001000
 8002124:	48001400 	.word	0x48001400
 8002128:	48001800 	.word	0x48001800
 800212c:	48001c00 	.word	0x48001c00

08002130 <DIO_writePin>:

STD_ReturnState DIO_writePin(DIO_PortID portID, DIO_PinID pinID, DIO_PinLevel pinLevel)
{
 8002130:	b480      	push	{r7}
 8002132:	b085      	sub	sp, #20
 8002134:	af00      	add	r7, sp, #0
 8002136:	4603      	mov	r3, r0
 8002138:	71fb      	strb	r3, [r7, #7]
 800213a:	460b      	mov	r3, r1
 800213c:	71bb      	strb	r3, [r7, #6]
 800213e:	4613      	mov	r3, r2
 8002140:	717b      	strb	r3, [r7, #5]
	STD_ReturnState Ret_Val = RET_OK;
 8002142:	2300      	movs	r3, #0
 8002144:	73fb      	strb	r3, [r7, #15]

	if(portID >= NUM_OF_PORTS || pinID >= NUM_OF_PINS_PER_PORT)
 8002146:	79fb      	ldrb	r3, [r7, #7]
 8002148:	2b07      	cmp	r3, #7
 800214a:	d802      	bhi.n	8002152 <DIO_writePin+0x22>
 800214c:	79bb      	ldrb	r3, [r7, #6]
 800214e:	2b0e      	cmp	r3, #14
 8002150:	d902      	bls.n	8002158 <DIO_writePin+0x28>
	{
		Ret_Val = RET_NOK;
 8002152:	2301      	movs	r3, #1
 8002154:	73fb      	strb	r3, [r7, #15]
 8002156:	e0e7      	b.n	8002328 <DIO_writePin+0x1f8>
	}

	else
	{
		switch(portID)
 8002158:	79fb      	ldrb	r3, [r7, #7]
 800215a:	2b07      	cmp	r3, #7
 800215c:	f200 80e4 	bhi.w	8002328 <DIO_writePin+0x1f8>
 8002160:	a201      	add	r2, pc, #4	; (adr r2, 8002168 <DIO_writePin+0x38>)
 8002162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002166:	bf00      	nop
 8002168:	08002189 	.word	0x08002189
 800216c:	080021bd 	.word	0x080021bd
 8002170:	080021f1 	.word	0x080021f1
 8002174:	08002225 	.word	0x08002225
 8002178:	08002259 	.word	0x08002259
 800217c:	0800228d 	.word	0x0800228d
 8002180:	080022c1 	.word	0x080022c1
 8002184:	080022f5 	.word	0x080022f5
		{
		case PORTA_ID:
			if(pinLevel == LOGIC_LOW)
 8002188:	797b      	ldrb	r3, [r7, #5]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d10b      	bne.n	80021a6 <DIO_writePin+0x76>
			{
				CLEAR_BIT(DIOA_ODR_REG, pinID);
 800218e:	4b6a      	ldr	r3, [pc, #424]	; (8002338 <DIO_writePin+0x208>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	79ba      	ldrb	r2, [r7, #6]
 8002194:	2101      	movs	r1, #1
 8002196:	fa01 f202 	lsl.w	r2, r1, r2
 800219a:	43d2      	mvns	r2, r2
 800219c:	4611      	mov	r1, r2
 800219e:	4a66      	ldr	r2, [pc, #408]	; (8002338 <DIO_writePin+0x208>)
 80021a0:	400b      	ands	r3, r1
 80021a2:	6013      	str	r3, [r2, #0]
			}
			else
			{
				SET_BIT(DIOA_ODR_REG, pinID);
			}
			break;
 80021a4:	e0c0      	b.n	8002328 <DIO_writePin+0x1f8>
				SET_BIT(DIOA_ODR_REG, pinID);
 80021a6:	4b64      	ldr	r3, [pc, #400]	; (8002338 <DIO_writePin+0x208>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	79ba      	ldrb	r2, [r7, #6]
 80021ac:	2101      	movs	r1, #1
 80021ae:	fa01 f202 	lsl.w	r2, r1, r2
 80021b2:	4611      	mov	r1, r2
 80021b4:	4a60      	ldr	r2, [pc, #384]	; (8002338 <DIO_writePin+0x208>)
 80021b6:	430b      	orrs	r3, r1
 80021b8:	6013      	str	r3, [r2, #0]
			break;
 80021ba:	e0b5      	b.n	8002328 <DIO_writePin+0x1f8>

		case PORTB_ID:
			if(pinLevel == LOGIC_LOW)
 80021bc:	797b      	ldrb	r3, [r7, #5]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d10b      	bne.n	80021da <DIO_writePin+0xaa>
			{
				CLEAR_BIT(DIOB_ODR_REG, pinID);
 80021c2:	4b5e      	ldr	r3, [pc, #376]	; (800233c <DIO_writePin+0x20c>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	79ba      	ldrb	r2, [r7, #6]
 80021c8:	2101      	movs	r1, #1
 80021ca:	fa01 f202 	lsl.w	r2, r1, r2
 80021ce:	43d2      	mvns	r2, r2
 80021d0:	4611      	mov	r1, r2
 80021d2:	4a5a      	ldr	r2, [pc, #360]	; (800233c <DIO_writePin+0x20c>)
 80021d4:	400b      	ands	r3, r1
 80021d6:	6013      	str	r3, [r2, #0]
			}
			else
			{
				SET_BIT(DIOB_ODR_REG, pinID);
			}
			break;
 80021d8:	e0a6      	b.n	8002328 <DIO_writePin+0x1f8>
				SET_BIT(DIOB_ODR_REG, pinID);
 80021da:	4b58      	ldr	r3, [pc, #352]	; (800233c <DIO_writePin+0x20c>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	79ba      	ldrb	r2, [r7, #6]
 80021e0:	2101      	movs	r1, #1
 80021e2:	fa01 f202 	lsl.w	r2, r1, r2
 80021e6:	4611      	mov	r1, r2
 80021e8:	4a54      	ldr	r2, [pc, #336]	; (800233c <DIO_writePin+0x20c>)
 80021ea:	430b      	orrs	r3, r1
 80021ec:	6013      	str	r3, [r2, #0]
			break;
 80021ee:	e09b      	b.n	8002328 <DIO_writePin+0x1f8>

		case PORTC_ID:
			if(pinLevel == LOGIC_LOW)
 80021f0:	797b      	ldrb	r3, [r7, #5]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d10b      	bne.n	800220e <DIO_writePin+0xde>
			{
				CLEAR_BIT(DIOC_ODR_REG, pinID);
 80021f6:	4b52      	ldr	r3, [pc, #328]	; (8002340 <DIO_writePin+0x210>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	79ba      	ldrb	r2, [r7, #6]
 80021fc:	2101      	movs	r1, #1
 80021fe:	fa01 f202 	lsl.w	r2, r1, r2
 8002202:	43d2      	mvns	r2, r2
 8002204:	4611      	mov	r1, r2
 8002206:	4a4e      	ldr	r2, [pc, #312]	; (8002340 <DIO_writePin+0x210>)
 8002208:	400b      	ands	r3, r1
 800220a:	6013      	str	r3, [r2, #0]
			}
			else
			{
				SET_BIT(DIOC_ODR_REG, pinID);
			}
			break;
 800220c:	e08c      	b.n	8002328 <DIO_writePin+0x1f8>
				SET_BIT(DIOC_ODR_REG, pinID);
 800220e:	4b4c      	ldr	r3, [pc, #304]	; (8002340 <DIO_writePin+0x210>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	79ba      	ldrb	r2, [r7, #6]
 8002214:	2101      	movs	r1, #1
 8002216:	fa01 f202 	lsl.w	r2, r1, r2
 800221a:	4611      	mov	r1, r2
 800221c:	4a48      	ldr	r2, [pc, #288]	; (8002340 <DIO_writePin+0x210>)
 800221e:	430b      	orrs	r3, r1
 8002220:	6013      	str	r3, [r2, #0]
			break;
 8002222:	e081      	b.n	8002328 <DIO_writePin+0x1f8>

		case PORTD_ID:
			if(pinLevel == LOGIC_LOW)
 8002224:	797b      	ldrb	r3, [r7, #5]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d10b      	bne.n	8002242 <DIO_writePin+0x112>
			{
				CLEAR_BIT(DIOD_ODR_REG, pinID);
 800222a:	4b46      	ldr	r3, [pc, #280]	; (8002344 <DIO_writePin+0x214>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	79ba      	ldrb	r2, [r7, #6]
 8002230:	2101      	movs	r1, #1
 8002232:	fa01 f202 	lsl.w	r2, r1, r2
 8002236:	43d2      	mvns	r2, r2
 8002238:	4611      	mov	r1, r2
 800223a:	4a42      	ldr	r2, [pc, #264]	; (8002344 <DIO_writePin+0x214>)
 800223c:	400b      	ands	r3, r1
 800223e:	6013      	str	r3, [r2, #0]
			}
			else
			{
				SET_BIT(DIOD_ODR_REG, pinID);
			}
			break;
 8002240:	e072      	b.n	8002328 <DIO_writePin+0x1f8>
				SET_BIT(DIOD_ODR_REG, pinID);
 8002242:	4b40      	ldr	r3, [pc, #256]	; (8002344 <DIO_writePin+0x214>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	79ba      	ldrb	r2, [r7, #6]
 8002248:	2101      	movs	r1, #1
 800224a:	fa01 f202 	lsl.w	r2, r1, r2
 800224e:	4611      	mov	r1, r2
 8002250:	4a3c      	ldr	r2, [pc, #240]	; (8002344 <DIO_writePin+0x214>)
 8002252:	430b      	orrs	r3, r1
 8002254:	6013      	str	r3, [r2, #0]
			break;
 8002256:	e067      	b.n	8002328 <DIO_writePin+0x1f8>

		case PORTE_ID:
			if(pinLevel == LOGIC_LOW)
 8002258:	797b      	ldrb	r3, [r7, #5]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d10b      	bne.n	8002276 <DIO_writePin+0x146>
			{
				CLEAR_BIT(DIOE_ODR_REG, pinID);
 800225e:	4b3a      	ldr	r3, [pc, #232]	; (8002348 <DIO_writePin+0x218>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	79ba      	ldrb	r2, [r7, #6]
 8002264:	2101      	movs	r1, #1
 8002266:	fa01 f202 	lsl.w	r2, r1, r2
 800226a:	43d2      	mvns	r2, r2
 800226c:	4611      	mov	r1, r2
 800226e:	4a36      	ldr	r2, [pc, #216]	; (8002348 <DIO_writePin+0x218>)
 8002270:	400b      	ands	r3, r1
 8002272:	6013      	str	r3, [r2, #0]
			}
			else
			{
				SET_BIT(DIOE_ODR_REG, pinID);
			}
			break;
 8002274:	e058      	b.n	8002328 <DIO_writePin+0x1f8>
				SET_BIT(DIOE_ODR_REG, pinID);
 8002276:	4b34      	ldr	r3, [pc, #208]	; (8002348 <DIO_writePin+0x218>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	79ba      	ldrb	r2, [r7, #6]
 800227c:	2101      	movs	r1, #1
 800227e:	fa01 f202 	lsl.w	r2, r1, r2
 8002282:	4611      	mov	r1, r2
 8002284:	4a30      	ldr	r2, [pc, #192]	; (8002348 <DIO_writePin+0x218>)
 8002286:	430b      	orrs	r3, r1
 8002288:	6013      	str	r3, [r2, #0]
			break;
 800228a:	e04d      	b.n	8002328 <DIO_writePin+0x1f8>

		case PORTF_ID:
			if(pinLevel == LOGIC_LOW)
 800228c:	797b      	ldrb	r3, [r7, #5]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d10b      	bne.n	80022aa <DIO_writePin+0x17a>
			{
				CLEAR_BIT(DIOF_ODR_REG, pinID);
 8002292:	4b2e      	ldr	r3, [pc, #184]	; (800234c <DIO_writePin+0x21c>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	79ba      	ldrb	r2, [r7, #6]
 8002298:	2101      	movs	r1, #1
 800229a:	fa01 f202 	lsl.w	r2, r1, r2
 800229e:	43d2      	mvns	r2, r2
 80022a0:	4611      	mov	r1, r2
 80022a2:	4a2a      	ldr	r2, [pc, #168]	; (800234c <DIO_writePin+0x21c>)
 80022a4:	400b      	ands	r3, r1
 80022a6:	6013      	str	r3, [r2, #0]
			}
			else
			{
				SET_BIT(DIOF_ODR_REG, pinID);
			}
			break;
 80022a8:	e03e      	b.n	8002328 <DIO_writePin+0x1f8>
				SET_BIT(DIOF_ODR_REG, pinID);
 80022aa:	4b28      	ldr	r3, [pc, #160]	; (800234c <DIO_writePin+0x21c>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	79ba      	ldrb	r2, [r7, #6]
 80022b0:	2101      	movs	r1, #1
 80022b2:	fa01 f202 	lsl.w	r2, r1, r2
 80022b6:	4611      	mov	r1, r2
 80022b8:	4a24      	ldr	r2, [pc, #144]	; (800234c <DIO_writePin+0x21c>)
 80022ba:	430b      	orrs	r3, r1
 80022bc:	6013      	str	r3, [r2, #0]
			break;
 80022be:	e033      	b.n	8002328 <DIO_writePin+0x1f8>

		case PORTG_ID:
			if(pinLevel == LOGIC_LOW)
 80022c0:	797b      	ldrb	r3, [r7, #5]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d10b      	bne.n	80022de <DIO_writePin+0x1ae>
			{
				CLEAR_BIT(DIOG_ODR_REG, pinID);
 80022c6:	4b22      	ldr	r3, [pc, #136]	; (8002350 <DIO_writePin+0x220>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	79ba      	ldrb	r2, [r7, #6]
 80022cc:	2101      	movs	r1, #1
 80022ce:	fa01 f202 	lsl.w	r2, r1, r2
 80022d2:	43d2      	mvns	r2, r2
 80022d4:	4611      	mov	r1, r2
 80022d6:	4a1e      	ldr	r2, [pc, #120]	; (8002350 <DIO_writePin+0x220>)
 80022d8:	400b      	ands	r3, r1
 80022da:	6013      	str	r3, [r2, #0]
			}
			else
			{
				SET_BIT(DIOG_ODR_REG, pinID);
			}
			break;
 80022dc:	e024      	b.n	8002328 <DIO_writePin+0x1f8>
				SET_BIT(DIOG_ODR_REG, pinID);
 80022de:	4b1c      	ldr	r3, [pc, #112]	; (8002350 <DIO_writePin+0x220>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	79ba      	ldrb	r2, [r7, #6]
 80022e4:	2101      	movs	r1, #1
 80022e6:	fa01 f202 	lsl.w	r2, r1, r2
 80022ea:	4611      	mov	r1, r2
 80022ec:	4a18      	ldr	r2, [pc, #96]	; (8002350 <DIO_writePin+0x220>)
 80022ee:	430b      	orrs	r3, r1
 80022f0:	6013      	str	r3, [r2, #0]
			break;
 80022f2:	e019      	b.n	8002328 <DIO_writePin+0x1f8>

		case PORTH_ID:
			if(pinLevel == LOGIC_LOW)
 80022f4:	797b      	ldrb	r3, [r7, #5]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d10b      	bne.n	8002312 <DIO_writePin+0x1e2>
			{
				CLEAR_BIT(DIOH_ODR_REG, pinID);
 80022fa:	4b16      	ldr	r3, [pc, #88]	; (8002354 <DIO_writePin+0x224>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	79ba      	ldrb	r2, [r7, #6]
 8002300:	2101      	movs	r1, #1
 8002302:	fa01 f202 	lsl.w	r2, r1, r2
 8002306:	43d2      	mvns	r2, r2
 8002308:	4611      	mov	r1, r2
 800230a:	4a12      	ldr	r2, [pc, #72]	; (8002354 <DIO_writePin+0x224>)
 800230c:	400b      	ands	r3, r1
 800230e:	6013      	str	r3, [r2, #0]
			}
			else
			{
				SET_BIT(DIOH_ODR_REG, pinID);
			}
			break;
 8002310:	e009      	b.n	8002326 <DIO_writePin+0x1f6>
				SET_BIT(DIOH_ODR_REG, pinID);
 8002312:	4b10      	ldr	r3, [pc, #64]	; (8002354 <DIO_writePin+0x224>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	79ba      	ldrb	r2, [r7, #6]
 8002318:	2101      	movs	r1, #1
 800231a:	fa01 f202 	lsl.w	r2, r1, r2
 800231e:	4611      	mov	r1, r2
 8002320:	4a0c      	ldr	r2, [pc, #48]	; (8002354 <DIO_writePin+0x224>)
 8002322:	430b      	orrs	r3, r1
 8002324:	6013      	str	r3, [r2, #0]
			break;
 8002326:	bf00      	nop
		}
	}

	return Ret_Val;
 8002328:	7bfb      	ldrb	r3, [r7, #15]
}
 800232a:	4618      	mov	r0, r3
 800232c:	3714      	adds	r7, #20
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	48000014 	.word	0x48000014
 800233c:	48000414 	.word	0x48000414
 8002340:	48000814 	.word	0x48000814
 8002344:	48000c14 	.word	0x48000c14
 8002348:	48001014 	.word	0x48001014
 800234c:	48001414 	.word	0x48001414
 8002350:	48001814 	.word	0x48001814
 8002354:	48001c14 	.word	0x48001c14

08002358 <DIO_setAlternateFunction>:

	return Ret_Val;
}

STD_ReturnState DIO_setAlternateFunction (DIO_PortID portID, DIO_PinID pinID, DIO_AltFuncID altFunID)
{
 8002358:	b480      	push	{r7}
 800235a:	b085      	sub	sp, #20
 800235c:	af00      	add	r7, sp, #0
 800235e:	4603      	mov	r3, r0
 8002360:	71fb      	strb	r3, [r7, #7]
 8002362:	460b      	mov	r3, r1
 8002364:	71bb      	strb	r3, [r7, #6]
 8002366:	4613      	mov	r3, r2
 8002368:	717b      	strb	r3, [r7, #5]
	STD_ReturnState Ret_Val = RET_OK;
 800236a:	2300      	movs	r3, #0
 800236c:	73fb      	strb	r3, [r7, #15]

	if(portID >= NUM_OF_PORTS || pinID >= NUM_OF_PINS_PER_PORT)
 800236e:	79fb      	ldrb	r3, [r7, #7]
 8002370:	2b07      	cmp	r3, #7
 8002372:	d802      	bhi.n	800237a <DIO_setAlternateFunction+0x22>
 8002374:	79bb      	ldrb	r3, [r7, #6]
 8002376:	2b0e      	cmp	r3, #14
 8002378:	d902      	bls.n	8002380 <DIO_setAlternateFunction+0x28>
	{
		Ret_Val = RET_NOK;
 800237a:	2301      	movs	r3, #1
 800237c:	73fb      	strb	r3, [r7, #15]
 800237e:	e16f      	b.n	8002660 <DIO_setAlternateFunction+0x308>
	}

	else if(pinID >= PIN0_ID && pinID <= PIN7_ID)
 8002380:	79bb      	ldrb	r3, [r7, #6]
 8002382:	2b07      	cmp	r3, #7
 8002384:	f200 80b1 	bhi.w	80024ea <DIO_setAlternateFunction+0x192>
	{
		switch (portID)
 8002388:	79fb      	ldrb	r3, [r7, #7]
 800238a:	2b07      	cmp	r3, #7
 800238c:	f200 8168 	bhi.w	8002660 <DIO_setAlternateFunction+0x308>
 8002390:	a201      	add	r2, pc, #4	; (adr r2, 8002398 <DIO_setAlternateFunction+0x40>)
 8002392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002396:	bf00      	nop
 8002398:	080023b9 	.word	0x080023b9
 800239c:	080023df 	.word	0x080023df
 80023a0:	08002405 	.word	0x08002405
 80023a4:	0800242b 	.word	0x0800242b
 80023a8:	08002451 	.word	0x08002451
 80023ac:	08002477 	.word	0x08002477
 80023b0:	0800249d 	.word	0x0800249d
 80023b4:	080024c3 	.word	0x080024c3
		{
		case PORTA_ID:
			DIOA_AFRL_REG = (DIOA_AFRL_REG & ~(0x0F << (pinID*4))) | (altFunID << (pinID*4));
 80023b8:	4bad      	ldr	r3, [pc, #692]	; (8002670 <DIO_setAlternateFunction+0x318>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	79ba      	ldrb	r2, [r7, #6]
 80023be:	0092      	lsls	r2, r2, #2
 80023c0:	210f      	movs	r1, #15
 80023c2:	fa01 f202 	lsl.w	r2, r1, r2
 80023c6:	43d2      	mvns	r2, r2
 80023c8:	4013      	ands	r3, r2
 80023ca:	7979      	ldrb	r1, [r7, #5]
 80023cc:	79ba      	ldrb	r2, [r7, #6]
 80023ce:	0092      	lsls	r2, r2, #2
 80023d0:	fa01 f202 	lsl.w	r2, r1, r2
 80023d4:	4611      	mov	r1, r2
 80023d6:	4aa6      	ldr	r2, [pc, #664]	; (8002670 <DIO_setAlternateFunction+0x318>)
 80023d8:	430b      	orrs	r3, r1
 80023da:	6013      	str	r3, [r2, #0]
			break;
 80023dc:	e140      	b.n	8002660 <DIO_setAlternateFunction+0x308>

		case PORTB_ID:
			DIOB_AFRL_REG = (DIOB_AFRL_REG & ~(0x0F << (pinID*4))) | (altFunID << (pinID*4));
 80023de:	4ba5      	ldr	r3, [pc, #660]	; (8002674 <DIO_setAlternateFunction+0x31c>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	79ba      	ldrb	r2, [r7, #6]
 80023e4:	0092      	lsls	r2, r2, #2
 80023e6:	210f      	movs	r1, #15
 80023e8:	fa01 f202 	lsl.w	r2, r1, r2
 80023ec:	43d2      	mvns	r2, r2
 80023ee:	4013      	ands	r3, r2
 80023f0:	7979      	ldrb	r1, [r7, #5]
 80023f2:	79ba      	ldrb	r2, [r7, #6]
 80023f4:	0092      	lsls	r2, r2, #2
 80023f6:	fa01 f202 	lsl.w	r2, r1, r2
 80023fa:	4611      	mov	r1, r2
 80023fc:	4a9d      	ldr	r2, [pc, #628]	; (8002674 <DIO_setAlternateFunction+0x31c>)
 80023fe:	430b      	orrs	r3, r1
 8002400:	6013      	str	r3, [r2, #0]
			break;
 8002402:	e12d      	b.n	8002660 <DIO_setAlternateFunction+0x308>

		case PORTC_ID:
			DIOC_AFRL_REG = (DIOC_AFRL_REG & ~(0x0F << (pinID*4))) | (altFunID << (pinID*4));
 8002404:	4b9c      	ldr	r3, [pc, #624]	; (8002678 <DIO_setAlternateFunction+0x320>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	79ba      	ldrb	r2, [r7, #6]
 800240a:	0092      	lsls	r2, r2, #2
 800240c:	210f      	movs	r1, #15
 800240e:	fa01 f202 	lsl.w	r2, r1, r2
 8002412:	43d2      	mvns	r2, r2
 8002414:	4013      	ands	r3, r2
 8002416:	7979      	ldrb	r1, [r7, #5]
 8002418:	79ba      	ldrb	r2, [r7, #6]
 800241a:	0092      	lsls	r2, r2, #2
 800241c:	fa01 f202 	lsl.w	r2, r1, r2
 8002420:	4611      	mov	r1, r2
 8002422:	4a95      	ldr	r2, [pc, #596]	; (8002678 <DIO_setAlternateFunction+0x320>)
 8002424:	430b      	orrs	r3, r1
 8002426:	6013      	str	r3, [r2, #0]
			break;
 8002428:	e11a      	b.n	8002660 <DIO_setAlternateFunction+0x308>

		case PORTD_ID:
			DIOD_AFRL_REG = (DIOD_AFRL_REG & ~(0x0F << (pinID*4))) | (altFunID << (pinID*4));
 800242a:	4b94      	ldr	r3, [pc, #592]	; (800267c <DIO_setAlternateFunction+0x324>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	79ba      	ldrb	r2, [r7, #6]
 8002430:	0092      	lsls	r2, r2, #2
 8002432:	210f      	movs	r1, #15
 8002434:	fa01 f202 	lsl.w	r2, r1, r2
 8002438:	43d2      	mvns	r2, r2
 800243a:	4013      	ands	r3, r2
 800243c:	7979      	ldrb	r1, [r7, #5]
 800243e:	79ba      	ldrb	r2, [r7, #6]
 8002440:	0092      	lsls	r2, r2, #2
 8002442:	fa01 f202 	lsl.w	r2, r1, r2
 8002446:	4611      	mov	r1, r2
 8002448:	4a8c      	ldr	r2, [pc, #560]	; (800267c <DIO_setAlternateFunction+0x324>)
 800244a:	430b      	orrs	r3, r1
 800244c:	6013      	str	r3, [r2, #0]
			break;
 800244e:	e107      	b.n	8002660 <DIO_setAlternateFunction+0x308>

		case PORTE_ID:
			DIOE_AFRL_REG = (DIOE_AFRL_REG & ~(0x0F << (pinID*4))) | (altFunID << (pinID*4));
 8002450:	4b8b      	ldr	r3, [pc, #556]	; (8002680 <DIO_setAlternateFunction+0x328>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	79ba      	ldrb	r2, [r7, #6]
 8002456:	0092      	lsls	r2, r2, #2
 8002458:	210f      	movs	r1, #15
 800245a:	fa01 f202 	lsl.w	r2, r1, r2
 800245e:	43d2      	mvns	r2, r2
 8002460:	4013      	ands	r3, r2
 8002462:	7979      	ldrb	r1, [r7, #5]
 8002464:	79ba      	ldrb	r2, [r7, #6]
 8002466:	0092      	lsls	r2, r2, #2
 8002468:	fa01 f202 	lsl.w	r2, r1, r2
 800246c:	4611      	mov	r1, r2
 800246e:	4a84      	ldr	r2, [pc, #528]	; (8002680 <DIO_setAlternateFunction+0x328>)
 8002470:	430b      	orrs	r3, r1
 8002472:	6013      	str	r3, [r2, #0]
			break;
 8002474:	e0f4      	b.n	8002660 <DIO_setAlternateFunction+0x308>

		case PORTF_ID:
			DIOF_AFRL_REG = (DIOF_AFRL_REG & ~(0x0F << (pinID*4))) | (altFunID << (pinID*4));
 8002476:	4b83      	ldr	r3, [pc, #524]	; (8002684 <DIO_setAlternateFunction+0x32c>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	79ba      	ldrb	r2, [r7, #6]
 800247c:	0092      	lsls	r2, r2, #2
 800247e:	210f      	movs	r1, #15
 8002480:	fa01 f202 	lsl.w	r2, r1, r2
 8002484:	43d2      	mvns	r2, r2
 8002486:	4013      	ands	r3, r2
 8002488:	7979      	ldrb	r1, [r7, #5]
 800248a:	79ba      	ldrb	r2, [r7, #6]
 800248c:	0092      	lsls	r2, r2, #2
 800248e:	fa01 f202 	lsl.w	r2, r1, r2
 8002492:	4611      	mov	r1, r2
 8002494:	4a7b      	ldr	r2, [pc, #492]	; (8002684 <DIO_setAlternateFunction+0x32c>)
 8002496:	430b      	orrs	r3, r1
 8002498:	6013      	str	r3, [r2, #0]
			break;
 800249a:	e0e1      	b.n	8002660 <DIO_setAlternateFunction+0x308>

		case PORTG_ID:
			DIOG_AFRL_REG = (DIOG_AFRL_REG & ~(0x0F << (pinID*4))) | (altFunID << (pinID*4));
 800249c:	4b7a      	ldr	r3, [pc, #488]	; (8002688 <DIO_setAlternateFunction+0x330>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	79ba      	ldrb	r2, [r7, #6]
 80024a2:	0092      	lsls	r2, r2, #2
 80024a4:	210f      	movs	r1, #15
 80024a6:	fa01 f202 	lsl.w	r2, r1, r2
 80024aa:	43d2      	mvns	r2, r2
 80024ac:	4013      	ands	r3, r2
 80024ae:	7979      	ldrb	r1, [r7, #5]
 80024b0:	79ba      	ldrb	r2, [r7, #6]
 80024b2:	0092      	lsls	r2, r2, #2
 80024b4:	fa01 f202 	lsl.w	r2, r1, r2
 80024b8:	4611      	mov	r1, r2
 80024ba:	4a73      	ldr	r2, [pc, #460]	; (8002688 <DIO_setAlternateFunction+0x330>)
 80024bc:	430b      	orrs	r3, r1
 80024be:	6013      	str	r3, [r2, #0]
			break;
 80024c0:	e0ce      	b.n	8002660 <DIO_setAlternateFunction+0x308>

		case PORTH_ID:
			DIOH_AFRL_REG = (DIOH_AFRL_REG & ~(0x0F << (pinID*4))) | (altFunID << (pinID*4));
 80024c2:	4b72      	ldr	r3, [pc, #456]	; (800268c <DIO_setAlternateFunction+0x334>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	79ba      	ldrb	r2, [r7, #6]
 80024c8:	0092      	lsls	r2, r2, #2
 80024ca:	210f      	movs	r1, #15
 80024cc:	fa01 f202 	lsl.w	r2, r1, r2
 80024d0:	43d2      	mvns	r2, r2
 80024d2:	4013      	ands	r3, r2
 80024d4:	7979      	ldrb	r1, [r7, #5]
 80024d6:	79ba      	ldrb	r2, [r7, #6]
 80024d8:	0092      	lsls	r2, r2, #2
 80024da:	fa01 f202 	lsl.w	r2, r1, r2
 80024de:	4611      	mov	r1, r2
 80024e0:	4a6a      	ldr	r2, [pc, #424]	; (800268c <DIO_setAlternateFunction+0x334>)
 80024e2:	430b      	orrs	r3, r1
 80024e4:	6013      	str	r3, [r2, #0]
			break;
 80024e6:	bf00      	nop
 80024e8:	e0ba      	b.n	8002660 <DIO_setAlternateFunction+0x308>
		}
	}

	else if(pinID >= PIN8_ID && pinID <= PIN15_ID)
 80024ea:	79bb      	ldrb	r3, [r7, #6]
 80024ec:	2b07      	cmp	r3, #7
 80024ee:	f240 80b7 	bls.w	8002660 <DIO_setAlternateFunction+0x308>
 80024f2:	79bb      	ldrb	r3, [r7, #6]
 80024f4:	2b0f      	cmp	r3, #15
 80024f6:	f200 80b3 	bhi.w	8002660 <DIO_setAlternateFunction+0x308>
	{
		pinID = pinID - 8;
 80024fa:	79bb      	ldrb	r3, [r7, #6]
 80024fc:	3b08      	subs	r3, #8
 80024fe:	71bb      	strb	r3, [r7, #6]

		switch (portID)
 8002500:	79fb      	ldrb	r3, [r7, #7]
 8002502:	2b07      	cmp	r3, #7
 8002504:	f200 80ac 	bhi.w	8002660 <DIO_setAlternateFunction+0x308>
 8002508:	a201      	add	r2, pc, #4	; (adr r2, 8002510 <DIO_setAlternateFunction+0x1b8>)
 800250a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800250e:	bf00      	nop
 8002510:	08002531 	.word	0x08002531
 8002514:	08002557 	.word	0x08002557
 8002518:	0800257d 	.word	0x0800257d
 800251c:	080025a3 	.word	0x080025a3
 8002520:	080025c9 	.word	0x080025c9
 8002524:	080025ef 	.word	0x080025ef
 8002528:	08002615 	.word	0x08002615
 800252c:	0800263b 	.word	0x0800263b
		{
		case PORTA_ID:
			DIOA_AFRH_REG = (DIOA_AFRH_REG & ~(0x0F << (pinID*4))) | (altFunID << (pinID*4));
 8002530:	4b57      	ldr	r3, [pc, #348]	; (8002690 <DIO_setAlternateFunction+0x338>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	79ba      	ldrb	r2, [r7, #6]
 8002536:	0092      	lsls	r2, r2, #2
 8002538:	210f      	movs	r1, #15
 800253a:	fa01 f202 	lsl.w	r2, r1, r2
 800253e:	43d2      	mvns	r2, r2
 8002540:	4013      	ands	r3, r2
 8002542:	7979      	ldrb	r1, [r7, #5]
 8002544:	79ba      	ldrb	r2, [r7, #6]
 8002546:	0092      	lsls	r2, r2, #2
 8002548:	fa01 f202 	lsl.w	r2, r1, r2
 800254c:	4611      	mov	r1, r2
 800254e:	4a50      	ldr	r2, [pc, #320]	; (8002690 <DIO_setAlternateFunction+0x338>)
 8002550:	430b      	orrs	r3, r1
 8002552:	6013      	str	r3, [r2, #0]
			break;
 8002554:	e084      	b.n	8002660 <DIO_setAlternateFunction+0x308>

		case PORTB_ID:
			DIOB_AFRH_REG = (DIOB_AFRH_REG & ~(0x0F << (pinID*4))) | (altFunID << (pinID*4));
 8002556:	4b4f      	ldr	r3, [pc, #316]	; (8002694 <DIO_setAlternateFunction+0x33c>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	79ba      	ldrb	r2, [r7, #6]
 800255c:	0092      	lsls	r2, r2, #2
 800255e:	210f      	movs	r1, #15
 8002560:	fa01 f202 	lsl.w	r2, r1, r2
 8002564:	43d2      	mvns	r2, r2
 8002566:	4013      	ands	r3, r2
 8002568:	7979      	ldrb	r1, [r7, #5]
 800256a:	79ba      	ldrb	r2, [r7, #6]
 800256c:	0092      	lsls	r2, r2, #2
 800256e:	fa01 f202 	lsl.w	r2, r1, r2
 8002572:	4611      	mov	r1, r2
 8002574:	4a47      	ldr	r2, [pc, #284]	; (8002694 <DIO_setAlternateFunction+0x33c>)
 8002576:	430b      	orrs	r3, r1
 8002578:	6013      	str	r3, [r2, #0]
			break;
 800257a:	e071      	b.n	8002660 <DIO_setAlternateFunction+0x308>

		case PORTC_ID:
			DIOC_AFRH_REG = (DIOC_AFRH_REG & ~(0x0F << (pinID*4))) | (altFunID << (pinID*4));
 800257c:	4b46      	ldr	r3, [pc, #280]	; (8002698 <DIO_setAlternateFunction+0x340>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	79ba      	ldrb	r2, [r7, #6]
 8002582:	0092      	lsls	r2, r2, #2
 8002584:	210f      	movs	r1, #15
 8002586:	fa01 f202 	lsl.w	r2, r1, r2
 800258a:	43d2      	mvns	r2, r2
 800258c:	4013      	ands	r3, r2
 800258e:	7979      	ldrb	r1, [r7, #5]
 8002590:	79ba      	ldrb	r2, [r7, #6]
 8002592:	0092      	lsls	r2, r2, #2
 8002594:	fa01 f202 	lsl.w	r2, r1, r2
 8002598:	4611      	mov	r1, r2
 800259a:	4a3f      	ldr	r2, [pc, #252]	; (8002698 <DIO_setAlternateFunction+0x340>)
 800259c:	430b      	orrs	r3, r1
 800259e:	6013      	str	r3, [r2, #0]
			break;
 80025a0:	e05e      	b.n	8002660 <DIO_setAlternateFunction+0x308>

		case PORTD_ID:
			DIOD_AFRH_REG = (DIOD_AFRH_REG & ~(0x0F << (pinID*4))) | (altFunID << (pinID*4));
 80025a2:	4b3e      	ldr	r3, [pc, #248]	; (800269c <DIO_setAlternateFunction+0x344>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	79ba      	ldrb	r2, [r7, #6]
 80025a8:	0092      	lsls	r2, r2, #2
 80025aa:	210f      	movs	r1, #15
 80025ac:	fa01 f202 	lsl.w	r2, r1, r2
 80025b0:	43d2      	mvns	r2, r2
 80025b2:	4013      	ands	r3, r2
 80025b4:	7979      	ldrb	r1, [r7, #5]
 80025b6:	79ba      	ldrb	r2, [r7, #6]
 80025b8:	0092      	lsls	r2, r2, #2
 80025ba:	fa01 f202 	lsl.w	r2, r1, r2
 80025be:	4611      	mov	r1, r2
 80025c0:	4a36      	ldr	r2, [pc, #216]	; (800269c <DIO_setAlternateFunction+0x344>)
 80025c2:	430b      	orrs	r3, r1
 80025c4:	6013      	str	r3, [r2, #0]
			break;
 80025c6:	e04b      	b.n	8002660 <DIO_setAlternateFunction+0x308>

		case PORTE_ID:
			DIOE_AFRH_REG = (DIOE_AFRH_REG & ~(0x0F << (pinID*4))) | (altFunID << (pinID*4));
 80025c8:	4b35      	ldr	r3, [pc, #212]	; (80026a0 <DIO_setAlternateFunction+0x348>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	79ba      	ldrb	r2, [r7, #6]
 80025ce:	0092      	lsls	r2, r2, #2
 80025d0:	210f      	movs	r1, #15
 80025d2:	fa01 f202 	lsl.w	r2, r1, r2
 80025d6:	43d2      	mvns	r2, r2
 80025d8:	4013      	ands	r3, r2
 80025da:	7979      	ldrb	r1, [r7, #5]
 80025dc:	79ba      	ldrb	r2, [r7, #6]
 80025de:	0092      	lsls	r2, r2, #2
 80025e0:	fa01 f202 	lsl.w	r2, r1, r2
 80025e4:	4611      	mov	r1, r2
 80025e6:	4a2e      	ldr	r2, [pc, #184]	; (80026a0 <DIO_setAlternateFunction+0x348>)
 80025e8:	430b      	orrs	r3, r1
 80025ea:	6013      	str	r3, [r2, #0]
			break;
 80025ec:	e038      	b.n	8002660 <DIO_setAlternateFunction+0x308>

		case PORTF_ID:
			DIOF_AFRH_REG = (DIOF_AFRH_REG & ~(0x0F << (pinID*4))) | (altFunID << (pinID*4));
 80025ee:	4b2d      	ldr	r3, [pc, #180]	; (80026a4 <DIO_setAlternateFunction+0x34c>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	79ba      	ldrb	r2, [r7, #6]
 80025f4:	0092      	lsls	r2, r2, #2
 80025f6:	210f      	movs	r1, #15
 80025f8:	fa01 f202 	lsl.w	r2, r1, r2
 80025fc:	43d2      	mvns	r2, r2
 80025fe:	4013      	ands	r3, r2
 8002600:	7979      	ldrb	r1, [r7, #5]
 8002602:	79ba      	ldrb	r2, [r7, #6]
 8002604:	0092      	lsls	r2, r2, #2
 8002606:	fa01 f202 	lsl.w	r2, r1, r2
 800260a:	4611      	mov	r1, r2
 800260c:	4a25      	ldr	r2, [pc, #148]	; (80026a4 <DIO_setAlternateFunction+0x34c>)
 800260e:	430b      	orrs	r3, r1
 8002610:	6013      	str	r3, [r2, #0]
			break;
 8002612:	e025      	b.n	8002660 <DIO_setAlternateFunction+0x308>

		case PORTG_ID:
			DIOG_AFRH_REG = (DIOG_AFRH_REG & ~(0x0F << (pinID*4))) | (altFunID << (pinID*4));
 8002614:	4b24      	ldr	r3, [pc, #144]	; (80026a8 <DIO_setAlternateFunction+0x350>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	79ba      	ldrb	r2, [r7, #6]
 800261a:	0092      	lsls	r2, r2, #2
 800261c:	210f      	movs	r1, #15
 800261e:	fa01 f202 	lsl.w	r2, r1, r2
 8002622:	43d2      	mvns	r2, r2
 8002624:	4013      	ands	r3, r2
 8002626:	7979      	ldrb	r1, [r7, #5]
 8002628:	79ba      	ldrb	r2, [r7, #6]
 800262a:	0092      	lsls	r2, r2, #2
 800262c:	fa01 f202 	lsl.w	r2, r1, r2
 8002630:	4611      	mov	r1, r2
 8002632:	4a1d      	ldr	r2, [pc, #116]	; (80026a8 <DIO_setAlternateFunction+0x350>)
 8002634:	430b      	orrs	r3, r1
 8002636:	6013      	str	r3, [r2, #0]
			break;
 8002638:	e012      	b.n	8002660 <DIO_setAlternateFunction+0x308>

		case PORTH_ID:
			DIOH_AFRH_REG = (DIOH_AFRH_REG & ~(0x0F << (pinID*4))) | (altFunID << (pinID*4));
 800263a:	4b1c      	ldr	r3, [pc, #112]	; (80026ac <DIO_setAlternateFunction+0x354>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	79ba      	ldrb	r2, [r7, #6]
 8002640:	0092      	lsls	r2, r2, #2
 8002642:	210f      	movs	r1, #15
 8002644:	fa01 f202 	lsl.w	r2, r1, r2
 8002648:	43d2      	mvns	r2, r2
 800264a:	4013      	ands	r3, r2
 800264c:	7979      	ldrb	r1, [r7, #5]
 800264e:	79ba      	ldrb	r2, [r7, #6]
 8002650:	0092      	lsls	r2, r2, #2
 8002652:	fa01 f202 	lsl.w	r2, r1, r2
 8002656:	4611      	mov	r1, r2
 8002658:	4a14      	ldr	r2, [pc, #80]	; (80026ac <DIO_setAlternateFunction+0x354>)
 800265a:	430b      	orrs	r3, r1
 800265c:	6013      	str	r3, [r2, #0]
			break;
 800265e:	bf00      	nop
		}
	}

	return Ret_Val;
 8002660:	7bfb      	ldrb	r3, [r7, #15]
}
 8002662:	4618      	mov	r0, r3
 8002664:	3714      	adds	r7, #20
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
 800266e:	bf00      	nop
 8002670:	48000020 	.word	0x48000020
 8002674:	48000420 	.word	0x48000420
 8002678:	48000820 	.word	0x48000820
 800267c:	48000c20 	.word	0x48000c20
 8002680:	48001020 	.word	0x48001020
 8002684:	48001420 	.word	0x48001420
 8002688:	48001820 	.word	0x48001820
 800268c:	48001c20 	.word	0x48001c20
 8002690:	48000024 	.word	0x48000024
 8002694:	48000424 	.word	0x48000424
 8002698:	48000824 	.word	0x48000824
 800269c:	48000c24 	.word	0x48000c24
 80026a0:	48001024 	.word	0x48001024
 80026a4:	48001424 	.word	0x48001424
 80026a8:	48001824 	.word	0x48001824
 80026ac:	48001c24 	.word	0x48001c24

080026b0 <rcc_setSystemClk>:
#include "rcc_reg.h"
#include "bit_math.h"
#include "rcc.h"


void rcc_setSystemClk(rcc_sysClk_t sysClk){
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	4603      	mov	r3, r0
 80026b8:	71fb      	strb	r3, [r7, #7]
	switch(sysClk){
 80026ba:	79fb      	ldrb	r3, [r7, #7]
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d017      	beq.n	80026f0 <rcc_setSystemClk+0x40>
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d02a      	beq.n	800271a <rcc_setSystemClk+0x6a>
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d000      	beq.n	80026ca <rcc_setSystemClk+0x1a>
		/* select PLL as sys clock*/
		RCC_CFGR_REG|=PLL_SW;
		break;

	}
}
 80026c8:	e03c      	b.n	8002744 <rcc_setSystemClk+0x94>
		SET_BIT(RCC_CR_REG,HSION_BIT);
 80026ca:	4b21      	ldr	r3, [pc, #132]	; (8002750 <rcc_setSystemClk+0xa0>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a20      	ldr	r2, [pc, #128]	; (8002750 <rcc_setSystemClk+0xa0>)
 80026d0:	f043 0301 	orr.w	r3, r3, #1
 80026d4:	6013      	str	r3, [r2, #0]
		while(CHECK_BIT(RCC_CR_REG,HSION_READY_FLAG_BIT)==0);
 80026d6:	bf00      	nop
 80026d8:	4b1d      	ldr	r3, [pc, #116]	; (8002750 <rcc_setSystemClk+0xa0>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	085b      	lsrs	r3, r3, #1
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d0f8      	beq.n	80026d8 <rcc_setSystemClk+0x28>
		RCC_CFGR_REG|=HSI_SW;
 80026e6:	4b1b      	ldr	r3, [pc, #108]	; (8002754 <rcc_setSystemClk+0xa4>)
 80026e8:	4a1a      	ldr	r2, [pc, #104]	; (8002754 <rcc_setSystemClk+0xa4>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	6013      	str	r3, [r2, #0]
		break;
 80026ee:	e029      	b.n	8002744 <rcc_setSystemClk+0x94>
		SET_BIT(RCC_CR_REG,HSEON_BIT);
 80026f0:	4b17      	ldr	r3, [pc, #92]	; (8002750 <rcc_setSystemClk+0xa0>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a16      	ldr	r2, [pc, #88]	; (8002750 <rcc_setSystemClk+0xa0>)
 80026f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026fa:	6013      	str	r3, [r2, #0]
		while(CHECK_BIT(RCC_CR_REG,HSEON_READY_FLAG_BIT)==0);
 80026fc:	bf00      	nop
 80026fe:	4b14      	ldr	r3, [pc, #80]	; (8002750 <rcc_setSystemClk+0xa0>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	0c5b      	lsrs	r3, r3, #17
 8002704:	f003 0301 	and.w	r3, r3, #1
 8002708:	2b00      	cmp	r3, #0
 800270a:	d0f8      	beq.n	80026fe <rcc_setSystemClk+0x4e>
		RCC_CFGR_REG|=HSE_SW;
 800270c:	4b11      	ldr	r3, [pc, #68]	; (8002754 <rcc_setSystemClk+0xa4>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a10      	ldr	r2, [pc, #64]	; (8002754 <rcc_setSystemClk+0xa4>)
 8002712:	f043 0301 	orr.w	r3, r3, #1
 8002716:	6013      	str	r3, [r2, #0]
		break;
 8002718:	e014      	b.n	8002744 <rcc_setSystemClk+0x94>
		SET_BIT(RCC_CR_REG,PLLON_BIT);
 800271a:	4b0d      	ldr	r3, [pc, #52]	; (8002750 <rcc_setSystemClk+0xa0>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a0c      	ldr	r2, [pc, #48]	; (8002750 <rcc_setSystemClk+0xa0>)
 8002720:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002724:	6013      	str	r3, [r2, #0]
		while(CHECK_BIT(RCC_CR_REG,PLLON_READY_FLAG_BIT)==0);
 8002726:	bf00      	nop
 8002728:	4b09      	ldr	r3, [pc, #36]	; (8002750 <rcc_setSystemClk+0xa0>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	0e5b      	lsrs	r3, r3, #25
 800272e:	f003 0301 	and.w	r3, r3, #1
 8002732:	2b00      	cmp	r3, #0
 8002734:	d0f8      	beq.n	8002728 <rcc_setSystemClk+0x78>
		RCC_CFGR_REG|=PLL_SW;
 8002736:	4b07      	ldr	r3, [pc, #28]	; (8002754 <rcc_setSystemClk+0xa4>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a06      	ldr	r2, [pc, #24]	; (8002754 <rcc_setSystemClk+0xa4>)
 800273c:	f043 0302 	orr.w	r3, r3, #2
 8002740:	6013      	str	r3, [r2, #0]
		break;
 8002742:	bf00      	nop
}
 8002744:	bf00      	nop
 8002746:	370c      	adds	r7, #12
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr
 8002750:	40021000 	.word	0x40021000
 8002754:	40021004 	.word	0x40021004

08002758 <rcc_enablePeriClk>:
void rcc_enablePeriClk(rcc_busId_t busId , u8 periId ){
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	4603      	mov	r3, r0
 8002760:	460a      	mov	r2, r1
 8002762:	71fb      	strb	r3, [r7, #7]
 8002764:	4613      	mov	r3, r2
 8002766:	71bb      	strb	r3, [r7, #6]
	switch(busId){
 8002768:	79fb      	ldrb	r3, [r7, #7]
 800276a:	2b01      	cmp	r3, #1
 800276c:	d00f      	beq.n	800278e <rcc_enablePeriClk+0x36>
 800276e:	2b02      	cmp	r3, #2
 8002770:	d018      	beq.n	80027a4 <rcc_enablePeriClk+0x4c>
 8002772:	2b00      	cmp	r3, #0
 8002774:	d000      	beq.n	8002778 <rcc_enablePeriClk+0x20>
	case APB2:
		SET_BIT(RCC_APB2ENR_REG,periId);

		break;
	}
}
 8002776:	e020      	b.n	80027ba <rcc_enablePeriClk+0x62>
		SET_BIT(RCC_AHBENR_REG,periId);
 8002778:	4b13      	ldr	r3, [pc, #76]	; (80027c8 <rcc_enablePeriClk+0x70>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	79ba      	ldrb	r2, [r7, #6]
 800277e:	2101      	movs	r1, #1
 8002780:	fa01 f202 	lsl.w	r2, r1, r2
 8002784:	4611      	mov	r1, r2
 8002786:	4a10      	ldr	r2, [pc, #64]	; (80027c8 <rcc_enablePeriClk+0x70>)
 8002788:	430b      	orrs	r3, r1
 800278a:	6013      	str	r3, [r2, #0]
		break;
 800278c:	e015      	b.n	80027ba <rcc_enablePeriClk+0x62>
		SET_BIT(RCC_APB1ENR_REG,periId);
 800278e:	4b0f      	ldr	r3, [pc, #60]	; (80027cc <rcc_enablePeriClk+0x74>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	79ba      	ldrb	r2, [r7, #6]
 8002794:	2101      	movs	r1, #1
 8002796:	fa01 f202 	lsl.w	r2, r1, r2
 800279a:	4611      	mov	r1, r2
 800279c:	4a0b      	ldr	r2, [pc, #44]	; (80027cc <rcc_enablePeriClk+0x74>)
 800279e:	430b      	orrs	r3, r1
 80027a0:	6013      	str	r3, [r2, #0]
		break;
 80027a2:	e00a      	b.n	80027ba <rcc_enablePeriClk+0x62>
		SET_BIT(RCC_APB2ENR_REG,periId);
 80027a4:	4b0a      	ldr	r3, [pc, #40]	; (80027d0 <rcc_enablePeriClk+0x78>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	79ba      	ldrb	r2, [r7, #6]
 80027aa:	2101      	movs	r1, #1
 80027ac:	fa01 f202 	lsl.w	r2, r1, r2
 80027b0:	4611      	mov	r1, r2
 80027b2:	4a07      	ldr	r2, [pc, #28]	; (80027d0 <rcc_enablePeriClk+0x78>)
 80027b4:	430b      	orrs	r3, r1
 80027b6:	6013      	str	r3, [r2, #0]
		break;
 80027b8:	bf00      	nop
}
 80027ba:	bf00      	nop
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop
 80027c8:	40021014 	.word	0x40021014
 80027cc:	4002101c 	.word	0x4002101c
 80027d0:	40021018 	.word	0x40021018

080027d4 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	f103 0208 	add.w	r2, r3, #8
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f04f 32ff 	mov.w	r2, #4294967295
 80027ec:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f103 0208 	add.w	r2, r3, #8
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f103 0208 	add.w	r2, r3, #8
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002808:	bf00      	nop
 800280a:	370c      	adds	r7, #12
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr

08002814 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2200      	movs	r2, #0
 8002820:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002822:	bf00      	nop
 8002824:	370c      	adds	r7, #12
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr

0800282e <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800282e:	b480      	push	{r7}
 8002830:	b085      	sub	sp, #20
 8002832:	af00      	add	r7, sp, #0
 8002834:	6078      	str	r0, [r7, #4]
 8002836:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002844:	d103      	bne.n	800284e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	691b      	ldr	r3, [r3, #16]
 800284a:	60fb      	str	r3, [r7, #12]
 800284c:	e00c      	b.n	8002868 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	3308      	adds	r3, #8
 8002852:	60fb      	str	r3, [r7, #12]
 8002854:	e002      	b.n	800285c <vListInsert+0x2e>
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	60fb      	str	r3, [r7, #12]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	68ba      	ldr	r2, [r7, #8]
 8002864:	429a      	cmp	r2, r3
 8002866:	d2f6      	bcs.n	8002856 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	685a      	ldr	r2, [r3, #4]
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	683a      	ldr	r2, [r7, #0]
 8002876:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	68fa      	ldr	r2, [r7, #12]
 800287c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	683a      	ldr	r2, [r7, #0]
 8002882:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	1c5a      	adds	r2, r3, #1
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	601a      	str	r2, [r3, #0]
}
 8002894:	bf00      	nop
 8002896:	3714      	adds	r7, #20
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr

080028a0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80028a0:	b480      	push	{r7}
 80028a2:	b085      	sub	sp, #20
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	691b      	ldr	r3, [r3, #16]
 80028ac:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	6892      	ldr	r2, [r2, #8]
 80028b6:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	6852      	ldr	r2, [r2, #4]
 80028c0:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d103      	bne.n	80028d4 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	689a      	ldr	r2, [r3, #8]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2200      	movs	r2, #0
 80028d8:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	1e5a      	subs	r2, r3, #1
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3714      	adds	r7, #20
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr

080028f4 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80028f4:	b590      	push	{r4, r7, lr}
 80028f6:	b087      	sub	sp, #28
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80028fe:	2301      	movs	r3, #1
 8002900:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d109      	bne.n	8002920 <xQueueGenericReset+0x2c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800290c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002910:	f383 8811 	msr	BASEPRI, r3
 8002914:	f3bf 8f6f 	isb	sy
 8002918:	f3bf 8f4f 	dsb	sy
 800291c:	60fb      	str	r3, [r7, #12]
 800291e:	e7fe      	b.n	800291e <xQueueGenericReset+0x2a>

    if( ( pxQueue != NULL ) &&
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d058      	beq.n	80029d8 <xQueueGenericReset+0xe4>
        ( pxQueue->uxLength >= 1U ) &&
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 800292a:	2b00      	cmp	r3, #0
 800292c:	d054      	beq.n	80029d8 <xQueueGenericReset+0xe4>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002936:	2000      	movs	r0, #0
 8002938:	fba2 1203 	umull	r1, r2, r2, r3
 800293c:	f04f 0300 	mov.w	r3, #0
 8002940:	f04f 0400 	mov.w	r4, #0
 8002944:	0013      	movs	r3, r2
 8002946:	2400      	movs	r4, #0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d000      	beq.n	800294e <xQueueGenericReset+0x5a>
 800294c:	2001      	movs	r0, #1
 800294e:	4603      	mov	r3, r0
        ( pxQueue->uxLength >= 1U ) &&
 8002950:	2b00      	cmp	r3, #0
 8002952:	d141      	bne.n	80029d8 <xQueueGenericReset+0xe4>
    {
        taskENTER_CRITICAL();
 8002954:	f001 fd34 	bl	80043c0 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002960:	6939      	ldr	r1, [r7, #16]
 8002962:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002964:	fb01 f303 	mul.w	r3, r1, r3
 8002968:	441a      	add	r2, r3
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	2200      	movs	r2, #0
 8002972:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002984:	3b01      	subs	r3, #1
 8002986:	6939      	ldr	r1, [r7, #16]
 8002988:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800298a:	fb01 f303 	mul.w	r3, r1, r3
 800298e:	441a      	add	r2, r3
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	22ff      	movs	r2, #255	; 0xff
 8002998:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	22ff      	movs	r2, #255	; 0xff
 80029a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d109      	bne.n	80029be <xQueueGenericReset+0xca>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	691b      	ldr	r3, [r3, #16]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d00f      	beq.n	80029d2 <xQueueGenericReset+0xde>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	3310      	adds	r3, #16
 80029b6:	4618      	mov	r0, r3
 80029b8:	f000 ff34 	bl	8003824 <xTaskRemoveFromEventList>
 80029bc:	e009      	b.n	80029d2 <xQueueGenericReset+0xde>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	3310      	adds	r3, #16
 80029c2:	4618      	mov	r0, r3
 80029c4:	f7ff ff06 	bl	80027d4 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	3324      	adds	r3, #36	; 0x24
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7ff ff01 	bl	80027d4 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80029d2:	f001 fd23 	bl	800441c <vPortExitCritical>
 80029d6:	e001      	b.n	80029dc <xQueueGenericReset+0xe8>
    }
    else
    {
        xReturn = pdFAIL;
 80029d8:	2300      	movs	r3, #0
 80029da:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d109      	bne.n	80029f6 <xQueueGenericReset+0x102>
 80029e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029e6:	f383 8811 	msr	BASEPRI, r3
 80029ea:	f3bf 8f6f 	isb	sy
 80029ee:	f3bf 8f4f 	dsb	sy
 80029f2:	60bb      	str	r3, [r7, #8]
 80029f4:	e7fe      	b.n	80029f4 <xQueueGenericReset+0x100>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 80029f6:	697b      	ldr	r3, [r7, #20]
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	371c      	adds	r7, #28
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd90      	pop	{r4, r7, pc}

08002a00 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002a00:	b590      	push	{r4, r7, lr}
 8002a02:	b08b      	sub	sp, #44	; 0x2c
 8002a04:	af02      	add	r7, sp, #8
 8002a06:	60f8      	str	r0, [r7, #12]
 8002a08:	60b9      	str	r1, [r7, #8]
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d034      	beq.n	8002a82 <xQueueGenericCreate+0x82>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002a18:	2000      	movs	r0, #0
 8002a1a:	68ba      	ldr	r2, [r7, #8]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	fba2 1203 	umull	r1, r2, r2, r3
 8002a22:	f04f 0300 	mov.w	r3, #0
 8002a26:	f04f 0400 	mov.w	r4, #0
 8002a2a:	0013      	movs	r3, r2
 8002a2c:	2400      	movs	r4, #0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d000      	beq.n	8002a34 <xQueueGenericCreate+0x34>
 8002a32:	2001      	movs	r0, #1
 8002a34:	4603      	mov	r3, r0
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d123      	bne.n	8002a82 <xQueueGenericCreate+0x82>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	68ba      	ldr	r2, [r7, #8]
 8002a3e:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002a42:	f113 0f49 	cmn.w	r3, #73	; 0x49
 8002a46:	d81c      	bhi.n	8002a82 <xQueueGenericCreate+0x82>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	68ba      	ldr	r2, [r7, #8]
 8002a4c:	fb02 f303 	mul.w	r3, r2, r3
 8002a50:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	3348      	adds	r3, #72	; 0x48
 8002a56:	4618      	mov	r0, r3
 8002a58:	f001 fd84 	bl	8004564 <pvPortMalloc>
 8002a5c:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d01b      	beq.n	8002a9c <xQueueGenericCreate+0x9c>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	3348      	adds	r3, #72	; 0x48
 8002a6c:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002a6e:	79fa      	ldrb	r2, [r7, #7]
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	9300      	str	r3, [sp, #0]
 8002a74:	4613      	mov	r3, r2
 8002a76:	697a      	ldr	r2, [r7, #20]
 8002a78:	68b9      	ldr	r1, [r7, #8]
 8002a7a:	68f8      	ldr	r0, [r7, #12]
 8002a7c:	f000 f813 	bl	8002aa6 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8002a80:	e00c      	b.n	8002a9c <xQueueGenericCreate+0x9c>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d109      	bne.n	8002a9c <xQueueGenericCreate+0x9c>
 8002a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a8c:	f383 8811 	msr	BASEPRI, r3
 8002a90:	f3bf 8f6f 	isb	sy
 8002a94:	f3bf 8f4f 	dsb	sy
 8002a98:	613b      	str	r3, [r7, #16]
 8002a9a:	e7fe      	b.n	8002a9a <xQueueGenericCreate+0x9a>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002a9c:	69fb      	ldr	r3, [r7, #28]
    }
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3724      	adds	r7, #36	; 0x24
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd90      	pop	{r4, r7, pc}

08002aa6 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002aa6:	b580      	push	{r7, lr}
 8002aa8:	b084      	sub	sp, #16
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	60f8      	str	r0, [r7, #12]
 8002aae:	60b9      	str	r1, [r7, #8]
 8002ab0:	607a      	str	r2, [r7, #4]
 8002ab2:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d103      	bne.n	8002ac2 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	69ba      	ldr	r2, [r7, #24]
 8002abe:	601a      	str	r2, [r3, #0]
 8002ac0:	e002      	b.n	8002ac8 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002ac2:	69bb      	ldr	r3, [r7, #24]
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	68fa      	ldr	r2, [r7, #12]
 8002acc:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002ace:	69bb      	ldr	r3, [r7, #24]
 8002ad0:	68ba      	ldr	r2, [r7, #8]
 8002ad2:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002ad4:	2101      	movs	r1, #1
 8002ad6:	69b8      	ldr	r0, [r7, #24]
 8002ad8:	f7ff ff0c 	bl	80028f4 <xQueueGenericReset>
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8002adc:	bf00      	nop
 8002ade:	3710      	adds	r7, #16
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b08c      	sub	sp, #48	; 0x30
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	60b9      	str	r1, [r7, #8]
 8002aee:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002af0:	2300      	movs	r3, #0
 8002af2:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d109      	bne.n	8002b12 <xQueueReceive+0x2e>
 8002afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b02:	f383 8811 	msr	BASEPRI, r3
 8002b06:	f3bf 8f6f 	isb	sy
 8002b0a:	f3bf 8f4f 	dsb	sy
 8002b0e:	623b      	str	r3, [r7, #32]
 8002b10:	e7fe      	b.n	8002b10 <xQueueReceive+0x2c>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d103      	bne.n	8002b20 <xQueueReceive+0x3c>
 8002b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d101      	bne.n	8002b24 <xQueueReceive+0x40>
 8002b20:	2301      	movs	r3, #1
 8002b22:	e000      	b.n	8002b26 <xQueueReceive+0x42>
 8002b24:	2300      	movs	r3, #0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d109      	bne.n	8002b3e <xQueueReceive+0x5a>
 8002b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b2e:	f383 8811 	msr	BASEPRI, r3
 8002b32:	f3bf 8f6f 	isb	sy
 8002b36:	f3bf 8f4f 	dsb	sy
 8002b3a:	61fb      	str	r3, [r7, #28]
 8002b3c:	e7fe      	b.n	8002b3c <xQueueReceive+0x58>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002b3e:	f001 f831 	bl	8003ba4 <xTaskGetSchedulerState>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d102      	bne.n	8002b4e <xQueueReceive+0x6a>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d101      	bne.n	8002b52 <xQueueReceive+0x6e>
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e000      	b.n	8002b54 <xQueueReceive+0x70>
 8002b52:	2300      	movs	r3, #0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d109      	bne.n	8002b6c <xQueueReceive+0x88>
 8002b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b5c:	f383 8811 	msr	BASEPRI, r3
 8002b60:	f3bf 8f6f 	isb	sy
 8002b64:	f3bf 8f4f 	dsb	sy
 8002b68:	61bb      	str	r3, [r7, #24]
 8002b6a:	e7fe      	b.n	8002b6a <xQueueReceive+0x86>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002b6c:	f001 fc28 	bl	80043c0 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b74:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d014      	beq.n	8002ba6 <xQueueReceive+0xc2>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002b7c:	68b9      	ldr	r1, [r7, #8]
 8002b7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b80:	f000 f882 	bl	8002c88 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b86:	1e5a      	subs	r2, r3, #1
 8002b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b8a:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b8e:	691b      	ldr	r3, [r3, #16]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d004      	beq.n	8002b9e <xQueueReceive+0xba>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b96:	3310      	adds	r3, #16
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f000 fe43 	bl	8003824 <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002b9e:	f001 fc3d 	bl	800441c <vPortExitCritical>
                return pdPASS;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e069      	b.n	8002c7a <xQueueReceive+0x196>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d103      	bne.n	8002bb4 <xQueueReceive+0xd0>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002bac:	f001 fc36 	bl	800441c <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	e062      	b.n	8002c7a <xQueueReceive+0x196>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d106      	bne.n	8002bc8 <xQueueReceive+0xe4>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002bba:	f107 0310 	add.w	r3, r7, #16
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f000 ff06 	bl	80039d0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002bc8:	f001 fc28 	bl	800441c <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002bcc:	f000 fb6c 	bl	80032a8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002bd0:	f001 fbf6 	bl	80043c0 <vPortEnterCritical>
 8002bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bd6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002bda:	b25b      	sxtb	r3, r3
 8002bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002be0:	d103      	bne.n	8002bea <xQueueReceive+0x106>
 8002be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002be4:	2200      	movs	r2, #0
 8002be6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002bf0:	b25b      	sxtb	r3, r3
 8002bf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bf6:	d103      	bne.n	8002c00 <xQueueReceive+0x11c>
 8002bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c00:	f001 fc0c 	bl	800441c <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002c04:	1d3a      	adds	r2, r7, #4
 8002c06:	f107 0310 	add.w	r3, r7, #16
 8002c0a:	4611      	mov	r1, r2
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f000 fef5 	bl	80039fc <xTaskCheckForTimeOut>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d123      	bne.n	8002c60 <xQueueReceive+0x17c>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002c18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c1a:	f000 f8ad 	bl	8002d78 <prvIsQueueEmpty>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d017      	beq.n	8002c54 <xQueueReceive+0x170>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c26:	3324      	adds	r3, #36	; 0x24
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	4611      	mov	r1, r2
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f000 fd91 	bl	8003754 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002c32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c34:	f000 f84e 	bl	8002cd4 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002c38:	f000 fb44 	bl	80032c4 <xTaskResumeAll>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d194      	bne.n	8002b6c <xQueueReceive+0x88>
                {
                    portYIELD_WITHIN_API();
 8002c42:	4b10      	ldr	r3, [pc, #64]	; (8002c84 <xQueueReceive+0x1a0>)
 8002c44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c48:	601a      	str	r2, [r3, #0]
 8002c4a:	f3bf 8f4f 	dsb	sy
 8002c4e:	f3bf 8f6f 	isb	sy
 8002c52:	e78b      	b.n	8002b6c <xQueueReceive+0x88>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002c54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c56:	f000 f83d 	bl	8002cd4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002c5a:	f000 fb33 	bl	80032c4 <xTaskResumeAll>
 8002c5e:	e785      	b.n	8002b6c <xQueueReceive+0x88>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002c60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c62:	f000 f837 	bl	8002cd4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002c66:	f000 fb2d 	bl	80032c4 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002c6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c6c:	f000 f884 	bl	8002d78 <prvIsQueueEmpty>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	f43f af7a 	beq.w	8002b6c <xQueueReceive+0x88>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8002c78:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3730      	adds	r7, #48	; 0x30
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	e000ed04 	.word	0xe000ed04

08002c88 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b082      	sub	sp, #8
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d018      	beq.n	8002ccc <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	68da      	ldr	r2, [r3, #12]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca2:	441a      	add	r2, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	68da      	ldr	r2, [r3, #12]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d303      	bcc.n	8002cbc <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	68d9      	ldr	r1, [r3, #12]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	6838      	ldr	r0, [r7, #0]
 8002cc8:	f001 fece 	bl	8004a68 <memcpy>
    }
}
 8002ccc:	bf00      	nop
 8002cce:	3708      	adds	r7, #8
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}

08002cd4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b084      	sub	sp, #16
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002cdc:	f001 fb70 	bl	80043c0 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ce6:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002ce8:	e011      	b.n	8002d0e <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d012      	beq.n	8002d18 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	3324      	adds	r3, #36	; 0x24
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f000 fd94 	bl	8003824 <xTaskRemoveFromEventList>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d001      	beq.n	8002d06 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8002d02:	f000 fed7 	bl	8003ab4 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002d06:	7bfb      	ldrb	r3, [r7, #15]
 8002d08:	3b01      	subs	r3, #1
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002d0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	dce9      	bgt.n	8002cea <prvUnlockQueue+0x16>
 8002d16:	e000      	b.n	8002d1a <prvUnlockQueue+0x46>
                    break;
 8002d18:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	22ff      	movs	r2, #255	; 0xff
 8002d1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002d22:	f001 fb7b 	bl	800441c <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002d26:	f001 fb4b 	bl	80043c0 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d30:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002d32:	e011      	b.n	8002d58 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	691b      	ldr	r3, [r3, #16]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d012      	beq.n	8002d62 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	3310      	adds	r3, #16
 8002d40:	4618      	mov	r0, r3
 8002d42:	f000 fd6f 	bl	8003824 <xTaskRemoveFromEventList>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d001      	beq.n	8002d50 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002d4c:	f000 feb2 	bl	8003ab4 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002d50:	7bbb      	ldrb	r3, [r7, #14]
 8002d52:	3b01      	subs	r3, #1
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002d58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	dce9      	bgt.n	8002d34 <prvUnlockQueue+0x60>
 8002d60:	e000      	b.n	8002d64 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002d62:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	22ff      	movs	r2, #255	; 0xff
 8002d68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002d6c:	f001 fb56 	bl	800441c <vPortExitCritical>
}
 8002d70:	bf00      	nop
 8002d72:	3710      	adds	r7, #16
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002d80:	f001 fb1e 	bl	80043c0 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d102      	bne.n	8002d92 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	60fb      	str	r3, [r7, #12]
 8002d90:	e001      	b.n	8002d96 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002d92:	2300      	movs	r3, #0
 8002d94:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002d96:	f001 fb41 	bl	800441c <vPortExitCritical>

    return xReturn;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3710      	adds	r7, #16
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b086      	sub	sp, #24
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	60f8      	str	r0, [r7, #12]
 8002dac:	60b9      	str	r1, [r7, #8]
 8002dae:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002db4:	f001 fb04 	bl	80043c0 <vPortEnterCritical>
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002dbe:	b25b      	sxtb	r3, r3
 8002dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dc4:	d103      	bne.n	8002dce <vQueueWaitForMessageRestricted+0x2a>
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002dd4:	b25b      	sxtb	r3, r3
 8002dd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dda:	d103      	bne.n	8002de4 <vQueueWaitForMessageRestricted+0x40>
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	2200      	movs	r2, #0
 8002de0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002de4:	f001 fb1a 	bl	800441c <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d106      	bne.n	8002dfe <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	3324      	adds	r3, #36	; 0x24
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	68b9      	ldr	r1, [r7, #8]
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f000 fccf 	bl	800379c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002dfe:	6978      	ldr	r0, [r7, #20]
 8002e00:	f7ff ff68 	bl	8002cd4 <prvUnlockQueue>
    }
 8002e04:	bf00      	nop
 8002e06:	3718      	adds	r7, #24
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b08c      	sub	sp, #48	; 0x30
 8002e10:	af04      	add	r7, sp, #16
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	60b9      	str	r1, [r7, #8]
 8002e16:	603b      	str	r3, [r7, #0]
 8002e18:	4613      	mov	r3, r2
 8002e1a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002e1c:	88fb      	ldrh	r3, [r7, #6]
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	4618      	mov	r0, r3
 8002e22:	f001 fb9f 	bl	8004564 <pvPortMalloc>
 8002e26:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d013      	beq.n	8002e56 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002e2e:	2050      	movs	r0, #80	; 0x50
 8002e30:	f001 fb98 	bl	8004564 <pvPortMalloc>
 8002e34:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d008      	beq.n	8002e4e <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002e3c:	2250      	movs	r2, #80	; 0x50
 8002e3e:	2100      	movs	r1, #0
 8002e40:	69f8      	ldr	r0, [r7, #28]
 8002e42:	f001 fe1c 	bl	8004a7e <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	697a      	ldr	r2, [r7, #20]
 8002e4a:	631a      	str	r2, [r3, #48]	; 0x30
 8002e4c:	e005      	b.n	8002e5a <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8002e4e:	6978      	ldr	r0, [r7, #20]
 8002e50:	f001 fc40 	bl	80046d4 <vPortFree>
 8002e54:	e001      	b.n	8002e5a <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8002e56:	2300      	movs	r3, #0
 8002e58:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d013      	beq.n	8002e88 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002e60:	88fa      	ldrh	r2, [r7, #6]
 8002e62:	2300      	movs	r3, #0
 8002e64:	9303      	str	r3, [sp, #12]
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	9302      	str	r3, [sp, #8]
 8002e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e6c:	9301      	str	r3, [sp, #4]
 8002e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e70:	9300      	str	r3, [sp, #0]
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	68b9      	ldr	r1, [r7, #8]
 8002e76:	68f8      	ldr	r0, [r7, #12]
 8002e78:	f000 f80e 	bl	8002e98 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002e7c:	69f8      	ldr	r0, [r7, #28]
 8002e7e:	f000 f88f 	bl	8002fa0 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002e82:	2301      	movs	r3, #1
 8002e84:	61bb      	str	r3, [r7, #24]
 8002e86:	e002      	b.n	8002e8e <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002e88:	f04f 33ff 	mov.w	r3, #4294967295
 8002e8c:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002e8e:	69bb      	ldr	r3, [r7, #24]
    }
 8002e90:	4618      	mov	r0, r3
 8002e92:	3720      	adds	r7, #32
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b088      	sub	sp, #32
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	60b9      	str	r1, [r7, #8]
 8002ea2:	607a      	str	r2, [r7, #4]
 8002ea4:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ea8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002eb0:	3b01      	subs	r3, #1
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	4413      	add	r3, r2
 8002eb6:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002eb8:	69bb      	ldr	r3, [r7, #24]
 8002eba:	f023 0307 	bic.w	r3, r3, #7
 8002ebe:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	f003 0307 	and.w	r3, r3, #7
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d009      	beq.n	8002ede <prvInitialiseNewTask+0x46>
 8002eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ece:	f383 8811 	msr	BASEPRI, r3
 8002ed2:	f3bf 8f6f 	isb	sy
 8002ed6:	f3bf 8f4f 	dsb	sy
 8002eda:	617b      	str	r3, [r7, #20]
 8002edc:	e7fe      	b.n	8002edc <prvInitialiseNewTask+0x44>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d01e      	beq.n	8002f22 <prvInitialiseNewTask+0x8a>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	61fb      	str	r3, [r7, #28]
 8002ee8:	e012      	b.n	8002f10 <prvInitialiseNewTask+0x78>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002eea:	68ba      	ldr	r2, [r7, #8]
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	4413      	add	r3, r2
 8002ef0:	7819      	ldrb	r1, [r3, #0]
 8002ef2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	4413      	add	r3, r2
 8002ef8:	3334      	adds	r3, #52	; 0x34
 8002efa:	460a      	mov	r2, r1
 8002efc:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002efe:	68ba      	ldr	r2, [r7, #8]
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	4413      	add	r3, r2
 8002f04:	781b      	ldrb	r3, [r3, #0]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d006      	beq.n	8002f18 <prvInitialiseNewTask+0x80>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	3301      	adds	r3, #1
 8002f0e:	61fb      	str	r3, [r7, #28]
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	2b09      	cmp	r3, #9
 8002f14:	d9e9      	bls.n	8002eea <prvInitialiseNewTask+0x52>
 8002f16:	e000      	b.n	8002f1a <prvInitialiseNewTask+0x82>
            {
                break;
 8002f18:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f24:	2b04      	cmp	r3, #4
 8002f26:	d909      	bls.n	8002f3c <prvInitialiseNewTask+0xa4>
 8002f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f2c:	f383 8811 	msr	BASEPRI, r3
 8002f30:	f3bf 8f6f 	isb	sy
 8002f34:	f3bf 8f4f 	dsb	sy
 8002f38:	613b      	str	r3, [r7, #16]
 8002f3a:	e7fe      	b.n	8002f3a <prvInitialiseNewTask+0xa2>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f3e:	2b04      	cmp	r3, #4
 8002f40:	d901      	bls.n	8002f46 <prvInitialiseNewTask+0xae>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002f42:	2304      	movs	r3, #4
 8002f44:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f4a:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f50:	641a      	str	r2, [r3, #64]	; 0x40
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f54:	3304      	adds	r3, #4
 8002f56:	4618      	mov	r0, r3
 8002f58:	f7ff fc5c 	bl	8002814 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f5e:	3318      	adds	r3, #24
 8002f60:	4618      	mov	r0, r3
 8002f62:	f7ff fc57 	bl	8002814 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f6a:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f6e:	f1c3 0205 	rsb	r2, r3, #5
 8002f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f74:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f7a:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002f7c:	683a      	ldr	r2, [r7, #0]
 8002f7e:	68f9      	ldr	r1, [r7, #12]
 8002f80:	69b8      	ldr	r0, [r7, #24]
 8002f82:	f001 f8f3 	bl	800416c <pxPortInitialiseStack>
 8002f86:	4602      	mov	r2, r0
 8002f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f8a:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d002      	beq.n	8002f98 <prvInitialiseNewTask+0x100>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f96:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002f98:	bf00      	nop
 8002f9a:	3720      	adds	r7, #32
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}

08002fa0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b084      	sub	sp, #16
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002fa8:	f001 fa0a 	bl	80043c0 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002fac:	4b38      	ldr	r3, [pc, #224]	; (8003090 <prvAddNewTaskToReadyList+0xf0>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	3301      	adds	r3, #1
 8002fb2:	4a37      	ldr	r2, [pc, #220]	; (8003090 <prvAddNewTaskToReadyList+0xf0>)
 8002fb4:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002fb6:	4b37      	ldr	r3, [pc, #220]	; (8003094 <prvAddNewTaskToReadyList+0xf4>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d109      	bne.n	8002fd2 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002fbe:	4a35      	ldr	r2, [pc, #212]	; (8003094 <prvAddNewTaskToReadyList+0xf4>)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002fc4:	4b32      	ldr	r3, [pc, #200]	; (8003090 <prvAddNewTaskToReadyList+0xf0>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d110      	bne.n	8002fee <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002fcc:	f000 fd90 	bl	8003af0 <prvInitialiseTaskLists>
 8002fd0:	e00d      	b.n	8002fee <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002fd2:	4b31      	ldr	r3, [pc, #196]	; (8003098 <prvAddNewTaskToReadyList+0xf8>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d109      	bne.n	8002fee <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002fda:	4b2e      	ldr	r3, [pc, #184]	; (8003094 <prvAddNewTaskToReadyList+0xf4>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d802      	bhi.n	8002fee <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002fe8:	4a2a      	ldr	r2, [pc, #168]	; (8003094 <prvAddNewTaskToReadyList+0xf4>)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002fee:	4b2b      	ldr	r3, [pc, #172]	; (800309c <prvAddNewTaskToReadyList+0xfc>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	4a29      	ldr	r2, [pc, #164]	; (800309c <prvAddNewTaskToReadyList+0xfc>)
 8002ff6:	6013      	str	r3, [r2, #0]
            pxNewTCB->uxTCBNumber = uxTaskNumber;
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	409a      	lsls	r2, r3
 8003000:	4b27      	ldr	r3, [pc, #156]	; (80030a0 <prvAddNewTaskToReadyList+0x100>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4313      	orrs	r3, r2
 8003006:	4a26      	ldr	r2, [pc, #152]	; (80030a0 <prvAddNewTaskToReadyList+0x100>)
 8003008:	6013      	str	r3, [r2, #0]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800300e:	4925      	ldr	r1, [pc, #148]	; (80030a4 <prvAddNewTaskToReadyList+0x104>)
 8003010:	4613      	mov	r3, r2
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	4413      	add	r3, r2
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	440b      	add	r3, r1
 800301a:	3304      	adds	r3, #4
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	60fb      	str	r3, [r7, #12]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	68fa      	ldr	r2, [r7, #12]
 8003024:	609a      	str	r2, [r3, #8]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	689a      	ldr	r2, [r3, #8]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	60da      	str	r2, [r3, #12]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	3204      	adds	r2, #4
 8003036:	605a      	str	r2, [r3, #4]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	1d1a      	adds	r2, r3, #4
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	609a      	str	r2, [r3, #8]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003044:	4613      	mov	r3, r2
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	4413      	add	r3, r2
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	4a15      	ldr	r2, [pc, #84]	; (80030a4 <prvAddNewTaskToReadyList+0x104>)
 800304e:	441a      	add	r2, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	615a      	str	r2, [r3, #20]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003058:	4912      	ldr	r1, [pc, #72]	; (80030a4 <prvAddNewTaskToReadyList+0x104>)
 800305a:	4613      	mov	r3, r2
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	4413      	add	r3, r2
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	440b      	add	r3, r1
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	1c59      	adds	r1, r3, #1
 8003068:	480e      	ldr	r0, [pc, #56]	; (80030a4 <prvAddNewTaskToReadyList+0x104>)
 800306a:	4613      	mov	r3, r2
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	4413      	add	r3, r2
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	4403      	add	r3, r0
 8003074:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8003076:	f001 f9d1 	bl	800441c <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800307a:	4b07      	ldr	r3, [pc, #28]	; (8003098 <prvAddNewTaskToReadyList+0xf8>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d001      	beq.n	8003086 <prvAddNewTaskToReadyList+0xe6>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003082:	4b04      	ldr	r3, [pc, #16]	; (8003094 <prvAddNewTaskToReadyList+0xf4>)
 8003084:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003086:	bf00      	nop
 8003088:	3710      	adds	r7, #16
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	20000140 	.word	0x20000140
 8003094:	20000094 	.word	0x20000094
 8003098:	2000014c 	.word	0x2000014c
 800309c:	2000015c 	.word	0x2000015c
 80030a0:	20000148 	.word	0x20000148
 80030a4:	20000098 	.word	0x20000098

080030a8 <xTaskDelayUntil>:

#if ( INCLUDE_xTaskDelayUntil == 1 )

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b08a      	sub	sp, #40	; 0x28
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	6039      	str	r1, [r7, #0]
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80030b2:	2300      	movs	r3, #0
 80030b4:	627b      	str	r3, [r7, #36]	; 0x24

        configASSERT( pxPreviousWakeTime );
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d109      	bne.n	80030d0 <xTaskDelayUntil+0x28>
 80030bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030c0:	f383 8811 	msr	BASEPRI, r3
 80030c4:	f3bf 8f6f 	isb	sy
 80030c8:	f3bf 8f4f 	dsb	sy
 80030cc:	617b      	str	r3, [r7, #20]
 80030ce:	e7fe      	b.n	80030ce <xTaskDelayUntil+0x26>
        configASSERT( ( xTimeIncrement > 0U ) );
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d109      	bne.n	80030ea <xTaskDelayUntil+0x42>
 80030d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030da:	f383 8811 	msr	BASEPRI, r3
 80030de:	f3bf 8f6f 	isb	sy
 80030e2:	f3bf 8f4f 	dsb	sy
 80030e6:	613b      	str	r3, [r7, #16]
 80030e8:	e7fe      	b.n	80030e8 <xTaskDelayUntil+0x40>
        configASSERT( uxSchedulerSuspended == 0 );
 80030ea:	4b2a      	ldr	r3, [pc, #168]	; (8003194 <xTaskDelayUntil+0xec>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d009      	beq.n	8003106 <xTaskDelayUntil+0x5e>
 80030f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030f6:	f383 8811 	msr	BASEPRI, r3
 80030fa:	f3bf 8f6f 	isb	sy
 80030fe:	f3bf 8f4f 	dsb	sy
 8003102:	60fb      	str	r3, [r7, #12]
 8003104:	e7fe      	b.n	8003104 <xTaskDelayUntil+0x5c>

        vTaskSuspendAll();
 8003106:	f000 f8cf 	bl	80032a8 <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
 800310a:	4b23      	ldr	r3, [pc, #140]	; (8003198 <xTaskDelayUntil+0xf0>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	623b      	str	r3, [r7, #32]

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	683a      	ldr	r2, [r7, #0]
 8003116:	4413      	add	r3, r2
 8003118:	61fb      	str	r3, [r7, #28]

            if( xConstTickCount < *pxPreviousWakeTime )
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	6a3a      	ldr	r2, [r7, #32]
 8003120:	429a      	cmp	r2, r3
 8003122:	d20b      	bcs.n	800313c <xTaskDelayUntil+0x94>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	69fa      	ldr	r2, [r7, #28]
 800312a:	429a      	cmp	r2, r3
 800312c:	d211      	bcs.n	8003152 <xTaskDelayUntil+0xaa>
 800312e:	69fa      	ldr	r2, [r7, #28]
 8003130:	6a3b      	ldr	r3, [r7, #32]
 8003132:	429a      	cmp	r2, r3
 8003134:	d90d      	bls.n	8003152 <xTaskDelayUntil+0xaa>
                {
                    xShouldDelay = pdTRUE;
 8003136:	2301      	movs	r3, #1
 8003138:	627b      	str	r3, [r7, #36]	; 0x24
 800313a:	e00a      	b.n	8003152 <xTaskDelayUntil+0xaa>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	69fa      	ldr	r2, [r7, #28]
 8003142:	429a      	cmp	r2, r3
 8003144:	d303      	bcc.n	800314e <xTaskDelayUntil+0xa6>
 8003146:	69fa      	ldr	r2, [r7, #28]
 8003148:	6a3b      	ldr	r3, [r7, #32]
 800314a:	429a      	cmp	r2, r3
 800314c:	d901      	bls.n	8003152 <xTaskDelayUntil+0xaa>
                {
                    xShouldDelay = pdTRUE;
 800314e:	2301      	movs	r3, #1
 8003150:	627b      	str	r3, [r7, #36]	; 0x24
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	69fa      	ldr	r2, [r7, #28]
 8003156:	601a      	str	r2, [r3, #0]

            if( xShouldDelay != pdFALSE )
 8003158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800315a:	2b00      	cmp	r3, #0
 800315c:	d006      	beq.n	800316c <xTaskDelayUntil+0xc4>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800315e:	69fa      	ldr	r2, [r7, #28]
 8003160:	6a3b      	ldr	r3, [r7, #32]
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	2100      	movs	r1, #0
 8003166:	4618      	mov	r0, r3
 8003168:	f000 fd3a 	bl	8003be0 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 800316c:	f000 f8aa 	bl	80032c4 <xTaskResumeAll>
 8003170:	61b8      	str	r0, [r7, #24]

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d107      	bne.n	8003188 <xTaskDelayUntil+0xe0>
        {
            portYIELD_WITHIN_API();
 8003178:	4b08      	ldr	r3, [pc, #32]	; (800319c <xTaskDelayUntil+0xf4>)
 800317a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800317e:	601a      	str	r2, [r3, #0]
 8003180:	f3bf 8f4f 	dsb	sy
 8003184:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xShouldDelay;
 8003188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800318a:	4618      	mov	r0, r3
 800318c:	3728      	adds	r7, #40	; 0x28
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	20000168 	.word	0x20000168
 8003198:	20000144 	.word	0x20000144
 800319c:	e000ed04 	.word	0xe000ed04

080031a0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80031a8:	2300      	movs	r3, #0
 80031aa:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d016      	beq.n	80031e0 <vTaskDelay+0x40>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 80031b2:	4b13      	ldr	r3, [pc, #76]	; (8003200 <vTaskDelay+0x60>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d009      	beq.n	80031ce <vTaskDelay+0x2e>
 80031ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031be:	f383 8811 	msr	BASEPRI, r3
 80031c2:	f3bf 8f6f 	isb	sy
 80031c6:	f3bf 8f4f 	dsb	sy
 80031ca:	60bb      	str	r3, [r7, #8]
 80031cc:	e7fe      	b.n	80031cc <vTaskDelay+0x2c>
            vTaskSuspendAll();
 80031ce:	f000 f86b 	bl	80032a8 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80031d2:	2100      	movs	r1, #0
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f000 fd03 	bl	8003be0 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80031da:	f000 f873 	bl	80032c4 <xTaskResumeAll>
 80031de:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d107      	bne.n	80031f6 <vTaskDelay+0x56>
        {
            portYIELD_WITHIN_API();
 80031e6:	4b07      	ldr	r3, [pc, #28]	; (8003204 <vTaskDelay+0x64>)
 80031e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031ec:	601a      	str	r2, [r3, #0]
 80031ee:	f3bf 8f4f 	dsb	sy
 80031f2:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80031f6:	bf00      	nop
 80031f8:	3710      	adds	r7, #16
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	20000168 	.word	0x20000168
 8003204:	e000ed04 	.word	0xe000ed04

08003208 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b086      	sub	sp, #24
 800320c:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 800320e:	4b1f      	ldr	r3, [pc, #124]	; (800328c <vTaskStartScheduler+0x84>)
 8003210:	9301      	str	r3, [sp, #4]
 8003212:	2300      	movs	r3, #0
 8003214:	9300      	str	r3, [sp, #0]
 8003216:	2300      	movs	r3, #0
 8003218:	2280      	movs	r2, #128	; 0x80
 800321a:	491d      	ldr	r1, [pc, #116]	; (8003290 <vTaskStartScheduler+0x88>)
 800321c:	481d      	ldr	r0, [pc, #116]	; (8003294 <vTaskStartScheduler+0x8c>)
 800321e:	f7ff fdf5 	bl	8002e0c <xTaskCreate>
 8003222:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2b01      	cmp	r3, #1
 8003228:	d102      	bne.n	8003230 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 800322a:	f000 fd2d 	bl	8003c88 <xTimerCreateTimerTask>
 800322e:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2b01      	cmp	r3, #1
 8003234:	d115      	bne.n	8003262 <vTaskStartScheduler+0x5a>
 8003236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800323a:	f383 8811 	msr	BASEPRI, r3
 800323e:	f3bf 8f6f 	isb	sy
 8003242:	f3bf 8f4f 	dsb	sy
 8003246:	60bb      	str	r3, [r7, #8]
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8003248:	4b13      	ldr	r3, [pc, #76]	; (8003298 <vTaskStartScheduler+0x90>)
 800324a:	f04f 32ff 	mov.w	r2, #4294967295
 800324e:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003250:	4b12      	ldr	r3, [pc, #72]	; (800329c <vTaskStartScheduler+0x94>)
 8003252:	2201      	movs	r2, #1
 8003254:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003256:	4b12      	ldr	r3, [pc, #72]	; (80032a0 <vTaskStartScheduler+0x98>)
 8003258:	2200      	movs	r2, #0
 800325a:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 800325c:	f001 f812 	bl	8004284 <xPortStartScheduler>
 8003260:	e00d      	b.n	800327e <vTaskStartScheduler+0x76>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003268:	d109      	bne.n	800327e <vTaskStartScheduler+0x76>
 800326a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800326e:	f383 8811 	msr	BASEPRI, r3
 8003272:	f3bf 8f6f 	isb	sy
 8003276:	f3bf 8f4f 	dsb	sy
 800327a:	607b      	str	r3, [r7, #4]
 800327c:	e7fe      	b.n	800327c <vTaskStartScheduler+0x74>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800327e:	4b09      	ldr	r3, [pc, #36]	; (80032a4 <vTaskStartScheduler+0x9c>)
 8003280:	681b      	ldr	r3, [r3, #0]
}
 8003282:	bf00      	nop
 8003284:	3710      	adds	r7, #16
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	20000164 	.word	0x20000164
 8003290:	08004aa8 	.word	0x08004aa8
 8003294:	08003acd 	.word	0x08003acd
 8003298:	20000160 	.word	0x20000160
 800329c:	2000014c 	.word	0x2000014c
 80032a0:	20000144 	.word	0x20000144
 80032a4:	20000040 	.word	0x20000040

080032a8 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80032a8:	b480      	push	{r7}
 80032aa:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80032ac:	4b04      	ldr	r3, [pc, #16]	; (80032c0 <vTaskSuspendAll+0x18>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	3301      	adds	r3, #1
 80032b2:	4a03      	ldr	r2, [pc, #12]	; (80032c0 <vTaskSuspendAll+0x18>)
 80032b4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80032b6:	bf00      	nop
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr
 80032c0:	20000168 	.word	0x20000168

080032c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b088      	sub	sp, #32
 80032c8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80032ca:	2300      	movs	r3, #0
 80032cc:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80032ce:	2300      	movs	r3, #0
 80032d0:	617b      	str	r3, [r7, #20]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80032d2:	4b6a      	ldr	r3, [pc, #424]	; (800347c <xTaskResumeAll+0x1b8>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d109      	bne.n	80032ee <xTaskResumeAll+0x2a>
 80032da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032de:	f383 8811 	msr	BASEPRI, r3
 80032e2:	f3bf 8f6f 	isb	sy
 80032e6:	f3bf 8f4f 	dsb	sy
 80032ea:	607b      	str	r3, [r7, #4]
 80032ec:	e7fe      	b.n	80032ec <xTaskResumeAll+0x28>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80032ee:	f001 f867 	bl	80043c0 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80032f2:	4b62      	ldr	r3, [pc, #392]	; (800347c <xTaskResumeAll+0x1b8>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	3b01      	subs	r3, #1
 80032f8:	4a60      	ldr	r2, [pc, #384]	; (800347c <xTaskResumeAll+0x1b8>)
 80032fa:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80032fc:	4b5f      	ldr	r3, [pc, #380]	; (800347c <xTaskResumeAll+0x1b8>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	2b00      	cmp	r3, #0
 8003302:	f040 80b4 	bne.w	800346e <xTaskResumeAll+0x1aa>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003306:	4b5e      	ldr	r3, [pc, #376]	; (8003480 <xTaskResumeAll+0x1bc>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	2b00      	cmp	r3, #0
 800330c:	f000 80af 	beq.w	800346e <xTaskResumeAll+0x1aa>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003310:	e08a      	b.n	8003428 <xTaskResumeAll+0x164>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003312:	4b5c      	ldr	r3, [pc, #368]	; (8003484 <xTaskResumeAll+0x1c0>)
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800331e:	613b      	str	r3, [r7, #16]
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	69db      	ldr	r3, [r3, #28]
 8003324:	69fa      	ldr	r2, [r7, #28]
 8003326:	6a12      	ldr	r2, [r2, #32]
 8003328:	609a      	str	r2, [r3, #8]
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	6a1b      	ldr	r3, [r3, #32]
 800332e:	69fa      	ldr	r2, [r7, #28]
 8003330:	69d2      	ldr	r2, [r2, #28]
 8003332:	605a      	str	r2, [r3, #4]
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	685a      	ldr	r2, [r3, #4]
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	3318      	adds	r3, #24
 800333c:	429a      	cmp	r2, r3
 800333e:	d103      	bne.n	8003348 <xTaskResumeAll+0x84>
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	6a1a      	ldr	r2, [r3, #32]
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	605a      	str	r2, [r3, #4]
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	2200      	movs	r2, #0
 800334c:	629a      	str	r2, [r3, #40]	; 0x28
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	1e5a      	subs	r2, r3, #1
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	695b      	ldr	r3, [r3, #20]
 800335c:	60fb      	str	r3, [r7, #12]
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	69fa      	ldr	r2, [r7, #28]
 8003364:	68d2      	ldr	r2, [r2, #12]
 8003366:	609a      	str	r2, [r3, #8]
 8003368:	69fb      	ldr	r3, [r7, #28]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	69fa      	ldr	r2, [r7, #28]
 800336e:	6892      	ldr	r2, [r2, #8]
 8003370:	605a      	str	r2, [r3, #4]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	685a      	ldr	r2, [r3, #4]
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	3304      	adds	r3, #4
 800337a:	429a      	cmp	r2, r3
 800337c:	d103      	bne.n	8003386 <xTaskResumeAll+0xc2>
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	68da      	ldr	r2, [r3, #12]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	605a      	str	r2, [r3, #4]
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	2200      	movs	r2, #0
 800338a:	615a      	str	r2, [r3, #20]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	1e5a      	subs	r2, r3, #1
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800339a:	2201      	movs	r2, #1
 800339c:	409a      	lsls	r2, r3
 800339e:	4b3a      	ldr	r3, [pc, #232]	; (8003488 <xTaskResumeAll+0x1c4>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	4a38      	ldr	r2, [pc, #224]	; (8003488 <xTaskResumeAll+0x1c4>)
 80033a6:	6013      	str	r3, [r2, #0]
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033ac:	4937      	ldr	r1, [pc, #220]	; (800348c <xTaskResumeAll+0x1c8>)
 80033ae:	4613      	mov	r3, r2
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	4413      	add	r3, r2
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	440b      	add	r3, r1
 80033b8:	3304      	adds	r3, #4
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	60bb      	str	r3, [r7, #8]
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	68ba      	ldr	r2, [r7, #8]
 80033c2:	609a      	str	r2, [r3, #8]
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	689a      	ldr	r2, [r3, #8]
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	60da      	str	r2, [r3, #12]
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	69fa      	ldr	r2, [r7, #28]
 80033d2:	3204      	adds	r2, #4
 80033d4:	605a      	str	r2, [r3, #4]
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	1d1a      	adds	r2, r3, #4
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	609a      	str	r2, [r3, #8]
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033e2:	4613      	mov	r3, r2
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	4413      	add	r3, r2
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	4a28      	ldr	r2, [pc, #160]	; (800348c <xTaskResumeAll+0x1c8>)
 80033ec:	441a      	add	r2, r3
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	615a      	str	r2, [r3, #20]
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033f6:	4925      	ldr	r1, [pc, #148]	; (800348c <xTaskResumeAll+0x1c8>)
 80033f8:	4613      	mov	r3, r2
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	4413      	add	r3, r2
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	440b      	add	r3, r1
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	1c59      	adds	r1, r3, #1
 8003406:	4821      	ldr	r0, [pc, #132]	; (800348c <xTaskResumeAll+0x1c8>)
 8003408:	4613      	mov	r3, r2
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	4413      	add	r3, r2
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	4403      	add	r3, r0
 8003412:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003418:	4b1d      	ldr	r3, [pc, #116]	; (8003490 <xTaskResumeAll+0x1cc>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800341e:	429a      	cmp	r2, r3
 8003420:	d302      	bcc.n	8003428 <xTaskResumeAll+0x164>
                    {
                        xYieldPending = pdTRUE;
 8003422:	4b1c      	ldr	r3, [pc, #112]	; (8003494 <xTaskResumeAll+0x1d0>)
 8003424:	2201      	movs	r2, #1
 8003426:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003428:	4b16      	ldr	r3, [pc, #88]	; (8003484 <xTaskResumeAll+0x1c0>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2b00      	cmp	r3, #0
 800342e:	f47f af70 	bne.w	8003312 <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d001      	beq.n	800343c <xTaskResumeAll+0x178>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003438:	f000 fb98 	bl	8003b6c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800343c:	4b16      	ldr	r3, [pc, #88]	; (8003498 <xTaskResumeAll+0x1d4>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	61bb      	str	r3, [r7, #24]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003442:	69bb      	ldr	r3, [r7, #24]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d010      	beq.n	800346a <xTaskResumeAll+0x1a6>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003448:	f000 f838 	bl	80034bc <xTaskIncrementTick>
 800344c:	4603      	mov	r3, r0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d002      	beq.n	8003458 <xTaskResumeAll+0x194>
                            {
                                xYieldPending = pdTRUE;
 8003452:	4b10      	ldr	r3, [pc, #64]	; (8003494 <xTaskResumeAll+0x1d0>)
 8003454:	2201      	movs	r2, #1
 8003456:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	3b01      	subs	r3, #1
 800345c:	61bb      	str	r3, [r7, #24]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800345e:	69bb      	ldr	r3, [r7, #24]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d1f1      	bne.n	8003448 <xTaskResumeAll+0x184>

                        xPendedTicks = 0;
 8003464:	4b0c      	ldr	r3, [pc, #48]	; (8003498 <xTaskResumeAll+0x1d4>)
 8003466:	2200      	movs	r2, #0
 8003468:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800346a:	4b0a      	ldr	r3, [pc, #40]	; (8003494 <xTaskResumeAll+0x1d0>)
 800346c:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800346e:	f000 ffd5 	bl	800441c <vPortExitCritical>

    return xAlreadyYielded;
 8003472:	697b      	ldr	r3, [r7, #20]
}
 8003474:	4618      	mov	r0, r3
 8003476:	3720      	adds	r7, #32
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}
 800347c:	20000168 	.word	0x20000168
 8003480:	20000140 	.word	0x20000140
 8003484:	2000012c 	.word	0x2000012c
 8003488:	20000148 	.word	0x20000148
 800348c:	20000098 	.word	0x20000098
 8003490:	20000094 	.word	0x20000094
 8003494:	20000154 	.word	0x20000154
 8003498:	20000150 	.word	0x20000150

0800349c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80034a2:	4b05      	ldr	r3, [pc, #20]	; (80034b8 <xTaskGetTickCount+0x1c>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80034a8:	687b      	ldr	r3, [r7, #4]
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	370c      	adds	r7, #12
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr
 80034b6:	bf00      	nop
 80034b8:	20000144 	.word	0x20000144

080034bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b08a      	sub	sp, #40	; 0x28
 80034c0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80034c2:	2300      	movs	r3, #0
 80034c4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80034c6:	4b6d      	ldr	r3, [pc, #436]	; (800367c <xTaskIncrementTick+0x1c0>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	f040 80cc 	bne.w	8003668 <xTaskIncrementTick+0x1ac>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80034d0:	4b6b      	ldr	r3, [pc, #428]	; (8003680 <xTaskIncrementTick+0x1c4>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	3301      	adds	r3, #1
 80034d6:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80034d8:	4a69      	ldr	r2, [pc, #420]	; (8003680 <xTaskIncrementTick+0x1c4>)
 80034da:	6a3b      	ldr	r3, [r7, #32]
 80034dc:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80034de:	6a3b      	ldr	r3, [r7, #32]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d11f      	bne.n	8003524 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 80034e4:	4b67      	ldr	r3, [pc, #412]	; (8003684 <xTaskIncrementTick+0x1c8>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d009      	beq.n	8003502 <xTaskIncrementTick+0x46>
 80034ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034f2:	f383 8811 	msr	BASEPRI, r3
 80034f6:	f3bf 8f6f 	isb	sy
 80034fa:	f3bf 8f4f 	dsb	sy
 80034fe:	607b      	str	r3, [r7, #4]
 8003500:	e7fe      	b.n	8003500 <xTaskIncrementTick+0x44>
 8003502:	4b60      	ldr	r3, [pc, #384]	; (8003684 <xTaskIncrementTick+0x1c8>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	61fb      	str	r3, [r7, #28]
 8003508:	4b5f      	ldr	r3, [pc, #380]	; (8003688 <xTaskIncrementTick+0x1cc>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a5d      	ldr	r2, [pc, #372]	; (8003684 <xTaskIncrementTick+0x1c8>)
 800350e:	6013      	str	r3, [r2, #0]
 8003510:	4a5d      	ldr	r2, [pc, #372]	; (8003688 <xTaskIncrementTick+0x1cc>)
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	6013      	str	r3, [r2, #0]
 8003516:	4b5d      	ldr	r3, [pc, #372]	; (800368c <xTaskIncrementTick+0x1d0>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	3301      	adds	r3, #1
 800351c:	4a5b      	ldr	r2, [pc, #364]	; (800368c <xTaskIncrementTick+0x1d0>)
 800351e:	6013      	str	r3, [r2, #0]
 8003520:	f000 fb24 	bl	8003b6c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003524:	4b5a      	ldr	r3, [pc, #360]	; (8003690 <xTaskIncrementTick+0x1d4>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	6a3a      	ldr	r2, [r7, #32]
 800352a:	429a      	cmp	r2, r3
 800352c:	f0c0 80a1 	bcc.w	8003672 <xTaskIncrementTick+0x1b6>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003530:	4b54      	ldr	r3, [pc, #336]	; (8003684 <xTaskIncrementTick+0x1c8>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d104      	bne.n	8003544 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800353a:	4b55      	ldr	r3, [pc, #340]	; (8003690 <xTaskIncrementTick+0x1d4>)
 800353c:	f04f 32ff 	mov.w	r2, #4294967295
 8003540:	601a      	str	r2, [r3, #0]
                    break;
 8003542:	e096      	b.n	8003672 <xTaskIncrementTick+0x1b6>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003544:	4b4f      	ldr	r3, [pc, #316]	; (8003684 <xTaskIncrementTick+0x1c8>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800354e:	69bb      	ldr	r3, [r7, #24]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8003554:	6a3a      	ldr	r2, [r7, #32]
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	429a      	cmp	r2, r3
 800355a:	d203      	bcs.n	8003564 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800355c:	4a4c      	ldr	r2, [pc, #304]	; (8003690 <xTaskIncrementTick+0x1d4>)
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8003562:	e086      	b.n	8003672 <xTaskIncrementTick+0x1b6>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003564:	69bb      	ldr	r3, [r7, #24]
 8003566:	695b      	ldr	r3, [r3, #20]
 8003568:	613b      	str	r3, [r7, #16]
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	69ba      	ldr	r2, [r7, #24]
 8003570:	68d2      	ldr	r2, [r2, #12]
 8003572:	609a      	str	r2, [r3, #8]
 8003574:	69bb      	ldr	r3, [r7, #24]
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	69ba      	ldr	r2, [r7, #24]
 800357a:	6892      	ldr	r2, [r2, #8]
 800357c:	605a      	str	r2, [r3, #4]
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	685a      	ldr	r2, [r3, #4]
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	3304      	adds	r3, #4
 8003586:	429a      	cmp	r2, r3
 8003588:	d103      	bne.n	8003592 <xTaskIncrementTick+0xd6>
 800358a:	69bb      	ldr	r3, [r7, #24]
 800358c:	68da      	ldr	r2, [r3, #12]
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	605a      	str	r2, [r3, #4]
 8003592:	69bb      	ldr	r3, [r7, #24]
 8003594:	2200      	movs	r2, #0
 8003596:	615a      	str	r2, [r3, #20]
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	1e5a      	subs	r2, r3, #1
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80035a2:	69bb      	ldr	r3, [r7, #24]
 80035a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d01e      	beq.n	80035e8 <xTaskIncrementTick+0x12c>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80035aa:	69bb      	ldr	r3, [r7, #24]
 80035ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ae:	60fb      	str	r3, [r7, #12]
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	69db      	ldr	r3, [r3, #28]
 80035b4:	69ba      	ldr	r2, [r7, #24]
 80035b6:	6a12      	ldr	r2, [r2, #32]
 80035b8:	609a      	str	r2, [r3, #8]
 80035ba:	69bb      	ldr	r3, [r7, #24]
 80035bc:	6a1b      	ldr	r3, [r3, #32]
 80035be:	69ba      	ldr	r2, [r7, #24]
 80035c0:	69d2      	ldr	r2, [r2, #28]
 80035c2:	605a      	str	r2, [r3, #4]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	685a      	ldr	r2, [r3, #4]
 80035c8:	69bb      	ldr	r3, [r7, #24]
 80035ca:	3318      	adds	r3, #24
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d103      	bne.n	80035d8 <xTaskIncrementTick+0x11c>
 80035d0:	69bb      	ldr	r3, [r7, #24]
 80035d2:	6a1a      	ldr	r2, [r3, #32]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	605a      	str	r2, [r3, #4]
 80035d8:	69bb      	ldr	r3, [r7, #24]
 80035da:	2200      	movs	r2, #0
 80035dc:	629a      	str	r2, [r3, #40]	; 0x28
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	1e5a      	subs	r2, r3, #1
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ec:	2201      	movs	r2, #1
 80035ee:	409a      	lsls	r2, r3
 80035f0:	4b28      	ldr	r3, [pc, #160]	; (8003694 <xTaskIncrementTick+0x1d8>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	4a27      	ldr	r2, [pc, #156]	; (8003694 <xTaskIncrementTick+0x1d8>)
 80035f8:	6013      	str	r3, [r2, #0]
 80035fa:	69bb      	ldr	r3, [r7, #24]
 80035fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035fe:	4926      	ldr	r1, [pc, #152]	; (8003698 <xTaskIncrementTick+0x1dc>)
 8003600:	4613      	mov	r3, r2
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	4413      	add	r3, r2
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	440b      	add	r3, r1
 800360a:	3304      	adds	r3, #4
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	60bb      	str	r3, [r7, #8]
 8003610:	69bb      	ldr	r3, [r7, #24]
 8003612:	68ba      	ldr	r2, [r7, #8]
 8003614:	609a      	str	r2, [r3, #8]
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	689a      	ldr	r2, [r3, #8]
 800361a:	69bb      	ldr	r3, [r7, #24]
 800361c:	60da      	str	r2, [r3, #12]
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	69ba      	ldr	r2, [r7, #24]
 8003624:	3204      	adds	r2, #4
 8003626:	605a      	str	r2, [r3, #4]
 8003628:	69bb      	ldr	r3, [r7, #24]
 800362a:	1d1a      	adds	r2, r3, #4
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	609a      	str	r2, [r3, #8]
 8003630:	69bb      	ldr	r3, [r7, #24]
 8003632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003634:	4613      	mov	r3, r2
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	4413      	add	r3, r2
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	4a16      	ldr	r2, [pc, #88]	; (8003698 <xTaskIncrementTick+0x1dc>)
 800363e:	441a      	add	r2, r3
 8003640:	69bb      	ldr	r3, [r7, #24]
 8003642:	615a      	str	r2, [r3, #20]
 8003644:	69bb      	ldr	r3, [r7, #24]
 8003646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003648:	4913      	ldr	r1, [pc, #76]	; (8003698 <xTaskIncrementTick+0x1dc>)
 800364a:	4613      	mov	r3, r2
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	4413      	add	r3, r2
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	440b      	add	r3, r1
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	1c59      	adds	r1, r3, #1
 8003658:	480f      	ldr	r0, [pc, #60]	; (8003698 <xTaskIncrementTick+0x1dc>)
 800365a:	4613      	mov	r3, r2
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	4413      	add	r3, r2
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	4403      	add	r3, r0
 8003664:	6019      	str	r1, [r3, #0]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003666:	e763      	b.n	8003530 <xTaskIncrementTick+0x74>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003668:	4b0c      	ldr	r3, [pc, #48]	; (800369c <xTaskIncrementTick+0x1e0>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	3301      	adds	r3, #1
 800366e:	4a0b      	ldr	r2, [pc, #44]	; (800369c <xTaskIncrementTick+0x1e0>)
 8003670:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8003672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003674:	4618      	mov	r0, r3
 8003676:	3728      	adds	r7, #40	; 0x28
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}
 800367c:	20000168 	.word	0x20000168
 8003680:	20000144 	.word	0x20000144
 8003684:	20000124 	.word	0x20000124
 8003688:	20000128 	.word	0x20000128
 800368c:	20000158 	.word	0x20000158
 8003690:	20000160 	.word	0x20000160
 8003694:	20000148 	.word	0x20000148
 8003698:	20000098 	.word	0x20000098
 800369c:	20000150 	.word	0x20000150

080036a0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80036a0:	b480      	push	{r7}
 80036a2:	b087      	sub	sp, #28
 80036a4:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80036a6:	4b26      	ldr	r3, [pc, #152]	; (8003740 <vTaskSwitchContext+0xa0>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d003      	beq.n	80036b6 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80036ae:	4b25      	ldr	r3, [pc, #148]	; (8003744 <vTaskSwitchContext+0xa4>)
 80036b0:	2201      	movs	r2, #1
 80036b2:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 80036b4:	e03e      	b.n	8003734 <vTaskSwitchContext+0x94>
        xYieldPending = pdFALSE;
 80036b6:	4b23      	ldr	r3, [pc, #140]	; (8003744 <vTaskSwitchContext+0xa4>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036bc:	4b22      	ldr	r3, [pc, #136]	; (8003748 <vTaskSwitchContext+0xa8>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	fab3 f383 	clz	r3, r3
 80036c8:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80036ca:	7afb      	ldrb	r3, [r7, #11]
 80036cc:	f1c3 031f 	rsb	r3, r3, #31
 80036d0:	617b      	str	r3, [r7, #20]
 80036d2:	491e      	ldr	r1, [pc, #120]	; (800374c <vTaskSwitchContext+0xac>)
 80036d4:	697a      	ldr	r2, [r7, #20]
 80036d6:	4613      	mov	r3, r2
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	4413      	add	r3, r2
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	440b      	add	r3, r1
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d109      	bne.n	80036fa <vTaskSwitchContext+0x5a>
        __asm volatile
 80036e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ea:	f383 8811 	msr	BASEPRI, r3
 80036ee:	f3bf 8f6f 	isb	sy
 80036f2:	f3bf 8f4f 	dsb	sy
 80036f6:	607b      	str	r3, [r7, #4]
 80036f8:	e7fe      	b.n	80036f8 <vTaskSwitchContext+0x58>
 80036fa:	697a      	ldr	r2, [r7, #20]
 80036fc:	4613      	mov	r3, r2
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	4413      	add	r3, r2
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	4a11      	ldr	r2, [pc, #68]	; (800374c <vTaskSwitchContext+0xac>)
 8003706:	4413      	add	r3, r2
 8003708:	613b      	str	r3, [r7, #16]
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	685a      	ldr	r2, [r3, #4]
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	605a      	str	r2, [r3, #4]
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	685a      	ldr	r2, [r3, #4]
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	3308      	adds	r3, #8
 800371c:	429a      	cmp	r2, r3
 800371e:	d104      	bne.n	800372a <vTaskSwitchContext+0x8a>
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	685a      	ldr	r2, [r3, #4]
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	605a      	str	r2, [r3, #4]
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	4a07      	ldr	r2, [pc, #28]	; (8003750 <vTaskSwitchContext+0xb0>)
 8003732:	6013      	str	r3, [r2, #0]
}
 8003734:	bf00      	nop
 8003736:	371c      	adds	r7, #28
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr
 8003740:	20000168 	.word	0x20000168
 8003744:	20000154 	.word	0x20000154
 8003748:	20000148 	.word	0x20000148
 800374c:	20000098 	.word	0x20000098
 8003750:	20000094 	.word	0x20000094

08003754 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d109      	bne.n	8003778 <vTaskPlaceOnEventList+0x24>
 8003764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003768:	f383 8811 	msr	BASEPRI, r3
 800376c:	f3bf 8f6f 	isb	sy
 8003770:	f3bf 8f4f 	dsb	sy
 8003774:	60fb      	str	r3, [r7, #12]
 8003776:	e7fe      	b.n	8003776 <vTaskPlaceOnEventList+0x22>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003778:	4b07      	ldr	r3, [pc, #28]	; (8003798 <vTaskPlaceOnEventList+0x44>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	3318      	adds	r3, #24
 800377e:	4619      	mov	r1, r3
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f7ff f854 	bl	800282e <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003786:	2101      	movs	r1, #1
 8003788:	6838      	ldr	r0, [r7, #0]
 800378a:	f000 fa29 	bl	8003be0 <prvAddCurrentTaskToDelayedList>
}
 800378e:	bf00      	nop
 8003790:	3710      	adds	r7, #16
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	20000094 	.word	0x20000094

0800379c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800379c:	b580      	push	{r7, lr}
 800379e:	b086      	sub	sp, #24
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	60f8      	str	r0, [r7, #12]
 80037a4:	60b9      	str	r1, [r7, #8]
 80037a6:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d109      	bne.n	80037c2 <vTaskPlaceOnEventListRestricted+0x26>
 80037ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037b2:	f383 8811 	msr	BASEPRI, r3
 80037b6:	f3bf 8f6f 	isb	sy
 80037ba:	f3bf 8f4f 	dsb	sy
 80037be:	613b      	str	r3, [r7, #16]
 80037c0:	e7fe      	b.n	80037c0 <vTaskPlaceOnEventListRestricted+0x24>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	617b      	str	r3, [r7, #20]
 80037c8:	4b15      	ldr	r3, [pc, #84]	; (8003820 <vTaskPlaceOnEventListRestricted+0x84>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	697a      	ldr	r2, [r7, #20]
 80037ce:	61da      	str	r2, [r3, #28]
 80037d0:	4b13      	ldr	r3, [pc, #76]	; (8003820 <vTaskPlaceOnEventListRestricted+0x84>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	697a      	ldr	r2, [r7, #20]
 80037d6:	6892      	ldr	r2, [r2, #8]
 80037d8:	621a      	str	r2, [r3, #32]
 80037da:	4b11      	ldr	r3, [pc, #68]	; (8003820 <vTaskPlaceOnEventListRestricted+0x84>)
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	3218      	adds	r2, #24
 80037e4:	605a      	str	r2, [r3, #4]
 80037e6:	4b0e      	ldr	r3, [pc, #56]	; (8003820 <vTaskPlaceOnEventListRestricted+0x84>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f103 0218 	add.w	r2, r3, #24
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	609a      	str	r2, [r3, #8]
 80037f2:	4b0b      	ldr	r3, [pc, #44]	; (8003820 <vTaskPlaceOnEventListRestricted+0x84>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	68fa      	ldr	r2, [r7, #12]
 80037f8:	629a      	str	r2, [r3, #40]	; 0x28
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	1c5a      	adds	r2, r3, #1
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d002      	beq.n	8003810 <vTaskPlaceOnEventListRestricted+0x74>
        {
            xTicksToWait = portMAX_DELAY;
 800380a:	f04f 33ff 	mov.w	r3, #4294967295
 800380e:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003810:	6879      	ldr	r1, [r7, #4]
 8003812:	68b8      	ldr	r0, [r7, #8]
 8003814:	f000 f9e4 	bl	8003be0 <prvAddCurrentTaskToDelayedList>
    }
 8003818:	bf00      	nop
 800381a:	3718      	adds	r7, #24
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}
 8003820:	20000094 	.word	0x20000094

08003824 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003824:	b480      	push	{r7}
 8003826:	b08b      	sub	sp, #44	; 0x2c
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8003834:	6a3b      	ldr	r3, [r7, #32]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d109      	bne.n	800384e <xTaskRemoveFromEventList+0x2a>
 800383a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800383e:	f383 8811 	msr	BASEPRI, r3
 8003842:	f3bf 8f6f 	isb	sy
 8003846:	f3bf 8f4f 	dsb	sy
 800384a:	60fb      	str	r3, [r7, #12]
 800384c:	e7fe      	b.n	800384c <xTaskRemoveFromEventList+0x28>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800384e:	6a3b      	ldr	r3, [r7, #32]
 8003850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003852:	61fb      	str	r3, [r7, #28]
 8003854:	6a3b      	ldr	r3, [r7, #32]
 8003856:	69db      	ldr	r3, [r3, #28]
 8003858:	6a3a      	ldr	r2, [r7, #32]
 800385a:	6a12      	ldr	r2, [r2, #32]
 800385c:	609a      	str	r2, [r3, #8]
 800385e:	6a3b      	ldr	r3, [r7, #32]
 8003860:	6a1b      	ldr	r3, [r3, #32]
 8003862:	6a3a      	ldr	r2, [r7, #32]
 8003864:	69d2      	ldr	r2, [r2, #28]
 8003866:	605a      	str	r2, [r3, #4]
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	685a      	ldr	r2, [r3, #4]
 800386c:	6a3b      	ldr	r3, [r7, #32]
 800386e:	3318      	adds	r3, #24
 8003870:	429a      	cmp	r2, r3
 8003872:	d103      	bne.n	800387c <xTaskRemoveFromEventList+0x58>
 8003874:	6a3b      	ldr	r3, [r7, #32]
 8003876:	6a1a      	ldr	r2, [r3, #32]
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	605a      	str	r2, [r3, #4]
 800387c:	6a3b      	ldr	r3, [r7, #32]
 800387e:	2200      	movs	r2, #0
 8003880:	629a      	str	r2, [r3, #40]	; 0x28
 8003882:	69fb      	ldr	r3, [r7, #28]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	1e5a      	subs	r2, r3, #1
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800388c:	4b4a      	ldr	r3, [pc, #296]	; (80039b8 <xTaskRemoveFromEventList+0x194>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d15e      	bne.n	8003952 <xTaskRemoveFromEventList+0x12e>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8003894:	6a3b      	ldr	r3, [r7, #32]
 8003896:	695b      	ldr	r3, [r3, #20]
 8003898:	617b      	str	r3, [r7, #20]
 800389a:	6a3b      	ldr	r3, [r7, #32]
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	6a3a      	ldr	r2, [r7, #32]
 80038a0:	68d2      	ldr	r2, [r2, #12]
 80038a2:	609a      	str	r2, [r3, #8]
 80038a4:	6a3b      	ldr	r3, [r7, #32]
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	6a3a      	ldr	r2, [r7, #32]
 80038aa:	6892      	ldr	r2, [r2, #8]
 80038ac:	605a      	str	r2, [r3, #4]
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	685a      	ldr	r2, [r3, #4]
 80038b2:	6a3b      	ldr	r3, [r7, #32]
 80038b4:	3304      	adds	r3, #4
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d103      	bne.n	80038c2 <xTaskRemoveFromEventList+0x9e>
 80038ba:	6a3b      	ldr	r3, [r7, #32]
 80038bc:	68da      	ldr	r2, [r3, #12]
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	605a      	str	r2, [r3, #4]
 80038c2:	6a3b      	ldr	r3, [r7, #32]
 80038c4:	2200      	movs	r2, #0
 80038c6:	615a      	str	r2, [r3, #20]
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	1e5a      	subs	r2, r3, #1
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80038d2:	6a3b      	ldr	r3, [r7, #32]
 80038d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d6:	2201      	movs	r2, #1
 80038d8:	409a      	lsls	r2, r3
 80038da:	4b38      	ldr	r3, [pc, #224]	; (80039bc <xTaskRemoveFromEventList+0x198>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4313      	orrs	r3, r2
 80038e0:	4a36      	ldr	r2, [pc, #216]	; (80039bc <xTaskRemoveFromEventList+0x198>)
 80038e2:	6013      	str	r3, [r2, #0]
 80038e4:	6a3b      	ldr	r3, [r7, #32]
 80038e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038e8:	4935      	ldr	r1, [pc, #212]	; (80039c0 <xTaskRemoveFromEventList+0x19c>)
 80038ea:	4613      	mov	r3, r2
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	4413      	add	r3, r2
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	440b      	add	r3, r1
 80038f4:	3304      	adds	r3, #4
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	613b      	str	r3, [r7, #16]
 80038fa:	6a3b      	ldr	r3, [r7, #32]
 80038fc:	693a      	ldr	r2, [r7, #16]
 80038fe:	609a      	str	r2, [r3, #8]
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	689a      	ldr	r2, [r3, #8]
 8003904:	6a3b      	ldr	r3, [r7, #32]
 8003906:	60da      	str	r2, [r3, #12]
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	6a3a      	ldr	r2, [r7, #32]
 800390e:	3204      	adds	r2, #4
 8003910:	605a      	str	r2, [r3, #4]
 8003912:	6a3b      	ldr	r3, [r7, #32]
 8003914:	1d1a      	adds	r2, r3, #4
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	609a      	str	r2, [r3, #8]
 800391a:	6a3b      	ldr	r3, [r7, #32]
 800391c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800391e:	4613      	mov	r3, r2
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	4413      	add	r3, r2
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	4a26      	ldr	r2, [pc, #152]	; (80039c0 <xTaskRemoveFromEventList+0x19c>)
 8003928:	441a      	add	r2, r3
 800392a:	6a3b      	ldr	r3, [r7, #32]
 800392c:	615a      	str	r2, [r3, #20]
 800392e:	6a3b      	ldr	r3, [r7, #32]
 8003930:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003932:	4923      	ldr	r1, [pc, #140]	; (80039c0 <xTaskRemoveFromEventList+0x19c>)
 8003934:	4613      	mov	r3, r2
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	4413      	add	r3, r2
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	440b      	add	r3, r1
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	1c59      	adds	r1, r3, #1
 8003942:	481f      	ldr	r0, [pc, #124]	; (80039c0 <xTaskRemoveFromEventList+0x19c>)
 8003944:	4613      	mov	r3, r2
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	4413      	add	r3, r2
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	4403      	add	r3, r0
 800394e:	6019      	str	r1, [r3, #0]
 8003950:	e01b      	b.n	800398a <xTaskRemoveFromEventList+0x166>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003952:	4b1c      	ldr	r3, [pc, #112]	; (80039c4 <xTaskRemoveFromEventList+0x1a0>)
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	61bb      	str	r3, [r7, #24]
 8003958:	6a3b      	ldr	r3, [r7, #32]
 800395a:	69ba      	ldr	r2, [r7, #24]
 800395c:	61da      	str	r2, [r3, #28]
 800395e:	69bb      	ldr	r3, [r7, #24]
 8003960:	689a      	ldr	r2, [r3, #8]
 8003962:	6a3b      	ldr	r3, [r7, #32]
 8003964:	621a      	str	r2, [r3, #32]
 8003966:	69bb      	ldr	r3, [r7, #24]
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	6a3a      	ldr	r2, [r7, #32]
 800396c:	3218      	adds	r2, #24
 800396e:	605a      	str	r2, [r3, #4]
 8003970:	6a3b      	ldr	r3, [r7, #32]
 8003972:	f103 0218 	add.w	r2, r3, #24
 8003976:	69bb      	ldr	r3, [r7, #24]
 8003978:	609a      	str	r2, [r3, #8]
 800397a:	6a3b      	ldr	r3, [r7, #32]
 800397c:	4a11      	ldr	r2, [pc, #68]	; (80039c4 <xTaskRemoveFromEventList+0x1a0>)
 800397e:	629a      	str	r2, [r3, #40]	; 0x28
 8003980:	4b10      	ldr	r3, [pc, #64]	; (80039c4 <xTaskRemoveFromEventList+0x1a0>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	3301      	adds	r3, #1
 8003986:	4a0f      	ldr	r2, [pc, #60]	; (80039c4 <xTaskRemoveFromEventList+0x1a0>)
 8003988:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800398a:	6a3b      	ldr	r3, [r7, #32]
 800398c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800398e:	4b0e      	ldr	r3, [pc, #56]	; (80039c8 <xTaskRemoveFromEventList+0x1a4>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003994:	429a      	cmp	r2, r3
 8003996:	d905      	bls.n	80039a4 <xTaskRemoveFromEventList+0x180>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003998:	2301      	movs	r3, #1
 800399a:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800399c:	4b0b      	ldr	r3, [pc, #44]	; (80039cc <xTaskRemoveFromEventList+0x1a8>)
 800399e:	2201      	movs	r2, #1
 80039a0:	601a      	str	r2, [r3, #0]
 80039a2:	e001      	b.n	80039a8 <xTaskRemoveFromEventList+0x184>
    }
    else
    {
        xReturn = pdFALSE;
 80039a4:	2300      	movs	r3, #0
 80039a6:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 80039a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	372c      	adds	r7, #44	; 0x2c
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr
 80039b6:	bf00      	nop
 80039b8:	20000168 	.word	0x20000168
 80039bc:	20000148 	.word	0x20000148
 80039c0:	20000098 	.word	0x20000098
 80039c4:	2000012c 	.word	0x2000012c
 80039c8:	20000094 	.word	0x20000094
 80039cc:	20000154 	.word	0x20000154

080039d0 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80039d0:	b480      	push	{r7}
 80039d2:	b083      	sub	sp, #12
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80039d8:	4b06      	ldr	r3, [pc, #24]	; (80039f4 <vTaskInternalSetTimeOutState+0x24>)
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80039e0:	4b05      	ldr	r3, [pc, #20]	; (80039f8 <vTaskInternalSetTimeOutState+0x28>)
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	605a      	str	r2, [r3, #4]
}
 80039e8:	bf00      	nop
 80039ea:	370c      	adds	r7, #12
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr
 80039f4:	20000158 	.word	0x20000158
 80039f8:	20000144 	.word	0x20000144

080039fc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b088      	sub	sp, #32
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d109      	bne.n	8003a20 <xTaskCheckForTimeOut+0x24>
 8003a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a10:	f383 8811 	msr	BASEPRI, r3
 8003a14:	f3bf 8f6f 	isb	sy
 8003a18:	f3bf 8f4f 	dsb	sy
 8003a1c:	613b      	str	r3, [r7, #16]
 8003a1e:	e7fe      	b.n	8003a1e <xTaskCheckForTimeOut+0x22>
    configASSERT( pxTicksToWait );
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d109      	bne.n	8003a3a <xTaskCheckForTimeOut+0x3e>
 8003a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a2a:	f383 8811 	msr	BASEPRI, r3
 8003a2e:	f3bf 8f6f 	isb	sy
 8003a32:	f3bf 8f4f 	dsb	sy
 8003a36:	60fb      	str	r3, [r7, #12]
 8003a38:	e7fe      	b.n	8003a38 <xTaskCheckForTimeOut+0x3c>

    taskENTER_CRITICAL();
 8003a3a:	f000 fcc1 	bl	80043c0 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003a3e:	4b1b      	ldr	r3, [pc, #108]	; (8003aac <xTaskCheckForTimeOut+0xb0>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	69ba      	ldr	r2, [r7, #24]
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	617b      	str	r3, [r7, #20]
                xReturn = pdFALSE;
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	4b17      	ldr	r3, [pc, #92]	; (8003ab0 <xTaskCheckForTimeOut+0xb4>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d00a      	beq.n	8003a70 <xTaskCheckForTimeOut+0x74>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	69ba      	ldr	r2, [r7, #24]
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d305      	bcc.n	8003a70 <xTaskCheckForTimeOut+0x74>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003a64:	2301      	movs	r3, #1
 8003a66:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	601a      	str	r2, [r3, #0]
 8003a6e:	e015      	b.n	8003a9c <xTaskCheckForTimeOut+0xa0>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	697a      	ldr	r2, [r7, #20]
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d20b      	bcs.n	8003a92 <xTaskCheckForTimeOut+0x96>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	1ad2      	subs	r2, r2, r3
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f7ff ffa2 	bl	80039d0 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	61fb      	str	r3, [r7, #28]
 8003a90:	e004      	b.n	8003a9c <xTaskCheckForTimeOut+0xa0>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	2200      	movs	r2, #0
 8003a96:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003a9c:	f000 fcbe 	bl	800441c <vPortExitCritical>

    return xReturn;
 8003aa0:	69fb      	ldr	r3, [r7, #28]
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3720      	adds	r7, #32
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	20000144 	.word	0x20000144
 8003ab0:	20000158 	.word	0x20000158

08003ab4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003ab8:	4b03      	ldr	r3, [pc, #12]	; (8003ac8 <vTaskMissedYield+0x14>)
 8003aba:	2201      	movs	r2, #1
 8003abc:	601a      	str	r2, [r3, #0]
}
 8003abe:	bf00      	nop
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr
 8003ac8:	20000154 	.word	0x20000154

08003acc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b082      	sub	sp, #8
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003ad4:	f000 f842 	bl	8003b5c <prvCheckTasksWaitingTermination>
        {
            /* If we are not using preemption we keep forcing a task switch to
             * see if any other task has become available.  If we are using
             * preemption we don't need to do this as any task becoming available
             * will automatically get the processor anyway. */
            taskYIELD();
 8003ad8:	4b04      	ldr	r3, [pc, #16]	; (8003aec <prvIdleTask+0x20>)
 8003ada:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ade:	601a      	str	r2, [r3, #0]
 8003ae0:	f3bf 8f4f 	dsb	sy
 8003ae4:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003ae8:	e7f4      	b.n	8003ad4 <prvIdleTask+0x8>
 8003aea:	bf00      	nop
 8003aec:	e000ed04 	.word	0xe000ed04

08003af0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b082      	sub	sp, #8
 8003af4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003af6:	2300      	movs	r3, #0
 8003af8:	607b      	str	r3, [r7, #4]
 8003afa:	e00c      	b.n	8003b16 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	4613      	mov	r3, r2
 8003b00:	009b      	lsls	r3, r3, #2
 8003b02:	4413      	add	r3, r2
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	4a0f      	ldr	r2, [pc, #60]	; (8003b44 <prvInitialiseTaskLists+0x54>)
 8003b08:	4413      	add	r3, r2
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f7fe fe62 	bl	80027d4 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	3301      	adds	r3, #1
 8003b14:	607b      	str	r3, [r7, #4]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2b04      	cmp	r3, #4
 8003b1a:	d9ef      	bls.n	8003afc <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003b1c:	480a      	ldr	r0, [pc, #40]	; (8003b48 <prvInitialiseTaskLists+0x58>)
 8003b1e:	f7fe fe59 	bl	80027d4 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003b22:	480a      	ldr	r0, [pc, #40]	; (8003b4c <prvInitialiseTaskLists+0x5c>)
 8003b24:	f7fe fe56 	bl	80027d4 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003b28:	4809      	ldr	r0, [pc, #36]	; (8003b50 <prvInitialiseTaskLists+0x60>)
 8003b2a:	f7fe fe53 	bl	80027d4 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003b2e:	4b09      	ldr	r3, [pc, #36]	; (8003b54 <prvInitialiseTaskLists+0x64>)
 8003b30:	4a05      	ldr	r2, [pc, #20]	; (8003b48 <prvInitialiseTaskLists+0x58>)
 8003b32:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003b34:	4b08      	ldr	r3, [pc, #32]	; (8003b58 <prvInitialiseTaskLists+0x68>)
 8003b36:	4a05      	ldr	r2, [pc, #20]	; (8003b4c <prvInitialiseTaskLists+0x5c>)
 8003b38:	601a      	str	r2, [r3, #0]
}
 8003b3a:	bf00      	nop
 8003b3c:	3708      	adds	r7, #8
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	20000098 	.word	0x20000098
 8003b48:	200000fc 	.word	0x200000fc
 8003b4c:	20000110 	.word	0x20000110
 8003b50:	2000012c 	.word	0x2000012c
 8003b54:	20000124 	.word	0x20000124
 8003b58:	20000128 	.word	0x20000128

08003b5c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	af00      	add	r7, sp, #0

            prvDeleteTCB( pxTCB );
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8003b60:	bf00      	nop
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr
	...

08003b6c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b70:	4b0a      	ldr	r3, [pc, #40]	; (8003b9c <prvResetNextTaskUnblockTime+0x30>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d104      	bne.n	8003b84 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003b7a:	4b09      	ldr	r3, [pc, #36]	; (8003ba0 <prvResetNextTaskUnblockTime+0x34>)
 8003b7c:	f04f 32ff 	mov.w	r2, #4294967295
 8003b80:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003b82:	e005      	b.n	8003b90 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003b84:	4b05      	ldr	r3, [pc, #20]	; (8003b9c <prvResetNextTaskUnblockTime+0x30>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a04      	ldr	r2, [pc, #16]	; (8003ba0 <prvResetNextTaskUnblockTime+0x34>)
 8003b8e:	6013      	str	r3, [r2, #0]
}
 8003b90:	bf00      	nop
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr
 8003b9a:	bf00      	nop
 8003b9c:	20000124 	.word	0x20000124
 8003ba0:	20000160 	.word	0x20000160

08003ba4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003ba4:	b480      	push	{r7}
 8003ba6:	b083      	sub	sp, #12
 8003ba8:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003baa:	4b0b      	ldr	r3, [pc, #44]	; (8003bd8 <xTaskGetSchedulerState+0x34>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d102      	bne.n	8003bb8 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	607b      	str	r3, [r7, #4]
 8003bb6:	e008      	b.n	8003bca <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003bb8:	4b08      	ldr	r3, [pc, #32]	; (8003bdc <xTaskGetSchedulerState+0x38>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d102      	bne.n	8003bc6 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003bc0:	2302      	movs	r3, #2
 8003bc2:	607b      	str	r3, [r7, #4]
 8003bc4:	e001      	b.n	8003bca <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003bca:	687b      	ldr	r3, [r7, #4]
    }
 8003bcc:	4618      	mov	r0, r3
 8003bce:	370c      	adds	r7, #12
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr
 8003bd8:	2000014c 	.word	0x2000014c
 8003bdc:	20000168 	.word	0x20000168

08003be0 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b084      	sub	sp, #16
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
 8003be8:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003bea:	4b21      	ldr	r3, [pc, #132]	; (8003c70 <prvAddCurrentTaskToDelayedList+0x90>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	60fb      	str	r3, [r7, #12]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003bf0:	4b20      	ldr	r3, [pc, #128]	; (8003c74 <prvAddCurrentTaskToDelayedList+0x94>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	3304      	adds	r3, #4
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f7fe fe52 	bl	80028a0 <uxListRemove>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d10b      	bne.n	8003c1a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003c02:	4b1c      	ldr	r3, [pc, #112]	; (8003c74 <prvAddCurrentTaskToDelayedList+0x94>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c08:	2201      	movs	r2, #1
 8003c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0e:	43da      	mvns	r2, r3
 8003c10:	4b19      	ldr	r3, [pc, #100]	; (8003c78 <prvAddCurrentTaskToDelayedList+0x98>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4013      	ands	r3, r2
 8003c16:	4a18      	ldr	r2, [pc, #96]	; (8003c78 <prvAddCurrentTaskToDelayedList+0x98>)
 8003c18:	6013      	str	r3, [r2, #0]
    #else /* INCLUDE_vTaskSuspend */
    {
        /* Calculate the time at which the task should be woken if the event
         * does not occur.  This may overflow but this doesn't matter, the kernel
         * will manage it correctly. */
        xTimeToWake = xConstTickCount + xTicksToWait;
 8003c1a:	68fa      	ldr	r2, [r7, #12]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	4413      	add	r3, r2
 8003c20:	60bb      	str	r3, [r7, #8]

        /* The list item will be inserted in wake time order. */
        listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003c22:	4b14      	ldr	r3, [pc, #80]	; (8003c74 <prvAddCurrentTaskToDelayedList+0x94>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	68ba      	ldr	r2, [r7, #8]
 8003c28:	605a      	str	r2, [r3, #4]

        if( xTimeToWake < xConstTickCount )
 8003c2a:	68ba      	ldr	r2, [r7, #8]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d209      	bcs.n	8003c46 <prvAddCurrentTaskToDelayedList+0x66>
        {
            /* Wake time has overflowed.  Place this item in the overflow list. */
            vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c32:	4b12      	ldr	r3, [pc, #72]	; (8003c7c <prvAddCurrentTaskToDelayedList+0x9c>)
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	4b0f      	ldr	r3, [pc, #60]	; (8003c74 <prvAddCurrentTaskToDelayedList+0x94>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	3304      	adds	r3, #4
 8003c3c:	4619      	mov	r1, r3
 8003c3e:	4610      	mov	r0, r2
 8003c40:	f7fe fdf5 	bl	800282e <vListInsert>

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003c44:	e010      	b.n	8003c68 <prvAddCurrentTaskToDelayedList+0x88>
            vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c46:	4b0e      	ldr	r3, [pc, #56]	; (8003c80 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	4b0a      	ldr	r3, [pc, #40]	; (8003c74 <prvAddCurrentTaskToDelayedList+0x94>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	3304      	adds	r3, #4
 8003c50:	4619      	mov	r1, r3
 8003c52:	4610      	mov	r0, r2
 8003c54:	f7fe fdeb 	bl	800282e <vListInsert>
            if( xTimeToWake < xNextTaskUnblockTime )
 8003c58:	4b0a      	ldr	r3, [pc, #40]	; (8003c84 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	68ba      	ldr	r2, [r7, #8]
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d202      	bcs.n	8003c68 <prvAddCurrentTaskToDelayedList+0x88>
                xNextTaskUnblockTime = xTimeToWake;
 8003c62:	4a08      	ldr	r2, [pc, #32]	; (8003c84 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	6013      	str	r3, [r2, #0]
}
 8003c68:	bf00      	nop
 8003c6a:	3710      	adds	r7, #16
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	20000144 	.word	0x20000144
 8003c74:	20000094 	.word	0x20000094
 8003c78:	20000148 	.word	0x20000148
 8003c7c:	20000128 	.word	0x20000128
 8003c80:	20000124 	.word	0x20000124
 8003c84:	20000160 	.word	0x20000160

08003c88 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003c92:	f000 fa41 	bl	8004118 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003c96:	4b10      	ldr	r3, [pc, #64]	; (8003cd8 <xTimerCreateTimerTask+0x50>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d00a      	beq.n	8003cb4 <xTimerCreateTimerTask+0x2c>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8003c9e:	4b0f      	ldr	r3, [pc, #60]	; (8003cdc <xTimerCreateTimerTask+0x54>)
 8003ca0:	9301      	str	r3, [sp, #4]
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	9300      	str	r3, [sp, #0]
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	2280      	movs	r2, #128	; 0x80
 8003caa:	490d      	ldr	r1, [pc, #52]	; (8003ce0 <xTimerCreateTimerTask+0x58>)
 8003cac:	480d      	ldr	r0, [pc, #52]	; (8003ce4 <xTimerCreateTimerTask+0x5c>)
 8003cae:	f7ff f8ad 	bl	8002e0c <xTaskCreate>
 8003cb2:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d109      	bne.n	8003cce <xTimerCreateTimerTask+0x46>
 8003cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cbe:	f383 8811 	msr	BASEPRI, r3
 8003cc2:	f3bf 8f6f 	isb	sy
 8003cc6:	f3bf 8f4f 	dsb	sy
 8003cca:	603b      	str	r3, [r7, #0]
 8003ccc:	e7fe      	b.n	8003ccc <xTimerCreateTimerTask+0x44>
        return xReturn;
 8003cce:	687b      	ldr	r3, [r7, #4]
    }
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3708      	adds	r7, #8
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	2000019c 	.word	0x2000019c
 8003cdc:	200001a0 	.word	0x200001a0
 8003ce0:	08004ab0 	.word	0x08004ab0
 8003ce4:	08003d89 	.word	0x08003d89

08003ce8 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b084      	sub	sp, #16
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	60b9      	str	r1, [r7, #8]
 8003cf2:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003cf4:	e008      	b.n	8003d08 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	699b      	ldr	r3, [r3, #24]
 8003cfa:	68ba      	ldr	r2, [r7, #8]
 8003cfc:	4413      	add	r3, r2
 8003cfe:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6a1b      	ldr	r3, [r3, #32]
 8003d04:	68f8      	ldr	r0, [r7, #12]
 8003d06:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	699a      	ldr	r2, [r3, #24]
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	18d1      	adds	r1, r2, r3
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	68f8      	ldr	r0, [r7, #12]
 8003d16:	f000 f8db 	bl	8003ed0 <prvInsertTimerInActiveList>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d1ea      	bne.n	8003cf6 <prvReloadTimer+0xe>
        }
    }
 8003d20:	bf00      	nop
 8003d22:	3710      	adds	r7, #16
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}

08003d28 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b084      	sub	sp, #16
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d32:	4b14      	ldr	r3, [pc, #80]	; (8003d84 <prvProcessExpiredTimer+0x5c>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	68db      	ldr	r3, [r3, #12]
 8003d3a:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	3304      	adds	r3, #4
 8003d40:	4618      	mov	r0, r3
 8003d42:	f7fe fdad 	bl	80028a0 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003d4c:	f003 0304 	and.w	r3, r3, #4
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d005      	beq.n	8003d60 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8003d54:	683a      	ldr	r2, [r7, #0]
 8003d56:	6879      	ldr	r1, [r7, #4]
 8003d58:	68f8      	ldr	r0, [r7, #12]
 8003d5a:	f7ff ffc5 	bl	8003ce8 <prvReloadTimer>
 8003d5e:	e008      	b.n	8003d72 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003d66:	f023 0301 	bic.w	r3, r3, #1
 8003d6a:	b2da      	uxtb	r2, r3
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	6a1b      	ldr	r3, [r3, #32]
 8003d76:	68f8      	ldr	r0, [r7, #12]
 8003d78:	4798      	blx	r3
    }
 8003d7a:	bf00      	nop
 8003d7c:	3710      	adds	r7, #16
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	20000194 	.word	0x20000194

08003d88 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003d90:	f107 0308 	add.w	r3, r7, #8
 8003d94:	4618      	mov	r0, r3
 8003d96:	f000 f857 	bl	8003e48 <prvGetNextExpireTime>
 8003d9a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	4619      	mov	r1, r3
 8003da0:	68f8      	ldr	r0, [r7, #12]
 8003da2:	f000 f803 	bl	8003dac <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003da6:	f000 f8d5 	bl	8003f54 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003daa:	e7f1      	b.n	8003d90 <prvTimerTask+0x8>

08003dac <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b084      	sub	sp, #16
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003db6:	f7ff fa77 	bl	80032a8 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003dba:	f107 0308 	add.w	r3, r7, #8
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f000 f866 	bl	8003e90 <prvSampleTimeNow>
 8003dc4:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d130      	bne.n	8003e2e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d10a      	bne.n	8003de8 <prvProcessTimerOrBlockTask+0x3c>
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d806      	bhi.n	8003de8 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003dda:	f7ff fa73 	bl	80032c4 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003dde:	68f9      	ldr	r1, [r7, #12]
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f7ff ffa1 	bl	8003d28 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003de6:	e024      	b.n	8003e32 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d008      	beq.n	8003e00 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003dee:	4b13      	ldr	r3, [pc, #76]	; (8003e3c <prvProcessTimerOrBlockTask+0x90>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d101      	bne.n	8003dfc <prvProcessTimerOrBlockTask+0x50>
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e000      	b.n	8003dfe <prvProcessTimerOrBlockTask+0x52>
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003e00:	4b0f      	ldr	r3, [pc, #60]	; (8003e40 <prvProcessTimerOrBlockTask+0x94>)
 8003e02:	6818      	ldr	r0, [r3, #0]
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	683a      	ldr	r2, [r7, #0]
 8003e0c:	4619      	mov	r1, r3
 8003e0e:	f7fe ffc9 	bl	8002da4 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003e12:	f7ff fa57 	bl	80032c4 <xTaskResumeAll>
 8003e16:	4603      	mov	r3, r0
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d10a      	bne.n	8003e32 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003e1c:	4b09      	ldr	r3, [pc, #36]	; (8003e44 <prvProcessTimerOrBlockTask+0x98>)
 8003e1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e22:	601a      	str	r2, [r3, #0]
 8003e24:	f3bf 8f4f 	dsb	sy
 8003e28:	f3bf 8f6f 	isb	sy
    }
 8003e2c:	e001      	b.n	8003e32 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003e2e:	f7ff fa49 	bl	80032c4 <xTaskResumeAll>
    }
 8003e32:	bf00      	nop
 8003e34:	3710      	adds	r7, #16
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	20000198 	.word	0x20000198
 8003e40:	2000019c 	.word	0x2000019c
 8003e44:	e000ed04 	.word	0xe000ed04

08003e48 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003e48:	b480      	push	{r7}
 8003e4a:	b085      	sub	sp, #20
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003e50:	4b0e      	ldr	r3, [pc, #56]	; (8003e8c <prvGetNextExpireTime+0x44>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d101      	bne.n	8003e5e <prvGetNextExpireTime+0x16>
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	e000      	b.n	8003e60 <prvGetNextExpireTime+0x18>
 8003e5e:	2200      	movs	r2, #0
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d105      	bne.n	8003e78 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003e6c:	4b07      	ldr	r3, [pc, #28]	; (8003e8c <prvGetNextExpireTime+0x44>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	68db      	ldr	r3, [r3, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	60fb      	str	r3, [r7, #12]
 8003e76:	e001      	b.n	8003e7c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
    }
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3714      	adds	r7, #20
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr
 8003e8a:	bf00      	nop
 8003e8c:	20000194 	.word	0x20000194

08003e90 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b084      	sub	sp, #16
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003e98:	f7ff fb00 	bl	800349c <xTaskGetTickCount>
 8003e9c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003e9e:	4b0b      	ldr	r3, [pc, #44]	; (8003ecc <prvSampleTimeNow+0x3c>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	68fa      	ldr	r2, [r7, #12]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d205      	bcs.n	8003eb4 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003ea8:	f000 f910 	bl	80040cc <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	601a      	str	r2, [r3, #0]
 8003eb2:	e002      	b.n	8003eba <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003eba:	4a04      	ldr	r2, [pc, #16]	; (8003ecc <prvSampleTimeNow+0x3c>)
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
    }
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3710      	adds	r7, #16
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	200001a4 	.word	0x200001a4

08003ed0 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b086      	sub	sp, #24
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	60f8      	str	r0, [r7, #12]
 8003ed8:	60b9      	str	r1, [r7, #8]
 8003eda:	607a      	str	r2, [r7, #4]
 8003edc:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	68ba      	ldr	r2, [r7, #8]
 8003ee6:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	68fa      	ldr	r2, [r7, #12]
 8003eec:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003eee:	68ba      	ldr	r2, [r7, #8]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d812      	bhi.n	8003f1c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	1ad2      	subs	r2, r2, r3
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	699b      	ldr	r3, [r3, #24]
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d302      	bcc.n	8003f0a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003f04:	2301      	movs	r3, #1
 8003f06:	617b      	str	r3, [r7, #20]
 8003f08:	e01b      	b.n	8003f42 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003f0a:	4b10      	ldr	r3, [pc, #64]	; (8003f4c <prvInsertTimerInActiveList+0x7c>)
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	3304      	adds	r3, #4
 8003f12:	4619      	mov	r1, r3
 8003f14:	4610      	mov	r0, r2
 8003f16:	f7fe fc8a 	bl	800282e <vListInsert>
 8003f1a:	e012      	b.n	8003f42 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d206      	bcs.n	8003f32 <prvInsertTimerInActiveList+0x62>
 8003f24:	68ba      	ldr	r2, [r7, #8]
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d302      	bcc.n	8003f32 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	617b      	str	r3, [r7, #20]
 8003f30:	e007      	b.n	8003f42 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003f32:	4b07      	ldr	r3, [pc, #28]	; (8003f50 <prvInsertTimerInActiveList+0x80>)
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	3304      	adds	r3, #4
 8003f3a:	4619      	mov	r1, r3
 8003f3c:	4610      	mov	r0, r2
 8003f3e:	f7fe fc76 	bl	800282e <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003f42:	697b      	ldr	r3, [r7, #20]
    }
 8003f44:	4618      	mov	r0, r3
 8003f46:	3718      	adds	r7, #24
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	20000198 	.word	0x20000198
 8003f50:	20000194 	.word	0x20000194

08003f54 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b088      	sub	sp, #32
 8003f58:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003f5a:	e0a5      	b.n	80040a8 <prvProcessReceivedCommands+0x154>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	f2c0 80a1 	blt.w	80040a6 <prvProcessReceivedCommands+0x152>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	695b      	ldr	r3, [r3, #20]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d004      	beq.n	8003f7a <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	3304      	adds	r3, #4
 8003f74:	4618      	mov	r0, r3
 8003f76:	f7fe fc93 	bl	80028a0 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003f7a:	1d3b      	adds	r3, r7, #4
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f7ff ff87 	bl	8003e90 <prvSampleTimeNow>
 8003f82:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	3b01      	subs	r3, #1
 8003f88:	2b08      	cmp	r3, #8
 8003f8a:	f200 808d 	bhi.w	80040a8 <prvProcessReceivedCommands+0x154>
 8003f8e:	a201      	add	r2, pc, #4	; (adr r2, 8003f94 <prvProcessReceivedCommands+0x40>)
 8003f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f94:	08003fb9 	.word	0x08003fb9
 8003f98:	08003fb9 	.word	0x08003fb9
 8003f9c:	08004021 	.word	0x08004021
 8003fa0:	08004035 	.word	0x08004035
 8003fa4:	0800407d 	.word	0x0800407d
 8003fa8:	08003fb9 	.word	0x08003fb9
 8003fac:	08003fb9 	.word	0x08003fb9
 8003fb0:	08004021 	.word	0x08004021
 8003fb4:	08004035 	.word	0x08004035
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003fbe:	f043 0301 	orr.w	r3, r3, #1
 8003fc2:	b2da      	uxtb	r2, r3
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003fca:	68fa      	ldr	r2, [r7, #12]
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	699b      	ldr	r3, [r3, #24]
 8003fd0:	18d1      	adds	r1, r2, r3
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	69ba      	ldr	r2, [r7, #24]
 8003fd6:	69f8      	ldr	r0, [r7, #28]
 8003fd8:	f7ff ff7a 	bl	8003ed0 <prvInsertTimerInActiveList>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d062      	beq.n	80040a8 <prvProcessReceivedCommands+0x154>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003fe2:	69fb      	ldr	r3, [r7, #28]
 8003fe4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003fe8:	f003 0304 	and.w	r3, r3, #4
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d009      	beq.n	8004004 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8003ff0:	68fa      	ldr	r2, [r7, #12]
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	699b      	ldr	r3, [r3, #24]
 8003ff6:	4413      	add	r3, r2
 8003ff8:	69ba      	ldr	r2, [r7, #24]
 8003ffa:	4619      	mov	r1, r3
 8003ffc:	69f8      	ldr	r0, [r7, #28]
 8003ffe:	f7ff fe73 	bl	8003ce8 <prvReloadTimer>
 8004002:	e008      	b.n	8004016 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800400a:	f023 0301 	bic.w	r3, r3, #1
 800400e:	b2da      	uxtb	r2, r3
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004016:	69fb      	ldr	r3, [r7, #28]
 8004018:	6a1b      	ldr	r3, [r3, #32]
 800401a:	69f8      	ldr	r0, [r7, #28]
 800401c:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800401e:	e043      	b.n	80040a8 <prvProcessReceivedCommands+0x154>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004026:	f023 0301 	bic.w	r3, r3, #1
 800402a:	b2da      	uxtb	r2, r3
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                        break;
 8004032:	e039      	b.n	80040a8 <prvProcessReceivedCommands+0x154>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800403a:	f043 0301 	orr.w	r3, r3, #1
 800403e:	b2da      	uxtb	r2, r3
 8004040:	69fb      	ldr	r3, [r7, #28]
 8004042:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004046:	68fa      	ldr	r2, [r7, #12]
 8004048:	69fb      	ldr	r3, [r7, #28]
 800404a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	699b      	ldr	r3, [r3, #24]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d109      	bne.n	8004068 <prvProcessReceivedCommands+0x114>
 8004054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004058:	f383 8811 	msr	BASEPRI, r3
 800405c:	f3bf 8f6f 	isb	sy
 8004060:	f3bf 8f4f 	dsb	sy
 8004064:	617b      	str	r3, [r7, #20]
 8004066:	e7fe      	b.n	8004066 <prvProcessReceivedCommands+0x112>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004068:	69fb      	ldr	r3, [r7, #28]
 800406a:	699a      	ldr	r2, [r3, #24]
 800406c:	69bb      	ldr	r3, [r7, #24]
 800406e:	18d1      	adds	r1, r2, r3
 8004070:	69bb      	ldr	r3, [r7, #24]
 8004072:	69ba      	ldr	r2, [r7, #24]
 8004074:	69f8      	ldr	r0, [r7, #28]
 8004076:	f7ff ff2b 	bl	8003ed0 <prvInsertTimerInActiveList>
                        break;
 800407a:	e015      	b.n	80040a8 <prvProcessReceivedCommands+0x154>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800407c:	69fb      	ldr	r3, [r7, #28]
 800407e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004082:	f003 0302 	and.w	r3, r3, #2
 8004086:	2b00      	cmp	r3, #0
 8004088:	d103      	bne.n	8004092 <prvProcessReceivedCommands+0x13e>
                            {
                                vPortFree( pxTimer );
 800408a:	69f8      	ldr	r0, [r7, #28]
 800408c:	f000 fb22 	bl	80046d4 <vPortFree>
 8004090:	e00a      	b.n	80040a8 <prvProcessReceivedCommands+0x154>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004098:	f023 0301 	bic.w	r3, r3, #1
 800409c:	b2da      	uxtb	r2, r3
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80040a4:	e000      	b.n	80040a8 <prvProcessReceivedCommands+0x154>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 80040a6:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80040a8:	4b07      	ldr	r3, [pc, #28]	; (80040c8 <prvProcessReceivedCommands+0x174>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f107 0108 	add.w	r1, r7, #8
 80040b0:	2200      	movs	r2, #0
 80040b2:	4618      	mov	r0, r3
 80040b4:	f7fe fd16 	bl	8002ae4 <xQueueReceive>
 80040b8:	4603      	mov	r3, r0
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	f47f af4e 	bne.w	8003f5c <prvProcessReceivedCommands+0x8>
        }
    }
 80040c0:	bf00      	nop
 80040c2:	3720      	adds	r7, #32
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}
 80040c8:	2000019c 	.word	0x2000019c

080040cc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b082      	sub	sp, #8
 80040d0:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80040d2:	e009      	b.n	80040e8 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80040d4:	4b0e      	ldr	r3, [pc, #56]	; (8004110 <prvSwitchTimerLists+0x44>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 80040de:	f04f 31ff 	mov.w	r1, #4294967295
 80040e2:	6838      	ldr	r0, [r7, #0]
 80040e4:	f7ff fe20 	bl	8003d28 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80040e8:	4b09      	ldr	r3, [pc, #36]	; (8004110 <prvSwitchTimerLists+0x44>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d1f0      	bne.n	80040d4 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 80040f2:	4b07      	ldr	r3, [pc, #28]	; (8004110 <prvSwitchTimerLists+0x44>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 80040f8:	4b06      	ldr	r3, [pc, #24]	; (8004114 <prvSwitchTimerLists+0x48>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a04      	ldr	r2, [pc, #16]	; (8004110 <prvSwitchTimerLists+0x44>)
 80040fe:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004100:	4a04      	ldr	r2, [pc, #16]	; (8004114 <prvSwitchTimerLists+0x48>)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6013      	str	r3, [r2, #0]
    }
 8004106:	bf00      	nop
 8004108:	3708      	adds	r7, #8
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop
 8004110:	20000194 	.word	0x20000194
 8004114:	20000198 	.word	0x20000198

08004118 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004118:	b580      	push	{r7, lr}
 800411a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800411c:	f000 f950 	bl	80043c0 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004120:	4b0d      	ldr	r3, [pc, #52]	; (8004158 <prvCheckForValidListAndQueue+0x40>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d113      	bne.n	8004150 <prvCheckForValidListAndQueue+0x38>
            {
                vListInitialise( &xActiveTimerList1 );
 8004128:	480c      	ldr	r0, [pc, #48]	; (800415c <prvCheckForValidListAndQueue+0x44>)
 800412a:	f7fe fb53 	bl	80027d4 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800412e:	480c      	ldr	r0, [pc, #48]	; (8004160 <prvCheckForValidListAndQueue+0x48>)
 8004130:	f7fe fb50 	bl	80027d4 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004134:	4b0b      	ldr	r3, [pc, #44]	; (8004164 <prvCheckForValidListAndQueue+0x4c>)
 8004136:	4a09      	ldr	r2, [pc, #36]	; (800415c <prvCheckForValidListAndQueue+0x44>)
 8004138:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800413a:	4b0b      	ldr	r3, [pc, #44]	; (8004168 <prvCheckForValidListAndQueue+0x50>)
 800413c:	4a08      	ldr	r2, [pc, #32]	; (8004160 <prvCheckForValidListAndQueue+0x48>)
 800413e:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004140:	2200      	movs	r2, #0
 8004142:	210c      	movs	r1, #12
 8004144:	2005      	movs	r0, #5
 8004146:	f7fe fc5b 	bl	8002a00 <xQueueGenericCreate>
 800414a:	4602      	mov	r2, r0
 800414c:	4b02      	ldr	r3, [pc, #8]	; (8004158 <prvCheckForValidListAndQueue+0x40>)
 800414e:	601a      	str	r2, [r3, #0]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004150:	f000 f964 	bl	800441c <vPortExitCritical>
    }
 8004154:	bf00      	nop
 8004156:	bd80      	pop	{r7, pc}
 8004158:	2000019c 	.word	0x2000019c
 800415c:	2000016c 	.word	0x2000016c
 8004160:	20000180 	.word	0x20000180
 8004164:	20000194 	.word	0x20000194
 8004168:	20000198 	.word	0x20000198

0800416c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800416c:	b480      	push	{r7}
 800416e:	b085      	sub	sp, #20
 8004170:	af00      	add	r7, sp, #0
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	60b9      	str	r1, [r7, #8]
 8004176:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	3b04      	subs	r3, #4
 800417c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004184:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	3b04      	subs	r3, #4
 800418a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	f023 0201 	bic.w	r2, r3, #1
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	3b04      	subs	r3, #4
 800419a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800419c:	4a0c      	ldr	r2, [pc, #48]	; (80041d0 <pxPortInitialiseStack+0x64>)
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	3b14      	subs	r3, #20
 80041a6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80041a8:	687a      	ldr	r2, [r7, #4]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	3b04      	subs	r3, #4
 80041b2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f06f 0202 	mvn.w	r2, #2
 80041ba:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	3b20      	subs	r3, #32
 80041c0:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80041c2:	68fb      	ldr	r3, [r7, #12]
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3714      	adds	r7, #20
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr
 80041d0:	080041d5 	.word	0x080041d5

080041d4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80041d4:	b480      	push	{r7}
 80041d6:	b085      	sub	sp, #20
 80041d8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80041da:	2300      	movs	r3, #0
 80041dc:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80041de:	4b11      	ldr	r3, [pc, #68]	; (8004224 <prvTaskExitError+0x50>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041e6:	d009      	beq.n	80041fc <prvTaskExitError+0x28>
 80041e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ec:	f383 8811 	msr	BASEPRI, r3
 80041f0:	f3bf 8f6f 	isb	sy
 80041f4:	f3bf 8f4f 	dsb	sy
 80041f8:	60fb      	str	r3, [r7, #12]
 80041fa:	e7fe      	b.n	80041fa <prvTaskExitError+0x26>
 80041fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004200:	f383 8811 	msr	BASEPRI, r3
 8004204:	f3bf 8f6f 	isb	sy
 8004208:	f3bf 8f4f 	dsb	sy
 800420c:	60bb      	str	r3, [r7, #8]
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800420e:	bf00      	nop
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d0fc      	beq.n	8004210 <prvTaskExitError+0x3c>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004216:	bf00      	nop
 8004218:	3714      	adds	r7, #20
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr
 8004222:	bf00      	nop
 8004224:	20000044 	.word	0x20000044
	...

08004230 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004230:	4b07      	ldr	r3, [pc, #28]	; (8004250 <pxCurrentTCBConst2>)
 8004232:	6819      	ldr	r1, [r3, #0]
 8004234:	6808      	ldr	r0, [r1, #0]
 8004236:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800423a:	f380 8809 	msr	PSP, r0
 800423e:	f3bf 8f6f 	isb	sy
 8004242:	f04f 0000 	mov.w	r0, #0
 8004246:	f380 8811 	msr	BASEPRI, r0
 800424a:	4770      	bx	lr
 800424c:	f3af 8000 	nop.w

08004250 <pxCurrentTCBConst2>:
 8004250:	20000094 	.word	0x20000094
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004254:	bf00      	nop
 8004256:	bf00      	nop

08004258 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004258:	4808      	ldr	r0, [pc, #32]	; (800427c <prvPortStartFirstTask+0x24>)
 800425a:	6800      	ldr	r0, [r0, #0]
 800425c:	6800      	ldr	r0, [r0, #0]
 800425e:	f380 8808 	msr	MSP, r0
 8004262:	f04f 0000 	mov.w	r0, #0
 8004266:	f380 8814 	msr	CONTROL, r0
 800426a:	b662      	cpsie	i
 800426c:	b661      	cpsie	f
 800426e:	f3bf 8f4f 	dsb	sy
 8004272:	f3bf 8f6f 	isb	sy
 8004276:	df00      	svc	0
 8004278:	bf00      	nop
 800427a:	0000      	.short	0x0000
 800427c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004280:	bf00      	nop
 8004282:	bf00      	nop

08004284 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b086      	sub	sp, #24
 8004288:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800428a:	4b44      	ldr	r3, [pc, #272]	; (800439c <xPortStartScheduler+0x118>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a44      	ldr	r2, [pc, #272]	; (80043a0 <xPortStartScheduler+0x11c>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d109      	bne.n	80042a8 <xPortStartScheduler+0x24>
 8004294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004298:	f383 8811 	msr	BASEPRI, r3
 800429c:	f3bf 8f6f 	isb	sy
 80042a0:	f3bf 8f4f 	dsb	sy
 80042a4:	613b      	str	r3, [r7, #16]
 80042a6:	e7fe      	b.n	80042a6 <xPortStartScheduler+0x22>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80042a8:	4b3c      	ldr	r3, [pc, #240]	; (800439c <xPortStartScheduler+0x118>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a3d      	ldr	r2, [pc, #244]	; (80043a4 <xPortStartScheduler+0x120>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d109      	bne.n	80042c6 <xPortStartScheduler+0x42>
 80042b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042b6:	f383 8811 	msr	BASEPRI, r3
 80042ba:	f3bf 8f6f 	isb	sy
 80042be:	f3bf 8f4f 	dsb	sy
 80042c2:	60fb      	str	r3, [r7, #12]
 80042c4:	e7fe      	b.n	80042c4 <xPortStartScheduler+0x40>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80042c6:	4b38      	ldr	r3, [pc, #224]	; (80043a8 <xPortStartScheduler+0x124>)
 80042c8:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	b2db      	uxtb	r3, r3
 80042d0:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	22ff      	movs	r2, #255	; 0xff
 80042d6:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80042e0:	78fb      	ldrb	r3, [r7, #3]
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80042e8:	b2da      	uxtb	r2, r3
 80042ea:	4b30      	ldr	r3, [pc, #192]	; (80043ac <xPortStartScheduler+0x128>)
 80042ec:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80042ee:	4b30      	ldr	r3, [pc, #192]	; (80043b0 <xPortStartScheduler+0x12c>)
 80042f0:	2207      	movs	r2, #7
 80042f2:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80042f4:	e009      	b.n	800430a <xPortStartScheduler+0x86>
        {
            ulMaxPRIGROUPValue--;
 80042f6:	4b2e      	ldr	r3, [pc, #184]	; (80043b0 <xPortStartScheduler+0x12c>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	3b01      	subs	r3, #1
 80042fc:	4a2c      	ldr	r2, [pc, #176]	; (80043b0 <xPortStartScheduler+0x12c>)
 80042fe:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004300:	78fb      	ldrb	r3, [r7, #3]
 8004302:	b2db      	uxtb	r3, r3
 8004304:	005b      	lsls	r3, r3, #1
 8004306:	b2db      	uxtb	r3, r3
 8004308:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800430a:	78fb      	ldrb	r3, [r7, #3]
 800430c:	b2db      	uxtb	r3, r3
 800430e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004312:	2b80      	cmp	r3, #128	; 0x80
 8004314:	d0ef      	beq.n	80042f6 <xPortStartScheduler+0x72>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004316:	4b26      	ldr	r3, [pc, #152]	; (80043b0 <xPortStartScheduler+0x12c>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f1c3 0307 	rsb	r3, r3, #7
 800431e:	2b04      	cmp	r3, #4
 8004320:	d009      	beq.n	8004336 <xPortStartScheduler+0xb2>
 8004322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004326:	f383 8811 	msr	BASEPRI, r3
 800432a:	f3bf 8f6f 	isb	sy
 800432e:	f3bf 8f4f 	dsb	sy
 8004332:	60bb      	str	r3, [r7, #8]
 8004334:	e7fe      	b.n	8004334 <xPortStartScheduler+0xb0>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004336:	4b1e      	ldr	r3, [pc, #120]	; (80043b0 <xPortStartScheduler+0x12c>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	021b      	lsls	r3, r3, #8
 800433c:	4a1c      	ldr	r2, [pc, #112]	; (80043b0 <xPortStartScheduler+0x12c>)
 800433e:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004340:	4b1b      	ldr	r3, [pc, #108]	; (80043b0 <xPortStartScheduler+0x12c>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004348:	4a19      	ldr	r2, [pc, #100]	; (80043b0 <xPortStartScheduler+0x12c>)
 800434a:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	b2da      	uxtb	r2, r3
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004354:	4b17      	ldr	r3, [pc, #92]	; (80043b4 <xPortStartScheduler+0x130>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a16      	ldr	r2, [pc, #88]	; (80043b4 <xPortStartScheduler+0x130>)
 800435a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800435e:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004360:	4b14      	ldr	r3, [pc, #80]	; (80043b4 <xPortStartScheduler+0x130>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a13      	ldr	r2, [pc, #76]	; (80043b4 <xPortStartScheduler+0x130>)
 8004366:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800436a:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800436c:	f000 f8d4 	bl	8004518 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004370:	4b11      	ldr	r3, [pc, #68]	; (80043b8 <xPortStartScheduler+0x134>)
 8004372:	2200      	movs	r2, #0
 8004374:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8004376:	f000 f8e9 	bl	800454c <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800437a:	4b10      	ldr	r3, [pc, #64]	; (80043bc <xPortStartScheduler+0x138>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a0f      	ldr	r2, [pc, #60]	; (80043bc <xPortStartScheduler+0x138>)
 8004380:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004384:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8004386:	f7ff ff67 	bl	8004258 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800438a:	f7ff f989 	bl	80036a0 <vTaskSwitchContext>
    prvTaskExitError();
 800438e:	f7ff ff21 	bl	80041d4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004392:	2300      	movs	r3, #0
}
 8004394:	4618      	mov	r0, r3
 8004396:	3718      	adds	r7, #24
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}
 800439c:	e000ed00 	.word	0xe000ed00
 80043a0:	410fc271 	.word	0x410fc271
 80043a4:	410fc270 	.word	0x410fc270
 80043a8:	e000e400 	.word	0xe000e400
 80043ac:	200001a8 	.word	0x200001a8
 80043b0:	200001ac 	.word	0x200001ac
 80043b4:	e000ed20 	.word	0xe000ed20
 80043b8:	20000044 	.word	0x20000044
 80043bc:	e000ef34 	.word	0xe000ef34

080043c0 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80043c0:	b480      	push	{r7}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ca:	f383 8811 	msr	BASEPRI, r3
 80043ce:	f3bf 8f6f 	isb	sy
 80043d2:	f3bf 8f4f 	dsb	sy
 80043d6:	607b      	str	r3, [r7, #4]
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80043d8:	4b0e      	ldr	r3, [pc, #56]	; (8004414 <vPortEnterCritical+0x54>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	3301      	adds	r3, #1
 80043de:	4a0d      	ldr	r2, [pc, #52]	; (8004414 <vPortEnterCritical+0x54>)
 80043e0:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80043e2:	4b0c      	ldr	r3, [pc, #48]	; (8004414 <vPortEnterCritical+0x54>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d10e      	bne.n	8004408 <vPortEnterCritical+0x48>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80043ea:	4b0b      	ldr	r3, [pc, #44]	; (8004418 <vPortEnterCritical+0x58>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d009      	beq.n	8004408 <vPortEnterCritical+0x48>
 80043f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043f8:	f383 8811 	msr	BASEPRI, r3
 80043fc:	f3bf 8f6f 	isb	sy
 8004400:	f3bf 8f4f 	dsb	sy
 8004404:	603b      	str	r3, [r7, #0]
 8004406:	e7fe      	b.n	8004406 <vPortEnterCritical+0x46>
    }
}
 8004408:	bf00      	nop
 800440a:	370c      	adds	r7, #12
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr
 8004414:	20000044 	.word	0x20000044
 8004418:	e000ed04 	.word	0xe000ed04

0800441c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800441c:	b480      	push	{r7}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004422:	4b11      	ldr	r3, [pc, #68]	; (8004468 <vPortExitCritical+0x4c>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d109      	bne.n	800443e <vPortExitCritical+0x22>
 800442a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800442e:	f383 8811 	msr	BASEPRI, r3
 8004432:	f3bf 8f6f 	isb	sy
 8004436:	f3bf 8f4f 	dsb	sy
 800443a:	607b      	str	r3, [r7, #4]
 800443c:	e7fe      	b.n	800443c <vPortExitCritical+0x20>
    uxCriticalNesting--;
 800443e:	4b0a      	ldr	r3, [pc, #40]	; (8004468 <vPortExitCritical+0x4c>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	3b01      	subs	r3, #1
 8004444:	4a08      	ldr	r2, [pc, #32]	; (8004468 <vPortExitCritical+0x4c>)
 8004446:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004448:	4b07      	ldr	r3, [pc, #28]	; (8004468 <vPortExitCritical+0x4c>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d104      	bne.n	800445a <vPortExitCritical+0x3e>
 8004450:	2300      	movs	r3, #0
 8004452:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	f383 8811 	msr	BASEPRI, r3
    {
        portENABLE_INTERRUPTS();
    }
}
 800445a:	bf00      	nop
 800445c:	370c      	adds	r7, #12
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr
 8004466:	bf00      	nop
 8004468:	20000044 	.word	0x20000044
 800446c:	00000000 	.word	0x00000000

08004470 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004470:	f3ef 8009 	mrs	r0, PSP
 8004474:	f3bf 8f6f 	isb	sy
 8004478:	4b15      	ldr	r3, [pc, #84]	; (80044d0 <pxCurrentTCBConst>)
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	f01e 0f10 	tst.w	lr, #16
 8004480:	bf08      	it	eq
 8004482:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004486:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800448a:	6010      	str	r0, [r2, #0]
 800448c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004490:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004494:	f380 8811 	msr	BASEPRI, r0
 8004498:	f3bf 8f4f 	dsb	sy
 800449c:	f3bf 8f6f 	isb	sy
 80044a0:	f7ff f8fe 	bl	80036a0 <vTaskSwitchContext>
 80044a4:	f04f 0000 	mov.w	r0, #0
 80044a8:	f380 8811 	msr	BASEPRI, r0
 80044ac:	bc09      	pop	{r0, r3}
 80044ae:	6819      	ldr	r1, [r3, #0]
 80044b0:	6808      	ldr	r0, [r1, #0]
 80044b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044b6:	f01e 0f10 	tst.w	lr, #16
 80044ba:	bf08      	it	eq
 80044bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80044c0:	f380 8809 	msr	PSP, r0
 80044c4:	f3bf 8f6f 	isb	sy
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	f3af 8000 	nop.w

080044d0 <pxCurrentTCBConst>:
 80044d0:	20000094 	.word	0x20000094
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80044d4:	bf00      	nop
 80044d6:	bf00      	nop

080044d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b082      	sub	sp, #8
 80044dc:	af00      	add	r7, sp, #0
        __asm volatile
 80044de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e2:	f383 8811 	msr	BASEPRI, r3
 80044e6:	f3bf 8f6f 	isb	sy
 80044ea:	f3bf 8f4f 	dsb	sy
 80044ee:	607b      	str	r3, [r7, #4]
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80044f0:	f7fe ffe4 	bl	80034bc <xTaskIncrementTick>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d003      	beq.n	8004502 <SysTick_Handler+0x2a>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80044fa:	4b06      	ldr	r3, [pc, #24]	; (8004514 <SysTick_Handler+0x3c>)
 80044fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004500:	601a      	str	r2, [r3, #0]
 8004502:	2300      	movs	r3, #0
 8004504:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portENABLE_INTERRUPTS();
}
 800450c:	bf00      	nop
 800450e:	3708      	adds	r7, #8
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}
 8004514:	e000ed04 	.word	0xe000ed04

08004518 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8004518:	b480      	push	{r7}
 800451a:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800451c:	4b08      	ldr	r3, [pc, #32]	; (8004540 <vPortSetupTimerInterrupt+0x28>)
 800451e:	2200      	movs	r2, #0
 8004520:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004522:	4b08      	ldr	r3, [pc, #32]	; (8004544 <vPortSetupTimerInterrupt+0x2c>)
 8004524:	2200      	movs	r2, #0
 8004526:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004528:	4b07      	ldr	r3, [pc, #28]	; (8004548 <vPortSetupTimerInterrupt+0x30>)
 800452a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800452e:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004530:	4b03      	ldr	r3, [pc, #12]	; (8004540 <vPortSetupTimerInterrupt+0x28>)
 8004532:	2207      	movs	r2, #7
 8004534:	601a      	str	r2, [r3, #0]
}
 8004536:	bf00      	nop
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr
 8004540:	e000e010 	.word	0xe000e010
 8004544:	e000e018 	.word	0xe000e018
 8004548:	e000e014 	.word	0xe000e014

0800454c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 800454c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800455c <vPortEnableVFP+0x10>
 8004550:	6801      	ldr	r1, [r0, #0]
 8004552:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004556:	6001      	str	r1, [r0, #0]
 8004558:	4770      	bx	lr
 800455a:	0000      	.short	0x0000
 800455c:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004560:	bf00      	nop
 8004562:	bf00      	nop

08004564 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b08a      	sub	sp, #40	; 0x28
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 800456c:	2300      	movs	r3, #0
 800456e:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8004570:	f7fe fe9a 	bl	80032a8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004574:	4b52      	ldr	r3, [pc, #328]	; (80046c0 <pvPortMalloc+0x15c>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d101      	bne.n	8004580 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 800457c:	f000 f904 	bl	8004788 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d012      	beq.n	80045ac <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8004586:	2208      	movs	r2, #8
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	f003 0307 	and.w	r3, r3, #7
 800458e:	1ad3      	subs	r3, r2, r3
 8004590:	3308      	adds	r3, #8
 8004592:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8004594:	69bb      	ldr	r3, [r7, #24]
 8004596:	43db      	mvns	r3, r3
 8004598:	687a      	ldr	r2, [r7, #4]
 800459a:	429a      	cmp	r2, r3
 800459c:	d804      	bhi.n	80045a8 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	69bb      	ldr	r3, [r7, #24]
 80045a2:	4413      	add	r3, r2
 80045a4:	607b      	str	r3, [r7, #4]
 80045a6:	e001      	b.n	80045ac <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 80045a8:	2300      	movs	r3, #0
 80045aa:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	db6f      	blt.n	8004692 <pvPortMalloc+0x12e>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d06c      	beq.n	8004692 <pvPortMalloc+0x12e>
 80045b8:	4b42      	ldr	r3, [pc, #264]	; (80046c4 <pvPortMalloc+0x160>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	429a      	cmp	r2, r3
 80045c0:	d867      	bhi.n	8004692 <pvPortMalloc+0x12e>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80045c2:	4b41      	ldr	r3, [pc, #260]	; (80046c8 <pvPortMalloc+0x164>)
 80045c4:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80045c6:	4b40      	ldr	r3, [pc, #256]	; (80046c8 <pvPortMalloc+0x164>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80045cc:	e004      	b.n	80045d8 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 80045ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d0:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80045d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80045d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	429a      	cmp	r2, r3
 80045e0:	d903      	bls.n	80045ea <pvPortMalloc+0x86>
 80045e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d1f1      	bne.n	80045ce <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80045ea:	4b35      	ldr	r3, [pc, #212]	; (80046c0 <pvPortMalloc+0x15c>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d04e      	beq.n	8004692 <pvPortMalloc+0x12e>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80045f4:	6a3b      	ldr	r3, [r7, #32]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	2208      	movs	r2, #8
 80045fa:	4413      	add	r3, r2
 80045fc:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80045fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	6a3b      	ldr	r3, [r7, #32]
 8004604:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004608:	685a      	ldr	r2, [r3, #4]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	1ad2      	subs	r2, r2, r3
 800460e:	2308      	movs	r3, #8
 8004610:	005b      	lsls	r3, r3, #1
 8004612:	429a      	cmp	r2, r3
 8004614:	d91e      	bls.n	8004654 <pvPortMalloc+0xf0>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004616:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	4413      	add	r3, r2
 800461c:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	f003 0307 	and.w	r3, r3, #7
 8004624:	2b00      	cmp	r3, #0
 8004626:	d009      	beq.n	800463c <pvPortMalloc+0xd8>
        __asm volatile
 8004628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800462c:	f383 8811 	msr	BASEPRI, r3
 8004630:	f3bf 8f6f 	isb	sy
 8004634:	f3bf 8f4f 	dsb	sy
 8004638:	613b      	str	r3, [r7, #16]
 800463a:	e7fe      	b.n	800463a <pvPortMalloc+0xd6>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800463c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463e:	685a      	ldr	r2, [r3, #4]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	1ad2      	subs	r2, r2, r3
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800464e:	6978      	ldr	r0, [r7, #20]
 8004650:	f000 f8f6 	bl	8004840 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004654:	4b1b      	ldr	r3, [pc, #108]	; (80046c4 <pvPortMalloc+0x160>)
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	4a19      	ldr	r2, [pc, #100]	; (80046c4 <pvPortMalloc+0x160>)
 8004660:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004662:	4b18      	ldr	r3, [pc, #96]	; (80046c4 <pvPortMalloc+0x160>)
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	4b19      	ldr	r3, [pc, #100]	; (80046cc <pvPortMalloc+0x168>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	429a      	cmp	r2, r3
 800466c:	d203      	bcs.n	8004676 <pvPortMalloc+0x112>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800466e:	4b15      	ldr	r3, [pc, #84]	; (80046c4 <pvPortMalloc+0x160>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a16      	ldr	r2, [pc, #88]	; (80046cc <pvPortMalloc+0x168>)
 8004674:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8004676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800467e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004680:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004684:	2200      	movs	r2, #0
 8004686:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004688:	4b11      	ldr	r3, [pc, #68]	; (80046d0 <pvPortMalloc+0x16c>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	3301      	adds	r3, #1
 800468e:	4a10      	ldr	r2, [pc, #64]	; (80046d0 <pvPortMalloc+0x16c>)
 8004690:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004692:	f7fe fe17 	bl	80032c4 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004696:	69fb      	ldr	r3, [r7, #28]
 8004698:	f003 0307 	and.w	r3, r3, #7
 800469c:	2b00      	cmp	r3, #0
 800469e:	d009      	beq.n	80046b4 <pvPortMalloc+0x150>
 80046a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046a4:	f383 8811 	msr	BASEPRI, r3
 80046a8:	f3bf 8f6f 	isb	sy
 80046ac:	f3bf 8f4f 	dsb	sy
 80046b0:	60fb      	str	r3, [r7, #12]
 80046b2:	e7fe      	b.n	80046b2 <pvPortMalloc+0x14e>
    return pvReturn;
 80046b4:	69fb      	ldr	r3, [r7, #28]
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3728      	adds	r7, #40	; 0x28
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	bf00      	nop
 80046c0:	200051b8 	.word	0x200051b8
 80046c4:	200051bc 	.word	0x200051bc
 80046c8:	200051b0 	.word	0x200051b0
 80046cc:	200051c0 	.word	0x200051c0
 80046d0:	200051c4 	.word	0x200051c4

080046d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b086      	sub	sp, #24
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d047      	beq.n	8004776 <vPortFree+0xa2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80046e6:	2308      	movs	r3, #8
 80046e8:	425b      	negs	r3, r3
 80046ea:	697a      	ldr	r2, [r7, #20]
 80046ec:	4413      	add	r3, r2
 80046ee:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	db09      	blt.n	8004710 <vPortFree+0x3c>
 80046fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004700:	f383 8811 	msr	BASEPRI, r3
 8004704:	f3bf 8f6f 	isb	sy
 8004708:	f3bf 8f4f 	dsb	sy
 800470c:	60fb      	str	r3, [r7, #12]
 800470e:	e7fe      	b.n	800470e <vPortFree+0x3a>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d009      	beq.n	800472c <vPortFree+0x58>
 8004718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800471c:	f383 8811 	msr	BASEPRI, r3
 8004720:	f3bf 8f6f 	isb	sy
 8004724:	f3bf 8f4f 	dsb	sy
 8004728:	60bb      	str	r3, [r7, #8]
 800472a:	e7fe      	b.n	800472a <vPortFree+0x56>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	0fdb      	lsrs	r3, r3, #31
 8004732:	f003 0301 	and.w	r3, r3, #1
 8004736:	b2db      	uxtb	r3, r3
 8004738:	2b00      	cmp	r3, #0
 800473a:	d01c      	beq.n	8004776 <vPortFree+0xa2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d118      	bne.n	8004776 <vPortFree+0xa2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8004750:	f7fe fdaa 	bl	80032a8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	685a      	ldr	r2, [r3, #4]
 8004758:	4b09      	ldr	r3, [pc, #36]	; (8004780 <vPortFree+0xac>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4413      	add	r3, r2
 800475e:	4a08      	ldr	r2, [pc, #32]	; (8004780 <vPortFree+0xac>)
 8004760:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004762:	6938      	ldr	r0, [r7, #16]
 8004764:	f000 f86c 	bl	8004840 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004768:	4b06      	ldr	r3, [pc, #24]	; (8004784 <vPortFree+0xb0>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	3301      	adds	r3, #1
 800476e:	4a05      	ldr	r2, [pc, #20]	; (8004784 <vPortFree+0xb0>)
 8004770:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004772:	f7fe fda7 	bl	80032c4 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004776:	bf00      	nop
 8004778:	3718      	adds	r7, #24
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
 800477e:	bf00      	nop
 8004780:	200051bc 	.word	0x200051bc
 8004784:	200051c8 	.word	0x200051c8

08004788 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004788:	b480      	push	{r7}
 800478a:	b085      	sub	sp, #20
 800478c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800478e:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8004792:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004794:	4b25      	ldr	r3, [pc, #148]	; (800482c <prvHeapInit+0xa4>)
 8004796:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f003 0307 	and.w	r3, r3, #7
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d00c      	beq.n	80047bc <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	3307      	adds	r3, #7
 80047a6:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f023 0307 	bic.w	r3, r3, #7
 80047ae:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 80047b0:	68ba      	ldr	r2, [r7, #8]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	4a1d      	ldr	r2, [pc, #116]	; (800482c <prvHeapInit+0xa4>)
 80047b8:	4413      	add	r3, r2
 80047ba:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80047c0:	4a1b      	ldr	r2, [pc, #108]	; (8004830 <prvHeapInit+0xa8>)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80047c6:	4b1a      	ldr	r3, [pc, #104]	; (8004830 <prvHeapInit+0xa8>)
 80047c8:	2200      	movs	r2, #0
 80047ca:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	68ba      	ldr	r2, [r7, #8]
 80047d0:	4413      	add	r3, r2
 80047d2:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80047d4:	2208      	movs	r2, #8
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	1a9b      	subs	r3, r3, r2
 80047da:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f023 0307 	bic.w	r3, r3, #7
 80047e2:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	4a13      	ldr	r2, [pc, #76]	; (8004834 <prvHeapInit+0xac>)
 80047e8:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80047ea:	4b12      	ldr	r3, [pc, #72]	; (8004834 <prvHeapInit+0xac>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	2200      	movs	r2, #0
 80047f0:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80047f2:	4b10      	ldr	r3, [pc, #64]	; (8004834 <prvHeapInit+0xac>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	2200      	movs	r2, #0
 80047f8:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	68fa      	ldr	r2, [r7, #12]
 8004802:	1ad2      	subs	r2, r2, r3
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004808:	4b0a      	ldr	r3, [pc, #40]	; (8004834 <prvHeapInit+0xac>)
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	4a08      	ldr	r2, [pc, #32]	; (8004838 <prvHeapInit+0xb0>)
 8004816:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	4a07      	ldr	r2, [pc, #28]	; (800483c <prvHeapInit+0xb4>)
 800481e:	6013      	str	r3, [r2, #0]
}
 8004820:	bf00      	nop
 8004822:	3714      	adds	r7, #20
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr
 800482c:	200001b0 	.word	0x200001b0
 8004830:	200051b0 	.word	0x200051b0
 8004834:	200051b8 	.word	0x200051b8
 8004838:	200051c0 	.word	0x200051c0
 800483c:	200051bc 	.word	0x200051bc

08004840 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004840:	b480      	push	{r7}
 8004842:	b085      	sub	sp, #20
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004848:	4b28      	ldr	r3, [pc, #160]	; (80048ec <prvInsertBlockIntoFreeList+0xac>)
 800484a:	60fb      	str	r3, [r7, #12]
 800484c:	e002      	b.n	8004854 <prvInsertBlockIntoFreeList+0x14>
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	60fb      	str	r3, [r7, #12]
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	429a      	cmp	r2, r3
 800485c:	d8f7      	bhi.n	800484e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	68ba      	ldr	r2, [r7, #8]
 8004868:	4413      	add	r3, r2
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	429a      	cmp	r2, r3
 800486e:	d108      	bne.n	8004882 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	685a      	ldr	r2, [r3, #4]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	441a      	add	r2, r3
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	68ba      	ldr	r2, [r7, #8]
 800488c:	441a      	add	r2, r3
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	429a      	cmp	r2, r3
 8004894:	d118      	bne.n	80048c8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	4b15      	ldr	r3, [pc, #84]	; (80048f0 <prvInsertBlockIntoFreeList+0xb0>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	429a      	cmp	r2, r3
 80048a0:	d00d      	beq.n	80048be <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	685a      	ldr	r2, [r3, #4]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	441a      	add	r2, r3
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	601a      	str	r2, [r3, #0]
 80048bc:	e008      	b.n	80048d0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80048be:	4b0c      	ldr	r3, [pc, #48]	; (80048f0 <prvInsertBlockIntoFreeList+0xb0>)
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	601a      	str	r2, [r3, #0]
 80048c6:	e003      	b.n	80048d0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80048d0:	68fa      	ldr	r2, [r7, #12]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d002      	beq.n	80048de <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80048de:	bf00      	nop
 80048e0:	3714      	adds	r7, #20
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr
 80048ea:	bf00      	nop
 80048ec:	200051b0 	.word	0x200051b0
 80048f0:	200051b8 	.word	0x200051b8

080048f4 <main>:

/*******************************************************************************
 *                      		Main Functions                                 *
 *******************************************************************************/
int main(void)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b086      	sub	sp, #24
 80048f8:	af02      	add	r7, sp, #8
	Sytem_Init();
 80048fa:	f000 f837 	bl	800496c <Sytem_Init>

	BaseType_t xReturned;
	TaskHandle_t UltraSonic_Read_Handle = NULL;
 80048fe:	2300      	movs	r3, #0
 8004900:	60bb      	str	r3, [r7, #8]

	/* Create the task, storing the handle. */
	xReturned = xTaskCreate(
 8004902:	f107 0308 	add.w	r3, r7, #8
 8004906:	9301      	str	r3, [sp, #4]
 8004908:	2302      	movs	r3, #2
 800490a:	9300      	str	r3, [sp, #0]
 800490c:	2301      	movs	r3, #1
 800490e:	2264      	movs	r2, #100	; 0x64
 8004910:	4910      	ldr	r1, [pc, #64]	; (8004954 <main+0x60>)
 8004912:	4811      	ldr	r0, [pc, #68]	; (8004958 <main+0x64>)
 8004914:	f7fe fa7a 	bl	8002e0c <xTaskCreate>
 8004918:	60f8      	str	r0, [r7, #12]
			2,/* Priority at which the task is created. */
			&UltraSonic_Read_Handle );      /* Used to pass out the created task's handle. */


	/* Creation of the Motor task*/
	xTaskHandle Motor_Task_Handle  = NULL;
 800491a:	2300      	movs	r3, #0
 800491c:	607b      	str	r3, [r7, #4]
	xReturned = xTaskCreate((TaskFunction_t)Motor_Task,(const char * const)"Motor TASK",100,( void * ) 1,3,&Motor_Task_Handle);
 800491e:	1d3b      	adds	r3, r7, #4
 8004920:	9301      	str	r3, [sp, #4]
 8004922:	2303      	movs	r3, #3
 8004924:	9300      	str	r3, [sp, #0]
 8004926:	2301      	movs	r3, #1
 8004928:	2264      	movs	r2, #100	; 0x64
 800492a:	490c      	ldr	r1, [pc, #48]	; (800495c <main+0x68>)
 800492c:	480c      	ldr	r0, [pc, #48]	; (8004960 <main+0x6c>)
 800492e:	f7fe fa6d 	bl	8002e0c <xTaskCreate>
 8004932:	60f8      	str	r0, [r7, #12]

	/* Creation of the Application task*/
	xTaskHandle App_Task_Handle  = NULL;
 8004934:	2300      	movs	r3, #0
 8004936:	603b      	str	r3, [r7, #0]
	xReturned = xTaskCreate((TaskFunction_t)App_Task,(const char * const)"App TASK",100,( void * ) 1,1,&App_Task_Handle);
 8004938:	463b      	mov	r3, r7
 800493a:	9301      	str	r3, [sp, #4]
 800493c:	2301      	movs	r3, #1
 800493e:	9300      	str	r3, [sp, #0]
 8004940:	2301      	movs	r3, #1
 8004942:	2264      	movs	r2, #100	; 0x64
 8004944:	4907      	ldr	r1, [pc, #28]	; (8004964 <main+0x70>)
 8004946:	4808      	ldr	r0, [pc, #32]	; (8004968 <main+0x74>)
 8004948:	f7fe fa60 	bl	8002e0c <xTaskCreate>
 800494c:	60f8      	str	r0, [r7, #12]

	if ( xReturned == 0 )
	{

	}
	vTaskStartScheduler();
 800494e:	f7fe fc5b 	bl	8003208 <vTaskStartScheduler>

	/* Loop forever */
	for(;;)
 8004952:	e7fe      	b.n	8004952 <main+0x5e>
 8004954:	08004ab8 	.word	0x08004ab8
 8004958:	08000801 	.word	0x08000801
 800495c:	08004ac8 	.word	0x08004ac8
 8004960:	08000c11 	.word	0x08000c11
 8004964:	08004ad4 	.word	0x08004ad4
 8004968:	08000381 	.word	0x08000381

0800496c <Sytem_Init>:

	}
}

void Sytem_Init(void)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	af00      	add	r7, sp, #0
	rcc_setSystemClk(HSI);
 8004970:	2000      	movs	r0, #0
 8004972:	f7fd fe9d 	bl	80026b0 <rcc_setSystemClk>

	rcc_enablePeriClk(APB2,TIM8_EN);
 8004976:	210d      	movs	r1, #13
 8004978:	2002      	movs	r0, #2
 800497a:	f7fd feed 	bl	8002758 <rcc_enablePeriClk>
	rcc_enablePeriClk(APB2,TIM1_EN);
 800497e:	210b      	movs	r1, #11
 8004980:	2002      	movs	r0, #2
 8004982:	f7fd fee9 	bl	8002758 <rcc_enablePeriClk>
	rcc_enablePeriClk(APB1,TIM2_EN);
 8004986:	2100      	movs	r1, #0
 8004988:	2001      	movs	r0, #1
 800498a:	f7fd fee5 	bl	8002758 <rcc_enablePeriClk>
	rcc_enablePeriClk(APB1,TIM6_EN);
 800498e:	2104      	movs	r1, #4
 8004990:	2001      	movs	r0, #1
 8004992:	f7fd fee1 	bl	8002758 <rcc_enablePeriClk>

	rcc_enablePeriClk(AHB,DMA1_EN);
 8004996:	2100      	movs	r1, #0
 8004998:	2000      	movs	r0, #0
 800499a:	f7fd fedd 	bl	8002758 <rcc_enablePeriClk>
	rcc_enablePeriClk(AHB,DMA2_EN);
 800499e:	2101      	movs	r1, #1
 80049a0:	2000      	movs	r0, #0
 80049a2:	f7fd fed9 	bl	8002758 <rcc_enablePeriClk>

	rcc_enablePeriClk(AHB,IOPA_EN);
 80049a6:	2111      	movs	r1, #17
 80049a8:	2000      	movs	r0, #0
 80049aa:	f7fd fed5 	bl	8002758 <rcc_enablePeriClk>
	rcc_enablePeriClk(AHB,IOPB_EN);
 80049ae:	2112      	movs	r1, #18
 80049b0:	2000      	movs	r0, #0
 80049b2:	f7fd fed1 	bl	8002758 <rcc_enablePeriClk>
	rcc_enablePeriClk(AHB,IOPC_EN);
 80049b6:	2113      	movs	r1, #19
 80049b8:	2000      	movs	r0, #0
 80049ba:	f7fd fecd 	bl	8002758 <rcc_enablePeriClk>

	TIM6_Init(7);
 80049be:	2007      	movs	r0, #7
 80049c0:	f7fd fa8c 	bl	8001edc <TIM6_Init>




	Ultrasonic_init();
 80049c4:	f7fc fa0a 	bl	8000ddc <Ultrasonic_init>

}
 80049c8:	bf00      	nop
 80049ca:	bd80      	pop	{r7, pc}

080049cc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80049cc:	480d      	ldr	r0, [pc, #52]	; (8004a04 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80049ce:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80049d0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80049d4:	480c      	ldr	r0, [pc, #48]	; (8004a08 <LoopForever+0x6>)
  ldr r1, =_edata
 80049d6:	490d      	ldr	r1, [pc, #52]	; (8004a0c <LoopForever+0xa>)
  ldr r2, =_sidata
 80049d8:	4a0d      	ldr	r2, [pc, #52]	; (8004a10 <LoopForever+0xe>)
  movs r3, #0
 80049da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80049dc:	e002      	b.n	80049e4 <LoopCopyDataInit>

080049de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80049de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80049e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80049e2:	3304      	adds	r3, #4

080049e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80049e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80049e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80049e8:	d3f9      	bcc.n	80049de <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80049ea:	4a0a      	ldr	r2, [pc, #40]	; (8004a14 <LoopForever+0x12>)
  ldr r4, =_ebss
 80049ec:	4c0a      	ldr	r4, [pc, #40]	; (8004a18 <LoopForever+0x16>)
  movs r3, #0
 80049ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80049f0:	e001      	b.n	80049f6 <LoopFillZerobss>

080049f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80049f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80049f4:	3204      	adds	r2, #4

080049f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80049f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80049f8:	d3fb      	bcc.n	80049f2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80049fa:	f000 f811 	bl	8004a20 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80049fe:	f7ff ff79 	bl	80048f4 <main>

08004a02 <LoopForever>:

LoopForever:
    b LoopForever
 8004a02:	e7fe      	b.n	8004a02 <LoopForever>
  ldr   r0, =_estack
 8004a04:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8004a08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004a0c:	20000048 	.word	0x20000048
  ldr r2, =_sidata
 8004a10:	08004ae8 	.word	0x08004ae8
  ldr r2, =_sbss
 8004a14:	20000048 	.word	0x20000048
  ldr r4, =_ebss
 8004a18:	200051d8 	.word	0x200051d8

08004a1c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004a1c:	e7fe      	b.n	8004a1c <ADC1_2_IRQHandler>
	...

08004a20 <__libc_init_array>:
 8004a20:	b570      	push	{r4, r5, r6, lr}
 8004a22:	4e0d      	ldr	r6, [pc, #52]	; (8004a58 <__libc_init_array+0x38>)
 8004a24:	4c0d      	ldr	r4, [pc, #52]	; (8004a5c <__libc_init_array+0x3c>)
 8004a26:	1ba4      	subs	r4, r4, r6
 8004a28:	10a4      	asrs	r4, r4, #2
 8004a2a:	2500      	movs	r5, #0
 8004a2c:	42a5      	cmp	r5, r4
 8004a2e:	d109      	bne.n	8004a44 <__libc_init_array+0x24>
 8004a30:	4e0b      	ldr	r6, [pc, #44]	; (8004a60 <__libc_init_array+0x40>)
 8004a32:	4c0c      	ldr	r4, [pc, #48]	; (8004a64 <__libc_init_array+0x44>)
 8004a34:	f000 f82c 	bl	8004a90 <_init>
 8004a38:	1ba4      	subs	r4, r4, r6
 8004a3a:	10a4      	asrs	r4, r4, #2
 8004a3c:	2500      	movs	r5, #0
 8004a3e:	42a5      	cmp	r5, r4
 8004a40:	d105      	bne.n	8004a4e <__libc_init_array+0x2e>
 8004a42:	bd70      	pop	{r4, r5, r6, pc}
 8004a44:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004a48:	4798      	blx	r3
 8004a4a:	3501      	adds	r5, #1
 8004a4c:	e7ee      	b.n	8004a2c <__libc_init_array+0xc>
 8004a4e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004a52:	4798      	blx	r3
 8004a54:	3501      	adds	r5, #1
 8004a56:	e7f2      	b.n	8004a3e <__libc_init_array+0x1e>
 8004a58:	08004ae0 	.word	0x08004ae0
 8004a5c:	08004ae0 	.word	0x08004ae0
 8004a60:	08004ae0 	.word	0x08004ae0
 8004a64:	08004ae4 	.word	0x08004ae4

08004a68 <memcpy>:
 8004a68:	b510      	push	{r4, lr}
 8004a6a:	1e43      	subs	r3, r0, #1
 8004a6c:	440a      	add	r2, r1
 8004a6e:	4291      	cmp	r1, r2
 8004a70:	d100      	bne.n	8004a74 <memcpy+0xc>
 8004a72:	bd10      	pop	{r4, pc}
 8004a74:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a78:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a7c:	e7f7      	b.n	8004a6e <memcpy+0x6>

08004a7e <memset>:
 8004a7e:	4402      	add	r2, r0
 8004a80:	4603      	mov	r3, r0
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d100      	bne.n	8004a88 <memset+0xa>
 8004a86:	4770      	bx	lr
 8004a88:	f803 1b01 	strb.w	r1, [r3], #1
 8004a8c:	e7f9      	b.n	8004a82 <memset+0x4>
	...

08004a90 <_init>:
 8004a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a92:	bf00      	nop
 8004a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a96:	bc08      	pop	{r3}
 8004a98:	469e      	mov	lr, r3
 8004a9a:	4770      	bx	lr

08004a9c <_fini>:
 8004a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a9e:	bf00      	nop
 8004aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004aa2:	bc08      	pop	{r3}
 8004aa4:	469e      	mov	lr, r3
 8004aa6:	4770      	bx	lr
